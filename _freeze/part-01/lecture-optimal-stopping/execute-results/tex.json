{
  "hash": "7455d005b6978ab4eae9c28196e63b0c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Lecture I - Optimal Stopping\"\nsubtitle: \"Programming: Everyday Decision-Making Algorithms\"\nauthor: \"Dr. Tobias Vlćek\"\ninstitute: \"Kühne Logistics University Hamburg - Winter 2024\"\ntitle-slide-attributes:\n    data-background-color: \"#8C3048\"\n\nformat:\n    revealjs:\n        theme: [default, ../styles.scss]\n        transition: slide\n        transition-speed: fast\n        highlight-style: arrow\n        code-overflow: wrap\n        slide-number: true\n        code-copy: true\n        height: 750\n        footer: \" {{< meta title >}} | {{< meta author >}} | [Home](lecture-optimal-stopping.qmd)\"\n        output-file: lecture-presentation.html\n    html:\n        theme: litera\n    pdf: \n        documentclass: report\n\nexecute:\n    freeze: auto\n    cache: true\n    echo: true\n---\n\n\n\n\n\n\n\n\n# [About this Course]{.flow} {.title}\n\n## Teaching Team\n\n::: {layout=\"[[1,1]]\"}\n![**Dr. Tobias Vlcek**](../images/tobias-vlcek.jpg)\n\n![**Dr. Nils Roemer**](../images/nils-roemer.jpeg)\n:::\n\n## About me\n\n:::{.incremental}\n- **Field:** Optimizing and simulating complex systems\n- **Languages:** of choice: Julia, Python and Rust\n- **Interest:** Modelling, Simulations, Machine Learning\n- **Teaching:** OR, Algorithms, and Programming\n- **Contact:** [vlcek@beyondsimulations.com](mailto:vlcek@beyondsimulations.com)\n:::\n\n. . .\n\n:::{.callout-tip}\nWe really appreciate active participation and interaction!\n:::\n\n## Course Outline\n\n- **I:** Optimal Stopping\n- **II:** Explore & Exploit\n- **III:** Caching\n- **IV:** Scheduling\n- **V:** Randomness\n- **VI:** Computational Kindness\n\n## Participation\n\n- Try **actively participating** in this course \n- You will find it much [(!)]{.highlight} easier and more fun\n- Material and slides are hosted here: [beyondsimulations.github.io/Programming-Everyday-Decisions]( https://beyondsimulations.github.io/Programming-Everyday-Decisions/)\n\n## Teaching\n\n- **Lecture:** Presentation and discussion of algorithms related to everyday decision-making\n- **Tutorial:** Step-by-step assignments to be solved and discussed together in groups\n- **Difficulty:** Strongly depends on your background and programming experience\n\n. . .\n\n:::{.callout-tip}\nNo worries, we will help you out if you have any questions!\n:::\n\n## Passing the Course \n\n- **Pass/fail course** without exams\n- [75% attendance]{.highlight} required for passing the course\n- Hand in the assignments of at least **two lectures**\n- **Short presentation** and discussion at the end\n- You work together in groups of **three students**\n\n## Handing in Assignments\n\n- Each student group submits **one solution**\n- Provide us **all** working notebooks of the lecture\n- Hand in is due at the **beginning of the next lecture**\n- At least **50 %** have to be correct to pass\n- [You have to pass at least twice]{.highlight}\n\n. . .\n\n:::{.callout-tip}\nThis is just in order to provide you with working solutions after each deadline.\n:::\n\n## Learning Python\n\nWe will mostly **not cover Python during the lectures!**\n\n. . .\n\n[Question]{.question}: Anybody know why?\n\n. . .\n\n- In our experience, the best way to learn is by **doing**!\n- Here, we will focus on decision-making algorithms\n- You will learn Python by [doing the tutorials]{.highlight}\n\n. . .\n\n:::{.callout-tip}\nDon't worry, we will help you out if you have any questions!\n:::\n\n## Difficulty of the Course\n\n- At first it might be [a little bit overwhelming]{.highlight}\n- Programming is similar to learning a **new language**\n- First, you have to **get used to it** and learn words\n- **Later**, you'll be able to apply it and see results\n- Important: *Practice, practice, practice!*\n\n## Goals of the Course\n\n- Learn the [basics of programming]{.highlight}\n- Learn about **algorithmic thinking**\n- Be able to **apply** methods and concepts \n- **Solve practical problems** with algorithms\n\n:::{.callout-tip}\nWe are convinced that this course will be quite interesting and **teach you more for your daily life** than most other courses!\n:::\n\n## Why Python?\n\n- **Origins**: Conceived in late 1980s as a teaching and scripting language\n- **Simple Syntax**: Python’s syntax is mostly straightforward and very easy to learn\n- **Versatility**: Used in web development, data analysis, artificial intelligence, and more\n- **Community Support**: A large community of users worldwide and extensive documentation\n\n## Help from AI\n\n- You are [allowed to use AI]{.highlight} in the course, we use it as well (e.g., Claude, ChatGPT, LLama3 ...)\n- These **tools are great** for learning Python!\n- Can help you a lot **to get started** with programming\n\n. . .\n\n:::{.callout-warning}\nBut you should *not* simply use them to *replace* your learning.\n:::\n\n# [How to learn programming]{.flow} {.title}\n\n## Our Recommendation\n\n1. [Be present]{.highlight}: Attend the lecture and solve the tutorials\n2. [Put in some work]{.highlight}: Repeat code and try to understand it\n3. [Do coding]{.highlight}: Run code, play around, modify, and solve\n\n. . .\n\n:::{.callout-tip}\nGreat resources to start are books and small challenges. You can find a list of book recommendations at the end of the lecture. Small challenges to solve can for example be found on [Codewars](https://www.codewars.com/).\n:::\n\n## Don't give up!\n\n- Programming is [problem solving]{.highlight}, don't get **frustrated**!\n- Expect to **stretch** your comfort zone\n\n<center>\n\n<br>\n<iframe src=\"https://giphy.com/embed/FKsCiEI5pFvIQ\" width=\"480\" height=\"360\" style=\"\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe>\n\n<center>\n\n# [Setting up Python]{.flow} {.title}\n\n## The Setup\n\n- We will use [Jupyter Notebooks](https://jupyter.org/) for the tutorials\n- Allow to **combine code and text** in one document\n- We will use [Visual Studio Code](https://code.visualstudio.com/) as an IDE\n\n. . .\n\n:::{.callout-tip}\nIDE = Integrated Development Environment\n:::\n\n## Install Python\n\n- Sources are the [Python website](https://www.python.org/downloads/) or [Anaconda](https://www.anaconda.com/)\n- On macOS, Python is often **already installed**\n- If not, I recommend [Miniconda](https://docs.anaconda.com/miniconda/#quick-command-line-install) (via command line)\n\n. . .\n\n::: {.callout-tip}\nIf the installation does not work, **let us know!**\n:::\n\n## Install VS Code\n\n- Download and install from the [website](https://code.visualstudio.com/)\n- Built for **Windows, Linux and Mac**\n- Install the **Python** and **Jupyter** extension\n- [Now you are ready to go!]{.highlight}\n\n. . .\n\n::: {.callout-tip}\nUnsure on how to work with VS Code and notebooks? Take a look at the [tutorial](https://code.visualstudio.com/docs/datascience/jupyter-notebooks) from VS Code and/or ask us! We are happy to help you out!\n:::\n\n## Python on iPads\n\n- You **can run Python scripts** on your iPad\n- But it is [not recommended]{.highlight} for the course\n- However, you could use [Juno](https://apps.apple.com/us/app/juno-python-ide/id1440445498) **if you want to**\n- It works **locally** on your iPad and can run notebooks\n\n. . .\n\n::: {.callout-caution}\nNot all packages available in Python are available here, thus you might need a computer to solve certain problems. For our course, this should not be a problem.\n:::\n\n# [Your first code]{.flow} {.title}\n\n## Hello, World!\n\n[Task:]{.task} Create a directory for the course and create a new file called `hello_world.py` with the following code:\n\n::: {.cell output-location='fragment' execution_count=2}\n``` {.python .cell-code}\n# This is a comment in Python\nprint(\"Hello, World!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, World!\n```\n:::\n:::\n\n\n. . .\n\nRun it with the green 'run' button or by pressing [F5]{.task}!\n\n. . .\n\n::: {.callout-note}\n\"Hello world\" is a classic example to start with. Often used as a test to check if your computer is working properly and that you have installed the necessary software.\n:::\n\n## {.loud-slide}\n::: {.r-fit-text}\nAny questions\n\nso far?\n:::\n\n# [Optimal Stopping]{.flow} {.title}\n\n## What is Optimal Stopping?\n\n[Question:]{.question} Anybody know what optimal stopping is?\n\n:::{.incremental}\n- [Optimal stopping]{.highlight} is the problem of:\n    - choosing the **best option**\n    - from a **sequence of options**\n    - where the options are revealed **one by one**\n:::\n\n. . .\n\n[Question:]{.question} Anybody have an example of optimal stopping?\n\n## [Flat Hunting]{.invert-font} {background-image=\"https://unsplash.com/photos/CAuxRJhSLC0/download?ixid=M3wxMjA3fDB8MXxzZWFyY2h8NDZ8fGhhbWJ1cmd8ZW58MHx8fHwxNzI5OTgyMjg3fDA&force=true\"}\n::: footer\n[Photo by <a href=\"https://unsplash.com/@jiren_091\">Aditya Ghosh</a> on Unsplash]{.invert-font}\n:::\n\n## [Hiring applicants]{.invert-font} {background-image=\"https://unsplash.com/photos/OQMZwNd3ThU/download?ixid=M3wxMjA3fDB8MXxhbGx8NHx8fHx8fHx8MTcyOTk3MzA0OXw&force=true\"}\n::: footer\n[Photo by <a href=\"https://unsplash.com/@homajob\">Scott Graham</a> on Unsplash]{.invert-font}\n:::\n\n## [Dating]{.invert-font} {background-image=\"https://unsplash.com/photos/-XlBjdtRqK8/download?ixid=M3wxMjA3fDB8MXxzZWFyY2h8NTV8fGxvdmV8ZW58MHx8fHwxNzI5OTI4NTkxfDA&force=true\"}\n::: footer\n[Photo by <a href=\"https://unsplash.com/@shelbymary_\">Shelby Deeter</a> on Unsplash]{.invert-font}\n:::\n\n## [Searching for a parking spot]{.invert-font} {background-image=\"https://unsplash.com/photos/FRx3dQj6iYg/download?ixid=M3wxMjA3fDB8MXxzZWFyY2h8OHx8cGFya2luZyUyMG5ldyUyMHlvcmt8ZW58MHx8fHwxNzI5OTgyNjg4fDA&force=true\"}\n::: footer\n[Photo by <a href=\"https://unsplash.com/@josephtpearson\">Joseph Pearson</a> on Unsplash]{.invert-font}\n:::\n\n# [37% Rule]{.flow} {.title}\n\n## The Secretary Problem\n\n:::{.incremental}\n- Imagine you're **hiring a secretary**\n- You must interview candidates **one by one**\n- Now, you must decide: **hire or continue searching**\n- Once you reject a candidate, **you cannot go back**\n- How to [maximize chance of selecting the best candidate?]{.highlight}\n:::\n\n. . .\n\n::: {.callout-note}\nThe name is a bit misleading, as the problem is not about hiring a secretary, but about finding the best candidate. It comes from the 1960s and thus a little outdated.\n:::\n\n## {.loud-slide}\n::: {.r-fit-text}\nIdeas?\n:::\n\n## The 37% Rule\n\nThe optimal strategy is to:\n\n1. Look at the [first 37%]{.highlight} of options\n2. Remember the **best one seen so far**\n3. Choose the next option that's **better than the best seen**\n\n. . .\n\nDone - at least for this scenario!\n\n. . .\n\n::: {.callout-note}\nChance of **selecting the best candidate is 37%**!\n:::\n\n## Why 37%?\n\n- This is based on the **geometric distribution**\n- The [optimal stopping point]{.highlight} is at `n/e`\n- `e` is the base of the natural logarithm\n- It is the limit of `(1 + 1/n)^n` as `n` approaches infinity\n\n. . .\n\n::: {.callout-tip}\nThis is a bit more advanced, so don't worry if you don't understand it! We will not go into the details of the math here and focus more on the insights.\n:::\n\n## In Python\n\nWe can check this in Python:\n\n::: {.cell output-location='fragment' execution_count=3}\n``` {.python .cell-code}\nimport math\n\npercentage = 1/math.e\nprint(f\"Percentage of options to look at: {percentage:.3f}%\")\n\ncandidates = 20\nlookout_phase = candidates/math.e\nprint(f\"Look at first {lookout_phase:.3f} candidates\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPercentage of options to look at: 0.368%\nLook at first 7.358 candidates\n```\n:::\n:::\n\n\n. . .\n\n::: {.callout-note}\nNo worries if you don't understand the code! We are essentialy just using the formula to calculate the percentage of candidates to look at.\n:::\n\n# [Variations]{.flow} {.title}\n\n## Cost of Searching\n\n- What if each **additional search costs money**?\n- Trade-off between finding better options and search costs\n- [Optimal stopping point]{.highlight} can change!\n\n## Choose past candidates\n\n- What if you could **choose past candidates**?\n- Trade-off between choosing a candidate you like and continuing to search\n- [Optimal stopping point]{.highlight} changes!\n\n## Questions?\n\n. . .\n\n::: {.callout-note}\n**That's it for todays lecture!**\\\nWe now have covered a brief introduction into optimal stopping and seen how to set up Python.\n:::\n\n# [Literature]{.flow} {.title}\n\n## Interesting Books to start\n\n- Christian, B., & Griffiths, T. (2016). Algorithms to live by: the computer science of human decisions. First international edition. New York, Henry Holt and Company. \n\n. . .\n\n::: {.callout-note}\nThe main inspiration for this lecture. Nils and I have read it and discussed it in depth, always wanting to translate it into a course.\n:::\n\n## Books on Programming\n\n- Downey, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. [Here](https://greenteapress.com/wp/think-python-3rd-edition/)\n- Elter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n. . .\n\n::: {.callout-note}\nThink Python is a great book to start with. It's available online for free. Schrödinger Programmiert Python is a great alternative for German students, as it is a very playful introduction to programming with lots of examples.\n::: \n\n## More Literature\n\nFor more interesting literature, take a look at the [literature list](../general/literature.qmd) of this course.\n\n",
    "supporting": [
      "lecture-optimal-stopping_files/figure-pdf"
    ],
    "filters": []
  }
}