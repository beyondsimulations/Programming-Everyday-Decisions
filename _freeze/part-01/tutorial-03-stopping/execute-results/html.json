{
  "hash": "a92597e53a0284da4e2df3a96b0f7dd0",
  "result": {
    "engine": "julia",
    "markdown": "---\ntitle: \"Tutorial II.IV - Loops\"\nsubtitle: \"Applied Optimization with Julia\"\n\nformat:\n    html:\n        theme: litera\n        highlight-style: arrow\n        linkcolor: \"#a60000\"\n        code-copy: true\n        code-link: true\n        toc: true\n        toc-location: right\n        code-overflow: wrap\n    pdf: \n        documentclass: report\n        geometry:\n            - margin=1in\n        fontfamily: roboto\n        fontfamilyoptions: sfdefault\n        colorlinks: true\n    ipynb:\n        code-copy: true\n        code-overflow: wrap\n\nengine: julia\n---\n\n\n\n\n\n\n\n\n# Introduction\n\nImagine you need to do the same task many times - like sending emails to 100 people or counting from 1 to 10. Instead of writing the same code over and over, we use loops! Loops are like having a helpful assistant who can repeat tasks for you.\n\nFollow the instructions, input your code in the designated areas, and verify your implementations with @assert statements.\n\n# Section 1 - For Loops\n\nA `for` loop is like giving instructions to that assistant: \"For each item in this list, do this task.\" For example:\n\nIterating over a range (1 to 3):\n\n\n\n\n\n\n\n::: {#2 .cell execution_count=1}\n``` {.julia .cell-code}\nfor i in 1:3\n    println(i) \nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n2\n3\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\nThis prints `1`, `2`, and `3`.\n\nIterating over an array:\n\n\n\n\n\n\n\n::: {#4 .cell execution_count=1}\n``` {.julia .cell-code}\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits\n    println(fruit)\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\napple\nbanana\ncherry\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\nThis prints each fruit in the `fruits` array. \n\nThe `break` statement can be utilized to exit the loop based on a condition. To check some condition, we can use `if` statements. For example:\n\n\n\n\n\n\n\n\n::: {#6 .cell execution_count=1}\n``` {.julia .cell-code}\nloop_number = 0\nfor x in 1:10\n    loop_number = x\n    println(loop_number)\n    if loop_number == 4\n        break\n    end\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n2\n3\n4\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\nThis exits the loop in iteration `4`, as the condition `loop_number == 4` is true here.\n\nWe can also chain `if` statements. For example:\n\n\n\n\n\n\n\n\n::: {#8 .cell execution_count=1}\n``` {.julia .cell-code}\nloop_number = 0\nfor x in 1:10\n    loop_number = x\n    if loop_number <= 2\n        println(loop_number)\n    elseif loop_number == 3\n        println(\"We reached 3!\")\n    else \n        break\n    end\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n2\nWe reached 3!\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\nThis prints `1`, then `2`, then `We reached 3!`. Afterwards the loop ends, as the `break` statement kicks in. \n\n:::{.callout-tip}\nThink of a `for` loop like a recipe:\n\n1. Start with a collection of items (like numbers 1-10 or a shopping list)\n2. For each item, follow the instructions inside the loop\n3. When done with one item, move to the next\n4. Stop when you've used all items (or when told to break)\n\n:::\n\n## Exercise 1.1 - Sum the Numbers from 1 to 5\n\nSum the numbers from `1` to `5` in a loop. The next lines initialize `sum_numbers` to `0`. The sum you compute should accumulate in this variable.\n\n\n\n\n\n\n\n\n::: {#10 .cell execution_count=0}\n``` {.julia .cell-code}\nsum_numbers = 0\n# YOUR CODE BELOW\n\n```\n:::\n\n\n\n::: {#12 .cell execution_count=0}\n``` {.julia .cell-code}\n# Test your answer\n@assert sum_numbers == 15\nprintln(\"Sum of numbers from 1 to 5: \", sum_numbers)\n```\n:::\n\n\n\n\n\n\n\n\n\n\n## Exercise 1.2 - Sum Only the Even Numbers from 1 to 10\n\nSum only the even numbers from `1` to `10`. Again, we initialize a variable `sum_evens` to `0`. The sum you compute should accumulate in this variable.\n\n\n\n\n\n\n\n\n::: {#14 .cell execution_count=0}\n``` {.julia .cell-code}\nsum_evens = 0\n# YOUR CODE BELOW\n\n```\n:::\n\n\n\n::: {#16 .cell execution_count=0}\n``` {.julia .cell-code}\n# Test your answer\n@assert sum_evens == 30\nprintln(\"Sum of even numbers from 1 to 10: \", sum_evens)\n```\n:::\n\n\n\n\n\n\n\n\n\n:::{.callout-tip}\nHint: You can use the modulo operator `%` to check if a number is even. The modulo operator returns the remainder of the division of two numbers. If a number is divisible by another number, the remainder is `0`. The following example checks if `4` is even: `4 % 2 == 0`.\n:::\n\n## Exercise 1.3 - Exit the Loop if the Current Fruit is Banana\n\nIterate over each fruit in the `fruits` array, store the current fruit  in `current_fruit`, and exit the loop if `current_fruit` is `banana`. The next lines initialize the `fruits` array and `current_fruit` variable.\n\n\n\n\n\n\n\n\n::: {#18 .cell execution_count=0}\n``` {.julia .cell-code}\nfruits = [\"apple\", \"banana\", \"cherry\"]\ncurrent_fruit = \"None\"\n# YOUR CODE BELOW\n\n```\n:::\n\n\n\n::: {#20 .cell execution_count=0}\n``` {.julia .cell-code}\n# Test your answer\n@assert current_fruit == \"banana\"\nprintln(\"The current fruit is: \", current_fruit)\n```\n:::\n\n\n\n\n\n\n\n\n\n\n# Section 2 - While Loops for Conditional Execution\n\nA `while` loop is like giving instructions to your assistant: \"Keep doing this task as long as this condition is true.\" They're particularly useful when the number of iterations is dynamic or unknown in advance. For example:\n\n\n\n\n\n\n\n\n::: {#22 .cell execution_count=1}\n``` {.julia .cell-code}\n# Keep subtracting 1 until we get below 5\nnumber = 10\nwhile number >= 5\n    println(\"Number is: $number\")\n    number = number - 1\nend\nprintln(\"Final number: $number\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNumber is: 10\nNumber is: 9\nNumber is: 8\nNumber is: 7\nNumber is: 6\nNumber is: 5\nFinal number: 4\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\nReal-world examples:\n\n\n\n\n\n\n\n::: {#24 .cell execution_count=1}\n``` {.julia .cell-code}\n# Keep playing game while player has lives\nlives = 3\nwhile lives > 0\n    println(\"Playing game... Lives left: $lives\")\n    lives = lives - 1\nend\nprintln(\"Game Over!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPlaying game... Lives left: 3\nPlaying game... Lives left: 2\nPlaying game... Lives left: 1\nGame Over!\n```\n:::\n:::\n\n\n\n::: {#26 .cell execution_count=1}\n``` {.julia .cell-code}\n# Keep filling water bucket until full\ncurrent_liters = 0\nbucket_size = 5\nwhile true\n    println(\"Adding 1 liter...\")\n    current_liters = current_liters + 1\n    if current_liters == bucket_size\n        break\n    end\nend\nprintln(\"Bucket is full!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAdding 1 liter...\nAdding 1 liter...\nAdding 1 liter...\nAdding 1 liter...\nAdding 1 liter...\nBucket is full!\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n:::{.callout-tip}\nThink of a `while` loop like these everyday situations:\n\n- Keep studying WHILE you don't understand the topic\n- Keep adding ingredients WHILE the recipe isn't complete\n- Keep saving money WHILE you don't have enough\n\n:::\n\n## Exercise 2.1 - Subtract from 10 in Increments of 1 Until the Result is Less Than 3\n\nSubtract from `10` in increments of `1` until the result is less than `3`. The next line initializes `current_value` to `10`. The result should be in this variable.\n\n\n\n\n\n\n\n\n::: {#28 .cell execution_count=0}\n``` {.julia .cell-code}\ncurrent_value = 10\n# YOUR CODE BELOW\n\n```\n:::\n\n\n\n::: {#30 .cell execution_count=0}\n``` {.julia .cell-code}\n# Test your answer\n@assert current_value == 2\nprintln(\"The first value smaller than 3 is: \", current_value)\n```\n:::\n\n\n\n\n\n\n\n\n\n\n## Exercise 2.2 - Find the First Multiple of 7 Greater Than 50\n\nFind the first multiple of `7` greater than `50` using an indefinite loop. The next line initializes `first_multiple_of_7` to `0`. The first multiple should be in this variable.\n\n\n\n\n\n\n\n\n::: {#32 .cell execution_count=0}\n``` {.julia .cell-code}\nfirst_multiple_of_7 = 0\n# YOUR CODE BELOW\n\n```\n:::\n\n\n\n::: {#34 .cell execution_count=0}\n``` {.julia .cell-code}\n# Test your answer\n@assert first_multiple_of_7 == 56\nprintln(\"First multiple of 7 greater than 50: \", first_multiple_of_7)\n```\n:::\n\n\n\n\n\n\n\n\n\n\n:::{.callout-tip}\n'while true ... end' constructs an infinite loop. You can exit the loop using a \n'break' statement if a condition is met.\n:::\n\n# Section 3 - Nested Loops\n\nNested loops are loops inside other loops. Think of it like organizing your closet:\n- First loop: Go through each shelf\n- Second loop: For each shelf, go through each item\n\n\n\n\n\n\n\n\n::: {#36 .cell execution_count=1}\n``` {.julia .cell-code}\n# Checking sizes and colors of t-shirts\nsizes = [\"Small\", \"Medium\", \"Large\"]\ncolors = [\"Red\", \"Blue\"]\n\nfor size in sizes\n    for color in colors\n        println(\"Found $color t-shirt in size $size\")\n    end\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFound Red t-shirt in size Small\nFound Blue t-shirt in size Small\nFound Red t-shirt in size Medium\nFound Blue t-shirt in size Medium\nFound Red t-shirt in size Large\nFound Blue t-shirt in size Large\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n## Exercise 3.1 - Compute the Product of Each Pair of Elements from Two Arrays\n\nCompute the product of **each pair of elements** from two arrays. For example, the product of two numbers `a` and `b` is `a * b`.\nThe next lines initialize `numbers1`, `numbers2` arrays, and the `products` array to store your results.\n\n\n\n\n\n\n\n\n::: {#38 .cell execution_count=0}\n``` {.julia .cell-code}\nnumbers1 = [1, 2, 3]\nnumbers2 = [4, 5, 6]\nproducts = []\n# YOUR CODE BELOW\n\n```\n:::\n\n\n\n::: {#40 .cell execution_count=0}\n``` {.julia .cell-code}\n# Test your answer\n@assert products == [4, 5, 6, 8, 10, 12, 12, 15, 18]\nprintln(\"Products of each pair from two arrays: \", products)\n```\n:::\n\n\n\n\n\n\n\n\n\n\n:::{.callout-tip}\nRemember, you can use push!() to append elements to an array.\n:::\n\n# Section 4 - List Comprehensions\n\nList comprehensions provide a concise way to create lists based on existing lists. They can often replace for loops and are considered more \"Julia-like\". Basic syntax:\n```julia\n[expression for item in collection if condition]\n```\n\nFor example:\n```julia\n# The long way\nsquares = []\nfor n in 1:5\n    push!(squares, n^2)\nend\n\n# The short way (list comprehension)\nsquares = [n^2 for n in 1:5]\n```\n\nBoth create `[1, 4, 9, 16, 25]`, but the second way is more concise!\n\n## Exercise 4.1 - Create a List of Even Numbers\n\nCreate a list of even numbers from 1 to 10 using a list comprehension.\n\n\n\n\n\n\n\n\n::: {#42 .cell execution_count=0}\n``` {.julia .cell-code}\n# YOUR CODE BELOW\n\n```\n:::\n\n\n\n::: {#44 .cell execution_count=0}\n``` {.julia .cell-code}\n# Test your answer\n@assert even_numbers == [2, 4, 6, 8, 10]\nprintln(\"Even numbers from 1 to 10: \", even_numbers)\n```\n:::\n\n\n\n\n\n\n\n\n\n\n# Conclusion\n\nGreat work! You've successfully navigated through the basics of loops in Julia. You've seen for and while loops, tackled iterable structure, and worked on nested loops. Continue to the next file to learn more.\n\n\n# Solutions\n\nYou will likely find solutions to most exercises online. However, we strongly encourage you to work on these exercises independently without searching explicitly for the exact answers to the exercises. Understanding someone else's solution is very different from developing your own. Use the lecture notes and try to solve the exercises on your own. This approach will significantly enhance your learning and problem-solving skills.\n\nRemember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities. If you encounter difficulties, review the lecture materials, experiment with different approaches, and don't hesitate to ask for clarification during class discussions.\n\nLater, you will find the solutions to these exercises online in the associated GitHub repository, but we will also quickly go over them next week. To access the solutions, click on the Github button on the lower right and search for the folder with today's lecture and tutorial. Alternatively, you can ask ChatGPT or Claude to explain them to you. But please remember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities.\n\n",
    "supporting": [
      "tutorial-03-stopping_files"
    ],
    "filters": [],
    "includes": {}
  }
}