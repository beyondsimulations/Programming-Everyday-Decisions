{
  "hash": "5596232bdd5b500bc75376c2df7487de",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Tutorial I.III - Making Decisions\"\nsubtitle: \"Programming: Everyday Decision-Making Algorithms\"\n\nformat:\n    html:\n        theme: litera\n\n    pdf:\n        documentclass: report\n\n    ipynb:\n\n        code-copy: true\n        code-overflow: wrap\n---\n\n\n\n\n\n# Introduction\n\nImagine you're searching for a new apartment. You view a flat - should you take it or keep looking for something better? This is another classic optimal stopping problem! Just like in dating or hiring, you need to decide when to stop searching.\n\nIn this tutorial, we'll learn how computers make decisions using `if` and `else` statements. These are like the \"if this, then that\" decisions we make every day!\n\n# Section 1 - Understanding If Statements\n\nAn `if` statement is like asking a yes/no question and doing something based on the answer. For example:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nflat_rating = 8  # Rate the flat from 0-10\n\nif flat_rating >= 7:\n    print(\"This is a good apartment!\")\n```\n:::\n\n\nThe structure is:\n\n1. The word `if`\n2. A condition that's either True or False\n3. A colon `:`\n4. **Indented** code that runs if the condition is True\n\n:::{.callout-tip}\nThink of `if` statements like everyday decisions:\n\n- IF it's within budget, view it\n- IF the flat is good, apply for it\n- IF it has enough rooms, add it to the shortlist\n\nComputer `if` statements work exactly the same way! They check a condition and then do something based on that check.\n:::\n\n::: {.callout-important}\nCommon Mistakes with If Statements:\n\n1. Forgetting the colon `:` after the condition\n2. **Incorrect indentation** of the code block\n3. Using `=` (assignment) instead of `==` (comparison)\n4. Forgetting that the condition must result in `True` or `False`\n:::\n\n## Exercise 1.1 - Your First Decision\nCreate an `if` statement that prints \"Perfect flat!\" if the `flat_rating` is 10.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nflat_rating = 10\n# YOUR CODE BELOW\n\n# Test your answer yourself - the cell should print \"Perfect flat!\" if executed correctly\n```\n:::\n\n\n# Section 2 - Adding Else Statements\n\nBut what if we want to do something different when the condition is False? That's where `else` comes in:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nflat_rating = 4  # Not a great flat!\n\nif flat_rating >= 7:\n    print(\"Apply for this flat!\")\nelse:\n    print(\"Keep searching!\")\n```\n:::\n\n\nThe structure is:\n\n1. An `if` statement with its condition\n2. Code to run if True\n3. The word `else` and a colon `:`\n4. Indented code to run if False\n\n:::{.callout-tip}\nThink of `if-else` like complete either/or decisions:\n\n- IF it's within budget, schedule viewing, ELSE skip it\n- IF the location is good, consider it, ELSE keep searching\n- IF all criteria are met, apply now, ELSE continue looking\n\nThe `else` statement is our backup plan!\n:::\n\n## Exercise 2.1 - Complete Decision\nWrite an if-else statement that sets `decision` to \"Apply now\" if `flat_rating` is at least 7, and \"Keep searching\" otherwise.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nflat_rating = 6\ndecision = \"\"\n# YOUR CODE BELOW\n```\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# Test your answer\nassert decision == \"Keep searching\", \"The decision should be 'Keep searching' as the flat rating is less than 7\"\nprint(f\"Decision: {decision} as the flat rating is {flat_rating}\")\n```\n:::\n\n\n::: {.callout-tip}\nWriting Better If-Else Statements:\n\n1. Keep your conditions simple and readable\n2. Use meaningful variable names\n3. Consider what should happen in both cases\n4. Test both paths to make sure they work\n:::\n\n# Section 3 - Adding Elif (Else If)\n\nSometimes we need more than two options. That's where `elif` comes in:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nflat_rating = 8\n\nif flat_rating >= 9:\n    print(\"Amazing flat - apply immediately!\")\nelif flat_rating >= 7:\n    print(\"Good flat - consider applying\")\nelif flat_rating >= 5:\n    print(\"Mediocre flat - keep it as backup\")\nelse:\n    print(\"Poor flat - definitely keep looking\")\n```\n:::\n\n\nThe structure adds:\n\n- Multiple `elif` conditions between `if` and `else`\n- Each condition is checked in order\n- The first True condition runs its code\n\n:::{.callout-tip}\nThink of `elif` like multiple-choice decisions:\n\n- IF it's perfect → apply immediately\n- ELIF it's good → schedule second viewing\n- ELIF it's okay → keep as backup\n- ELSE → continue searching\n\nIt's like a flowchart where only one path can be taken!\n:::\n\n::: {.callout-warning}\nImportant Elif Rules:\n\n1. Order matters! Put more specific conditions first\n2. Only one block will execute\n3. `elif` must come after `if` and before `else`\n4. You can have as many `elif` blocks as you need\n:::\n\n## Exercise 3.1 - Apartment Categories\nCreate a variable `flat_category` that is:\n\n- \"Luxury\" if rating is 9 or 10\n- \"Premium\" if rating is 7 or 8\n- \"Standard\" if rating is 5 or 6\n- \"Basic\" for anything lower\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nflat_rating = 8\nflat_category = \"\"\n# YOUR CODE BELOW\n```\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# Test your answer\nassert flat_category == \"Premium\", \"The flat category should be 'Premium' as the flat rating is 8\"\nprint(f\"Flat Category: {flat_category} as the flat rating is {flat_rating}\")\n```\n:::\n\n\n# Section 4 - Complex Decisions\n\nIn real life, we often need to check multiple conditions at once. We can combine conditions using `and` and `or`:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nflat_rating = 8\nweeks_searching = 3\nmax_search_time = 4\n\nif (flat_rating >= 7) and (weeks_searching < max_search_time):\n    print(\"Take this flat - it's good enough and we still have time!\")\nelif (flat_rating >= 9) or (weeks_searching >= max_search_time):\n    print(\"Take this flat - either it's perfect or we're out of time!\")\nelse:\n    print(\"Keep looking!\")\n```\n:::\n\n\n::: {.callout-tip}\nTips for Complex Conditions:\n\n- Use parentheses to make your logic clear\n- Break very complex conditions into smaller parts\n- Test edge cases to make sure your logic works\n:::\n\n## Exercise 4.1 - Real World Flat Hunting\nCreate a variable `should_apply` that is True if:\n\n- The flat rating is at least 8, OR\n- The flat rating is at least 6 AND we've been searching for 3 weeks or more\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nflat_rating = 6\nweeks_searching = 4\nshould_apply = False\n# YOUR CODE BELOW\n```\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# Test your answer\nassert should_apply == True, \"The flat rating is 6 and we've been searching for 4 weeks, so we should apply\"\nprint(f\"Should we apply? {should_apply} as the flat rating is {flat_rating} and we've been searching for {weeks_searching} weeks\")\n```\n:::\n\n\n# Section 5 - The 37% Rule with Decisions\n\nRemember the optimal stopping rule? Let's apply it to apartment hunting:\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nflats_seen = 6\ntotal_viewings = 15\ncurrent_rating = 8\nbest_rating_so_far = 7\n\n# Calculate if we've passed 37% of viewings\nthreshold_passed = flats_seen >= (total_viewings * 0.37)\n\nif not threshold_passed:\n    print(\"Keep looking - still in observation phase\")\nelif current_rating > best_rating_so_far:\n    print(\"Apply for this flat!\")\nelse:\n    print(\"Keep looking - waiting for better than our best\")\n```\n:::\n\n\n## Exercise 5.1 - Implement the Rule\nAdjust the code below to change the variable `make_application` to True if:\n\n- We've seen at least 37% of available flats (use 15 total flats), AND\n- The current flat is better than the best we've seen so far\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nflats_seen = 6  # We've seen 6 flats\ntotal_viewings = 15  # We plan to view 15 flats in total\ncurrent_rating = 9\nbest_rating_so_far = 8\nmake_application = False\n# YOUR CODE BELOW\n```\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n# Test your answer\nassert make_application == True, \"The flat rating is 9 and we've been searching for 4 weeks, so we should apply\"\nprint(f\"Should we apply for this flat? {make_application}\")\n```\n:::\n\n\n# Conclusion\n\nGreat work! You've learned how to make decisions in Python using:\n\n- Simple if statements\n- if-else statements\n- elif for multiple conditions\n- Complex decisions with and/or\n- Applying these to real-world stopping problems\n\nRemember, just like in apartment hunting, these tools help us make better decisions in any situation where we need to decide whether to take what we have or keep looking for something better!\n\n---\n\n\n# Solutions\n\nYou will likely find solutions to most exercises online. However, we strongly encourage you to work on these exercises independently without searching explicitly for the exact answers to the exercises. Understanding someone else's solution is very different from developing your own. Use the lecture notes and try to solve the exercises on your own. This approach will significantly enhance your learning and problem-solving skills.\n\nRemember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities. If you encounter difficulties, review the lecture materials, experiment with different approaches, and don't hesitate to ask for clarification during class discussions.\n\nLater, you will find the solutions to these exercises online in the associated GitHub repository, but we will also quickly go over them next week. To access the solutions, click on the Github button on the lower right and search for the folder with today's lecture and tutorial. Alternatively, you can ask ChatGPT or Claude to explain them to you. But please remember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities.\n\n\n\n*That's it for part I! Next week, we'll apply these skills exploration and exploitation!*\n\n",
    "supporting": [
      "tutorial-03-stopping_files/figure-pdf"
    ],
    "filters": []
  }
}