[
  {
    "objectID": "part-01/lecture-presentation.html#the-secretary-problem",
    "href": "part-01/lecture-presentation.html#the-secretary-problem",
    "title": "Lecture I - Optimal Stopping",
    "section": "The Secretary Problem",
    "text": "The Secretary Problem\n\n\nImagine you’re hiring a secretary\nYou must interview candidates one by one\nAfter each interview, you must decide: hire or continue searching\nOnce you reject a candidate, you cannot go back\nHow do you maximize your chances of selecting the best candidate?"
  },
  {
    "objectID": "part-01/lecture-presentation.html#real-world-applications",
    "href": "part-01/lecture-presentation.html#real-world-applications",
    "title": "Lecture I - Optimal Stopping",
    "section": "Real-World Applications",
    "text": "Real-World Applications\n\n\nApartment hunting\nDating and relationships\nJob searching\nParking spots\nSelling a house"
  },
  {
    "objectID": "part-01/lecture-presentation.html#the-37-rule",
    "href": "part-01/lecture-presentation.html#the-37-rule",
    "title": "Lecture I - Optimal Stopping",
    "section": "The 37% Rule",
    "text": "The 37% Rule\n\n\n\n\n\n\nTip\n\n\nThe optimal strategy is to: 1. Look at the first 37% of options 2. Remember the best one seen so far 3. Choose the next option that’s better than the best seen"
  },
  {
    "objectID": "part-01/lecture-presentation.html#why-37",
    "href": "part-01/lecture-presentation.html#why-37",
    "title": "Lecture I - Optimal Stopping",
    "section": "Why 37%?",
    "text": "Why 37%?\n\nimport math\n\ndef optimal_stopping_point(n):\n    return round(n/math.e, 2)\n\nexamples = [10, 20, 50, 100]\nfor n in examples:\n    stop = optimal_stopping_point(n)\n    percent = round(stop/n * 100, 1)\n    print(f\"For {n} options: Look at first {stop} ({percent}%)\")\n\n\n\nFor 10 options: Look at first 3.68 (36.8%)\nFor 20 options: Look at first 7.36 (36.8%)\nFor 50 options: Look at first 18.39 (36.8%)\nFor 100 options: Look at first 36.79 (36.8%)"
  },
  {
    "objectID": "part-01/lecture-presentation.html#implementation-in-python",
    "href": "part-01/lecture-presentation.html#implementation-in-python",
    "title": "Lecture I - Optimal Stopping",
    "section": "Implementation in Python",
    "text": "Implementation in Python\n\ndef optimal_secretary_strategy(candidates):\n    n = len(candidates)\n    lookout_phase = int(n/math.e)\n    best_so_far = max(candidates[:lookout_phase])\n    \n    for i in range(lookout_phase, n):\n        if candidates[i] &gt; best_so_far:\n            return i\n    return n-1  # If no better candidate found"
  },
  {
    "objectID": "part-01/lecture-presentation.html#apartment-hunting",
    "href": "part-01/lecture-presentation.html#apartment-hunting",
    "title": "Lecture I - Optimal Stopping",
    "section": "Apartment Hunting",
    "text": "Apartment Hunting\nTask: Let’s simulate an apartment search in Hamburg\n\nimport random\n\ndef generate_apartments(n):\n    \"\"\"Generate n apartments with random scores (1-100)\"\"\"\n    return [random.randint(1, 100) for _ in range(n)]\n\n# Example usage\napartments = generate_apartments(10)\nstopping_point = optimal_stopping_point(len(apartments))\nprint(f\"Look at first {stopping_point} apartments before deciding\")\n\nLook at first 3.68 apartments before deciding"
  },
  {
    "objectID": "part-01/lecture-presentation.html#interactive-demo",
    "href": "part-01/lecture-presentation.html#interactive-demo",
    "title": "Lecture I - Optimal Stopping",
    "section": "Interactive Demo",
    "text": "Interactive Demo\nLet’s try it!\n\ndef apartment_search_game():\n    apartments = generate_apartments(10)\n    for i, score in enumerate(apartments):\n        print(f\"\\nApartment {i+1} Score: {score}\")\n        if i &lt; int(len(apartments)/math.e):\n            print(\"Still in observation phase...\")\n            continue\n        \n        choice = input(\"Take this apartment? (y/n): \")\n        if choice.lower() == 'y':\n            if score == max(apartments[i:]):\n                print(\"Great choice! This was the best remaining option!\")\n            else:\n                print(\"There was a better apartment later...\")\n            break"
  },
  {
    "objectID": "part-01/lecture-presentation.html#cost-of-searching",
    "href": "part-01/lecture-presentation.html#cost-of-searching",
    "title": "Lecture I - Optimal Stopping",
    "section": "Cost of Searching",
    "text": "Cost of Searching\n\nWhat if each additional search costs money?\nHow does this change our strategy?\nTrade-off between finding better options and search costs"
  },
  {
    "objectID": "part-01/lecture-presentation.html#risk-tolerance",
    "href": "part-01/lecture-presentation.html#risk-tolerance",
    "title": "Lecture I - Optimal Stopping",
    "section": "Risk Tolerance",
    "text": "Risk Tolerance\n\nDifferent scenarios require different strategies\nConservative vs. aggressive approaches\nImpact of wrong decisions"
  },
  {
    "objectID": "part-01/lecture-presentation.html#further-reading",
    "href": "part-01/lecture-presentation.html#further-reading",
    "title": "Lecture I - Optimal Stopping",
    "section": "Further Reading",
    "text": "Further Reading\n\nChristian, B., & Griffiths, T. (2016). Algorithms to live by: The computer science of human decisions\nFerguson, T. S. (1989). Who solved the secretary problem?"
  },
  {
    "objectID": "part-01/lecture-presentation.html#about-me",
    "href": "part-01/lecture-presentation.html#about-me",
    "title": "Lecture I - Optimal Stopping",
    "section": "About me",
    "text": "About me\n\n\nField: Optimizing and simulating complex systems\nLanguages: of choice: Julia, Python and Rust\nInterest: Modelling, Simulations, Machine Learning\nTeaching: OR, Algorithms, and Programming\nContact: vlcek@beyondsimulations.com\n\n\n\n\n\n\n\n\n\nTip\n\n\nI really appreciate active participation and interaction!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#course-outline",
    "href": "part-01/lecture-presentation.html#course-outline",
    "title": "Lecture I - Optimal Stopping",
    "section": "Course Outline",
    "text": "Course Outline\n\nPart I: Introduction to Programming with Python\nPart II: Data Science Tools with Python\nPart III: Programming Projects"
  },
  {
    "objectID": "part-01/lecture-presentation.html#participation",
    "href": "part-01/lecture-presentation.html#participation",
    "title": "Lecture I - Optimal Stopping",
    "section": "Participation",
    "text": "Participation\n\nPrequisite for course Management Science (Prof. Goel)\nTry actively participating in this course\nYou will find it much (!) easier to follow Prof. Goel\nMaterials will be provided in the KLU portal\nSlides are hosted at beyondsimulations.github.io/Introduction-to-Python"
  },
  {
    "objectID": "part-01/lecture-presentation.html#teaching",
    "href": "part-01/lecture-presentation.html#teaching",
    "title": "Lecture I - Optimal Stopping",
    "section": "Teaching",
    "text": "Teaching\n\nLecture: Presentation of tools and concepts, based on small examples and code snippets\nTutorial: Hands-on examples to be solved in groups\nDifficulty: Difficult at first, but gradually easier"
  },
  {
    "objectID": "part-01/lecture-presentation.html#passing-the-course",
    "href": "part-01/lecture-presentation.html#passing-the-course",
    "title": "Lecture I - Optimal Stopping",
    "section": "Passing the Course",
    "text": "Passing the Course\n\nPass/fail course\n75% attendance required for passing the course\n2 assignments and 1 little project\nYou will be given programming exercises to solve\nYou can group up (3 students) and work together\nEach student group submits one solution"
  },
  {
    "objectID": "part-01/lecture-presentation.html#solution",
    "href": "part-01/lecture-presentation.html#solution",
    "title": "Lecture I - Optimal Stopping",
    "section": "Solution",
    "text": "Solution\n\nProvide a code solution to the problem (.py files)\nCode files need to be executable\nDetailed explanations of your code should be provided\nUse comments or docstrings in your code\nProvide a general (verbal) introduction to each problem\n\n\n\n\n\n\n\n\nTip\n\n\nI’d encourage you to start and submit your solution early"
  },
  {
    "objectID": "part-01/lecture-presentation.html#difficulty-of-the-course",
    "href": "part-01/lecture-presentation.html#difficulty-of-the-course",
    "title": "Lecture I - Optimal Stopping",
    "section": "Difficulty of the Course",
    "text": "Difficulty of the Course\n\nWe’ll cover the basics of programming (in Python) at first\nThis is similar to learning a new foreign language\nFirst, you have to get used to the language and learn words\nLater, you’ll be able to apply it and see results\nSimilar to learning a language: Practice, practice, practice!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#what-to-expect",
    "href": "part-01/lecture-presentation.html#what-to-expect",
    "title": "Lecture I - Optimal Stopping",
    "section": "What to expect",
    "text": "What to expect\n\nSome investment in the beginning to see the return later\nYou can ask questions and get support anytime\nAfter completion, you will be able to read code\nand write your own program using Python\nThat’s quite something!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#goals-of-the-course",
    "href": "part-01/lecture-presentation.html#goals-of-the-course",
    "title": "Lecture I - Optimal Stopping",
    "section": "Goals of the Course",
    "text": "Goals of the Course\n\nEssential concepts and tools of modern programming\nAutomated solutions for recurrent tasks\nAlgorithm-based solutions of complex problems\nUsage of AI in a specific context"
  },
  {
    "objectID": "part-01/lecture-presentation.html#python-as-language",
    "href": "part-01/lecture-presentation.html#python-as-language",
    "title": "Lecture I - Optimal Stopping",
    "section": "Python as Language",
    "text": "Python as Language\n\nOrigins: Conceived in late 1980s as a teaching and scripting language\nSimple Syntax: Python’s syntax is straightforward and easy to learn\nVersatility: Used in web development, data analysis, artificial intelligence, and more\nCommunity Support: A large community of users and extensive documentation"
  },
  {
    "objectID": "part-01/lecture-presentation.html#help-from-ai",
    "href": "part-01/lecture-presentation.html#help-from-ai",
    "title": "Lecture I - Optimal Stopping",
    "section": "Help from AI",
    "text": "Help from AI\n\nYou are allowed to use AI (GitHub Copilot, ChatGPT, LLama3 …)\nThese new tools are really powerful for learning Python!\nThey can help you a lot to get started with programming\n\n\n\n\n\n\n\n\nWarning\n\n\nBut you should not simply use them to replace your learning."
  },
  {
    "objectID": "part-01/lecture-presentation.html#analytics",
    "href": "part-01/lecture-presentation.html#analytics",
    "title": "Lecture I - Optimal Stopping",
    "section": "Analytics",
    "text": "Analytics\n\nPhoto by Choong Deng Xiang on Unsplash"
  },
  {
    "objectID": "part-01/lecture-presentation.html#research",
    "href": "part-01/lecture-presentation.html#research",
    "title": "Lecture I - Optimal Stopping",
    "section": "Research",
    "text": "Research\n\nPhoto by National Cancer Institute on Unsplash"
  },
  {
    "objectID": "part-01/lecture-presentation.html#visualization",
    "href": "part-01/lecture-presentation.html#visualization",
    "title": "Lecture I - Optimal Stopping",
    "section": "Visualization",
    "text": "Visualization\n\nPhoto by Clay Banks on Unsplash"
  },
  {
    "objectID": "part-01/lecture-presentation.html#finance",
    "href": "part-01/lecture-presentation.html#finance",
    "title": "Lecture I - Optimal Stopping",
    "section": "Finance",
    "text": "Finance\n\nPhoto by Ishant Mishra on Unsplash"
  },
  {
    "objectID": "part-01/lecture-presentation.html#logistics",
    "href": "part-01/lecture-presentation.html#logistics",
    "title": "Lecture I - Optimal Stopping",
    "section": "Logistics",
    "text": "Logistics\n\nPhoto by Denys Nevozhai on Unsplash"
  },
  {
    "objectID": "part-01/lecture-presentation.html#my-recommendation",
    "href": "part-01/lecture-presentation.html#my-recommendation",
    "title": "Lecture I - Optimal Stopping",
    "section": "My Recommendation",
    "text": "My Recommendation\n\nBe present: Attend the lecture and participate\nPut in some work: Repeat lecture notes and try to understand the examples yourself\nDo coding: Run code examples on your own, play around, google, modify, and solve problems on your own\n\n\n\n\n\n\n\n\nTip\n\n\nGreat resources to start are books and small challenges. You can find a list of book recommendations at the end of the lecture. Small challenges to solve can for example be found on Codewars."
  },
  {
    "objectID": "part-01/lecture-presentation.html#dont-give-up",
    "href": "part-01/lecture-presentation.html#dont-give-up",
    "title": "Lecture I - Optimal Stopping",
    "section": "Don’t give up!",
    "text": "Don’t give up!\n\nProgramming is problem solving, don’t get frustrated!\nExpect to stretch your comfort zone"
  },
  {
    "objectID": "part-01/lecture-presentation.html#learning-path",
    "href": "part-01/lecture-presentation.html#learning-path",
    "title": "Lecture I - Optimal Stopping",
    "section": "Learning Path",
    "text": "Learning Path\n\nThe learning path can be quite steep!\nFirst of all help each other!\nTry to find help in lecture materials and books, the Python documentation, and online (e.g. Google, ChatGPT, StackOverflow, …)\nIn case you get frustrated, read the following helpful blog post about the challenges on medium.com"
  },
  {
    "objectID": "part-01/lecture-presentation.html#errors",
    "href": "part-01/lecture-presentation.html#errors",
    "title": "Lecture I - Optimal Stopping",
    "section": "Errors",
    "text": "Errors\nIn case you find errors and typos in the lecture notes, please report them in the following form:\nhttps://tally.so/r/w7oapa"
  },
  {
    "objectID": "part-01/lecture-presentation.html#install-python",
    "href": "part-01/lecture-presentation.html#install-python",
    "title": "Lecture I - Optimal Stopping",
    "section": "Install Python",
    "text": "Install Python\n\nSources are the Python website or Anaconda\nBut I would recommend we start by installing Thonny\nAn open source IDE running on Windows, Linux and Mac\nBuilt in Python interpreter and package management!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#what-is-an-ide",
    "href": "part-01/lecture-presentation.html#what-is-an-ide",
    "title": "Lecture I - Optimal Stopping",
    "section": "What is an IDE?",
    "text": "What is an IDE?\n\nIntegrated Development Environment = application\nIt allows you to write, run and debug code scripts\nThonny is an IDE specifically for Python beginners\nIt is easy to use as beginner!\nOther IDEs include for example PyCharm from JetBrains or Visual Studio Code from Microsoft"
  },
  {
    "objectID": "part-01/lecture-presentation.html#python-on-ipads",
    "href": "part-01/lecture-presentation.html#python-on-ipads",
    "title": "Lecture I - Optimal Stopping",
    "section": "Python on iPads",
    "text": "Python on iPads\n\nAlthough you can run Python scripts from on your iPad, it is not recommended for the course\nNonetheless, you could use Pythonista\nIt works locally on your iPad and can run most scripts\n\n\n\n\n\n\n\n\nCaution\n\n\nNot all packages available in Python are available in Pythonista, thus you might need a computer to solve certain problems."
  },
  {
    "objectID": "part-01/lecture-presentation.html#hello-world",
    "href": "part-01/lecture-presentation.html#hello-world",
    "title": "Lecture I - Optimal Stopping",
    "section": "Hello, World!",
    "text": "Hello, World!\nTask: Create a directory for the course and create a new file called hello_world.py with the following code:\n\n# This is a comment in Python\nprint(\"Hello, World!\")\n\n\n\nHello, World!\n\n\n\nRun it with the green ‘run’ button or by pressing F5!\n\n\n\n\n\n\n\n\nNote\n\n\n“Hello world” is a classic example to start with. It is often used as a test to check if your computer is working properly and that you have installed the necessary software."
  },
  {
    "objectID": "part-01/lecture-presentation.html#hello-world-in-a-message",
    "href": "part-01/lecture-presentation.html#hello-world-in-a-message",
    "title": "Lecture I - Optimal Stopping",
    "section": "Hello, World in a Message",
    "text": "Hello, World in a Message\nTask: Change the code in your hello_world.py file. Assign the string \"Hello, World!\" to a variable called message and print the variable.\n\n\nUse the equals sign (=)\nVariable name goes on the left\nValue to be assigned goes on the right\n\n\n\n\n# Here we assign the string \"Hello, World!\" to variable message and print it\nmessage = \"Hello, World!\"\nprint(message)\n\n\n\nHello, World!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#hello-world-in-parentheses",
    "href": "part-01/lecture-presentation.html#hello-world-in-parentheses",
    "title": "Lecture I - Optimal Stopping",
    "section": "Hello, World in Parentheses",
    "text": "Hello, World in Parentheses\nWe can also mix \" and ' in a string, if we are consistent:\n\n# This code works\nmessage = 'I shout \"Hello, World!\"'\nprint(message)\n\n\n\nI shout \"Hello, World!\"\n\n\n\n\n\n\n# This code does not!\nmessage = 'I shout 'Hello, World!\"\"\nprint(message)\n\n\n\n\nTry it yourself! What does happen, if you try to run it?"
  },
  {
    "objectID": "part-01/lecture-presentation.html#first-errors",
    "href": "part-01/lecture-presentation.html#first-errors",
    "title": "Lecture I - Optimal Stopping",
    "section": "First Errors",
    "text": "First Errors\nSyntaxError: invalid syntax\n\nThe code is not valid Python syntax\nLikely the most common error that you will encounter!\nHappens when you make a mistake, e.g., illegal character, missing a colon, parentheses or quotations\nYou can fix this by correcting the code and re-running\nIn the lecture you will encounter many more errors!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#what-is-a-program",
    "href": "part-01/lecture-presentation.html#what-is-a-program",
    "title": "Lecture I - Optimal Stopping",
    "section": "What is a Program?",
    "text": "What is a Program?\n\nSequence of instructions telling a computer what to do\nWritten in a language the computer can understand\nBasic operations in most languages:\n\nInput: Data from keyboard, file, network, sensors, etc.\nOutput: Display data, save it, send over network, etc.\nProcessing: Perform calculations, analyze data, make decisions, find patterns, etc."
  },
  {
    "objectID": "part-01/lecture-presentation.html#key-concepts",
    "href": "part-01/lecture-presentation.html#key-concepts",
    "title": "Lecture I - Optimal Stopping",
    "section": "Key concepts",
    "text": "Key concepts\n\nKey concepts in most languages:\n\nVariables: Store and manipulate data\nConditional execution: Check and execute accordingly\nLoops: Perform actions repeatedly\nFunctions: Group instructions for reusability\n\n\n\n\n\n\n\n\n\nNote\n\n\nWe will cover these concepts in more detail later in the course."
  },
  {
    "objectID": "part-01/lecture-presentation.html#how-python-executes-code",
    "href": "part-01/lecture-presentation.html#how-python-executes-code",
    "title": "Lecture I - Optimal Stopping",
    "section": "How Python executes code",
    "text": "How Python executes code\n\nPython is an interpreted language\nThe source code is executed line by line\nThe interpreter checks the syntax and executes the code\nThis is in contrast to compiled languages, where the code is compiled into machine code before execution"
  },
  {
    "objectID": "part-01/lecture-presentation.html#hello-again-world",
    "href": "part-01/lecture-presentation.html#hello-again-world",
    "title": "Lecture I - Optimal Stopping",
    "section": "Hello again, World!",
    "text": "Hello again, World!\nLet’s go back to our first program:\n\n# Our first program\nmessage = \"Hello, World!\"\nprint(message)\n\n\n\nComment: In the first line we define a comment with #\nVariable: In the second we define a variable message\nFunction: In the third line we call a function print"
  },
  {
    "objectID": "part-01/lecture-presentation.html#dont-worry",
    "href": "part-01/lecture-presentation.html#dont-worry",
    "title": "Lecture I - Optimal Stopping",
    "section": "Don’t worry!",
    "text": "Don’t worry!\n\nAlready confused? Don’t worry about it for now!\nWe’ll learn more about variables and functions later"
  },
  {
    "objectID": "part-01/lecture-presentation.html#the-zen-of-python",
    "href": "part-01/lecture-presentation.html#the-zen-of-python",
    "title": "Lecture I - Optimal Stopping",
    "section": "The Zen of Python",
    "text": "The Zen of Python\n\nPython’s name originally comes from Monty Python\nStyle is based on a philosophy called Zen of Python\nCollection of 19 statements with general principles\n\n\nTask: Try this code in Python:\n\n# Try this code in Python to see the Zen of Python\nimport this"
  },
  {
    "objectID": "part-01/lecture-presentation.html#variables",
    "href": "part-01/lecture-presentation.html#variables",
    "title": "Lecture I - Optimal Stopping",
    "section": "Variables",
    "text": "Variables\n\nA variable in Python is a name that points to a value\nCreated by using the assignment operator =\nPython does not require a declaration of variable types\n\n\na = 2 # Variable a assigned the value 2\nb = \"Time\" # Variable b assigned the value \"Time\"\nc = print # Variable c assigned the print function\nc(b) # Now we can call the print function with c\n\n\n\nTime\n\n\n\nBut there are certain rules to variable names!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#variable-naming-conventions",
    "href": "part-01/lecture-presentation.html#variable-naming-conventions",
    "title": "Lecture I - Optimal Stopping",
    "section": "Variable Naming Conventions",
    "text": "Variable Naming Conventions\n\nMust start with a letter or underscore _\nCan contain letters, numbers and underscores\nNames are case sensitive, e.g., a and A are different!\nCannot be a reserved word, e.g., for, if, def, etc\nGood names are short and meaningful for humans!\n\n\n\nQuestion: Which of the following fulfill these conditions?\na, _duration, 1x, time_left, 1_minute, oneWorld, xy4792"
  },
  {
    "objectID": "part-01/lecture-presentation.html#functions",
    "href": "part-01/lecture-presentation.html#functions",
    "title": "Lecture I - Optimal Stopping",
    "section": "Functions",
    "text": "Functions\n\nFunctions are named blocks of code\nCan take arguments function([arguments])\nCan return results or None\n\n\n\n# Print is such a function\nprint(\"Hello, World!\") # It takes an argument and prints it to the console\nprint(\"Hello\",\"World!\", sep=\", \") # It can also take multiple arguments\n\n\n\nHello, World!\nHello, World!\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nWe will cover functions in more detail later in the course."
  },
  {
    "objectID": "part-01/lecture-presentation.html#what-are-values-and-types",
    "href": "part-01/lecture-presentation.html#what-are-values-and-types",
    "title": "Lecture I - Optimal Stopping",
    "section": "What are Values and Types?",
    "text": "What are Values and Types?\n\nValue: Fundamental thing that a program manipulates\n\nIn Python, values are either numbers or strings\n\nType: Type of a value\n\nDetermines what operations can be performed on it\ntype() is a function that returns the type of a value\nTakes one argument and returns its type as string"
  },
  {
    "objectID": "part-01/lecture-presentation.html#strings",
    "href": "part-01/lecture-presentation.html#strings",
    "title": "Lecture I - Optimal Stopping",
    "section": "Strings",
    "text": "Strings\nBack to our example of “Hello, World!”\n\n# We define the variable message and assign it the value \"Hello, World!\"\nmessage = \"Hello, World!\"\n\n# We save its type in another variable called message_type\nmessage_type = type(message)\n\n# We print the value of our new variable\nprint(f\"{message} is a {message_type}\")\n\n\n\nHello, World! is a &lt;class 'str'&gt;\n\n\n\n\nResult: “Hello, World” is a string - in short ‘str’.\n\n\nBut what about the f”?"
  },
  {
    "objectID": "part-01/lecture-presentation.html#formated-strings",
    "href": "part-01/lecture-presentation.html#formated-strings",
    "title": "Lecture I - Optimal Stopping",
    "section": "Formated Strings",
    "text": "Formated Strings\n\nf-strings are strings that start with f\nThey contain expressions, e.g., variables, in braces\nEvaluated at run time and inserted into the string\n\n\n\n\n\n\n\n\nNote\n\n\nIn older code bases, f strings were not available. Here, interpolation could be done as shown below with print() and .format(). But this method is less concise and arguably less readable.\n\n\n\n\n\n\nprint(\"{} is a {}\".format(message, message_type))\n\n\n\nHello, World! is a &lt;class 'str'&gt;"
  },
  {
    "objectID": "part-01/lecture-presentation.html#specifying-formatted-strings",
    "href": "part-01/lecture-presentation.html#specifying-formatted-strings",
    "title": "Lecture I - Optimal Stopping",
    "section": "Specifying Formatted Strings",
    "text": "Specifying Formatted Strings\n\nWe can further specify their forman with {&lt;to_print&gt;:&lt;width&gt;.&lt;precision&gt;f}\nwidth can be a number specifying the output width\n&lt;, ^, &gt; can be used before the width to align the text\nprecision can be used to specify the decimals\n.f can be used to format floats\n\n\nx = \"hello\"\nprint(f\"{x:&lt;10} has {len(x):&gt;10.2f} characters.\")\n\n\n\nhello      has       5.00 characters."
  },
  {
    "objectID": "part-01/lecture-presentation.html#expressions",
    "href": "part-01/lecture-presentation.html#expressions",
    "title": "Lecture I - Optimal Stopping",
    "section": "Expressions",
    "text": "Expressions\n\nProduce a value when evaluated\nCan be used as part of larger expressions or statements\nStatements are expressions that don’t produce a value\nExamples: arithmetic operations, function calls, variables\n\n\nx = 1 # Statement that assigns the value 3 to x\ny = x + 2 # Expression on the right side assigned to a variable y\nprint(f\"Great, the result is {y}\")\n\n\n\nGreat, the result is 3"
  },
  {
    "objectID": "part-01/lecture-presentation.html#a-step-back-what-is-a-string",
    "href": "part-01/lecture-presentation.html#a-step-back-what-is-a-string",
    "title": "Lecture I - Optimal Stopping",
    "section": "A step back: What is a String?",
    "text": "A step back: What is a String?\n\nRemember: “Hello, World” is a string - in short ‘str’\nA string is a sequence of characters enclosed in quotes\nExamples: \"Hello\", 'World', \"123\", '1World23'\n\n\nhello = \"Hello\"\nworld = 'World!'\nprint(hello,world,sep=\", \") # We can specify the separator with the argument sep\n\n\n\nHello, World!\n\n\n\n\n\n\n\n\n\nNote\n\n\nStrings are immutable, we can’t change characters in them once created."
  },
  {
    "objectID": "part-01/lecture-presentation.html#string-operations",
    "href": "part-01/lecture-presentation.html#string-operations",
    "title": "Lecture I - Optimal Stopping",
    "section": "String Operations",
    "text": "String Operations\n\nBut we can also do much more with strings!\nString concatenation, indexing, slicing, length, etc.\n\n\ntwo_strings = \"Hello\" + \", \" + \"World!\" # String concatenation\nprint(two_strings)\n\n\n\nHello, World!\n\n\n\n\nprint(two_strings[0]) # Indexing starts at zero!\n\n\n\nH\n\n\n\n\n\nprint(len(two_strings)) # With len we can find the length of our string\n\n\n\n13\n\n\n\n\n\nprint(\"--x--\"*3) # We can also repeat strings\n\n\n\n--x----x----x--"
  },
  {
    "objectID": "part-01/lecture-presentation.html#booleans",
    "href": "part-01/lecture-presentation.html#booleans",
    "title": "Lecture I - Optimal Stopping",
    "section": "Booleans",
    "text": "Booleans\n\nBooleans represent two values: True and False\nInternally they are represented as 1 and 0, respectively\nThey are used for logical operations and control flow\nE.g.: if, while, for, elif, `else\n\n\n\nx = True\ny = False\nprint(x)\nprint(type(y))\n\n\n\nTrue\n&lt;class 'bool'&gt;\n\n\n\n\n&gt; More on them in our next lecture!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#integers-and-floats",
    "href": "part-01/lecture-presentation.html#integers-and-floats",
    "title": "Lecture I - Optimal Stopping",
    "section": "Integers and Floats",
    "text": "Integers and Floats\n\nIntegers are whole numbers, e.g.: 1, -3, 0 or 100\nFloats are decimal numbers, e.g.: -4.78, 0.1 or 1.23e2\nBit size is not specified (e.g.: 64 bits) in Python!\n\n\n\nx = 1; y = 1.2864e2 # We can separate multiple operations in one line with semicolons\nprint(f\"{x} is of type {type(x)}, {y} is of type {type(y)}\")\n\n\n\n1 is of type &lt;class 'int'&gt;, 128.64 is of type &lt;class 'float'&gt;\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\nThe interpreter will automatically convert booleans to integers to floats when necessary, but not the other way around!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#arithmetic-operators",
    "href": "part-01/lecture-presentation.html#arithmetic-operators",
    "title": "Lecture I - Optimal Stopping",
    "section": "Arithmetic operators",
    "text": "Arithmetic operators\n\naddition = 1 + 2;           print(f\"Result: addition is {addition}\")\nsubstraction = 1 - 2;       print(f\"Result: substraction is {substraction}\")\nmultiplication = 3 * 4;     print(f\"Result: multiplication is {multiplication}\")\ndivision = 7 / 4;           print(f\"Result: division is {division}\")\nfloor_division = 7 // 4;    print(f\"Result: floor_division is {floor_division}\")\nexponentiation = 9 ** 0.5;  print(f\"Result: exponentiation is {exponentiation}\")\nmodulo = 10 % 3;            print(f\"Result: modulo is {modulo}\")\n\n\n\nResult: addition is 3\nResult: substraction is -1\nResult: multiplication is 12\nResult: division is 1.75\nResult: floor_division is 1\nResult: exponentiation is 3.0\nResult: modulo is 1"
  },
  {
    "objectID": "part-01/lecture-presentation.html#precedence",
    "href": "part-01/lecture-presentation.html#precedence",
    "title": "Lecture I - Optimal Stopping",
    "section": "Precedence",
    "text": "Precedence\n\nOperators are the same as in most other languages\nCan be combined with each other and variables\nNormal rules of precedence apply\n\n\n\n# Operator precedence works as on paper\ncombined_operation = 2 + 3 * 4\nprint(f\"2 + 3 * 4 = {combined_operation}\")\n\n\n\n2 + 3 * 4 = 14\n\n\n\n\n\n# Parentheses change precedence as expected\nparentheses_operation = (2 + 3) * 4\nprint(f\"(2 + 3) * 4 = {parentheses_operation}\")\n\n\n\n(2 + 3) * 4 = 20"
  },
  {
    "objectID": "part-01/lecture-presentation.html#the-input-function",
    "href": "part-01/lecture-presentation.html#the-input-function",
    "title": "Lecture I - Optimal Stopping",
    "section": "The input() Function",
    "text": "The input() Function\n\nUsed to get user input as string from the console\nSyntax: input([userprompt])\nDisplays optional prompt and waits for user input\n\n\n\nname = input(\"What's your name? \")\nprint(f\"Hello, {name}!\")\n\n\n\n\n\n\n\n\n\nImportant\n\n\nThe function always returns the input as string!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#input-in-action",
    "href": "part-01/lecture-presentation.html#input-in-action",
    "title": "Lecture I - Optimal Stopping",
    "section": "Input in Action",
    "text": "Input in Action\nTask: Solve the following task:\n\n# TODO: Ask the user for their age and print a compliment\n\n\nSolution\n\nage = int(input(\"How old are you? \"))\nprint(f\"You look great for {age}!\")"
  },
  {
    "objectID": "part-01/lecture-presentation.html#type-conversion",
    "href": "part-01/lecture-presentation.html#type-conversion",
    "title": "Lecture I - Optimal Stopping",
    "section": "Type Conversion",
    "text": "Type Conversion\nUse type conversion for other data types\n\nInteger: int(input())\nFloat: float(input())\nBoolean: bool(input())\nString: str(input())\n\n\n\n# Converting to Integer\nage = int(input(\"Enter your age: \"))\nnext_year = age + 1\nprint(f\"Next year, you'll be {next_year}\")"
  },
  {
    "objectID": "part-01/lecture-presentation.html#the-round-function",
    "href": "part-01/lecture-presentation.html#the-round-function",
    "title": "Lecture I - Optimal Stopping",
    "section": "The round() Function",
    "text": "The round() Function\n\n# Hence, we can use the int() function to convert a float into an int\nsoon_int = 1.789\nprint(f\"{soon_int} converted to {int(soon_int)} of type {type(int(soon_int))}\")\n\n\n\n1.789 converted to 1 of type &lt;class 'int'&gt;\n\n\n\n\n# We can also use `round()` to round a float to an int\nsoon_int = 1.789\nprint(f\"{soon_int} converted to {round(soon_int)} of type {type(round(soon_int))}\")\n\n\n\n1.789 converted to 2 of type &lt;class 'int'&gt;\n\n\n\n\n\n# Or to a float with a certain number of decimals\nno_int = 1.789\nprint(f\"{no_int} converted to {round(no_int,1)} of type {type(round(no_int,1))}\")\n\n\n\n1.789 converted to 1.8 of type &lt;class 'float'&gt;"
  },
  {
    "objectID": "part-01/lecture-presentation.html#questions-1",
    "href": "part-01/lecture-presentation.html#questions-1",
    "title": "Lecture I - Optimal Stopping",
    "section": "Questions?",
    "text": "Questions?\n\n\n\n\n\n\n\nNote\n\n\nThat’s it for todays lecture!\nWe now have covered the basics on the Python syntax, variables, and data types."
  },
  {
    "objectID": "part-01/lecture-presentation.html#interesting-books-to-start",
    "href": "part-01/lecture-presentation.html#interesting-books-to-start",
    "title": "Lecture I - Optimal Stopping",
    "section": "Interesting Books to start",
    "text": "Interesting Books to start\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Link to free online version\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n\n\n\n\n\n\n\nNote\n\n\nThink Python is a great book to start with. It’s available online for free here. Schrödinger Programmiert Python is a great alternative for German students, as it is a very playful introduction to programming with lots of examples.\n\n\n\n\n\nFor more interesting literature to learn more about Python, take a look at the literature list of this course.\n\n\n\nLecture I - Optimal Stopping | Dr. Tobias Vlćek and Dr. Nils Roemer | Home"
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html",
    "href": "part-01/lecture-optimal-stopping.html",
    "title": "Lecture I - Optimal Stopping",
    "section": "",
    "text": "Imagine you’re hiring a secretary\nYou must interview candidates one by one\nAfter each interview, you must decide: hire or continue searching\nOnce you reject a candidate, you cannot go back\nHow do you maximize your chances of selecting the best candidate?\n\n\n\n\n\n\n\nApartment hunting\nDating and relationships\nJob searching\nParking spots\nSelling a house\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe optimal strategy is to: 1. Look at the first 37% of options 2. Remember the best one seen so far 3. Choose the next option that’s better than the best seen\n\n\n\n\n\n\nimport math\n\ndef optimal_stopping_point(n):\n    return round(n/math.e, 2)\n\nexamples = [10, 20, 50, 100]\nfor n in examples:\n    stop = optimal_stopping_point(n)\n    percent = round(stop/n * 100, 1)\n    print(f\"For {n} options: Look at first {stop} ({percent}%)\")\n\nFor 10 options: Look at first 3.68 (36.8%)\nFor 20 options: Look at first 7.36 (36.8%)\nFor 50 options: Look at first 18.39 (36.8%)\nFor 100 options: Look at first 36.79 (36.8%)\n\n\n\n\n\n\ndef optimal_secretary_strategy(candidates):\n    n = len(candidates)\n    lookout_phase = int(n/math.e)\n    best_so_far = max(candidates[:lookout_phase])\n    \n    for i in range(lookout_phase, n):\n        if candidates[i] &gt; best_so_far:\n            return i\n    return n-1  # If no better candidate found",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#the-secretary-problem",
    "href": "part-01/lecture-optimal-stopping.html#the-secretary-problem",
    "title": "Lecture I - Optimal Stopping",
    "section": "",
    "text": "Imagine you’re hiring a secretary\nYou must interview candidates one by one\nAfter each interview, you must decide: hire or continue searching\nOnce you reject a candidate, you cannot go back\nHow do you maximize your chances of selecting the best candidate?",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#real-world-applications",
    "href": "part-01/lecture-optimal-stopping.html#real-world-applications",
    "title": "Lecture I - Optimal Stopping",
    "section": "",
    "text": "Apartment hunting\nDating and relationships\nJob searching\nParking spots\nSelling a house",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#the-37-rule",
    "href": "part-01/lecture-optimal-stopping.html#the-37-rule",
    "title": "Lecture I - Optimal Stopping",
    "section": "",
    "text": "Tip\n\n\n\nThe optimal strategy is to: 1. Look at the first 37% of options 2. Remember the best one seen so far 3. Choose the next option that’s better than the best seen",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#why-37",
    "href": "part-01/lecture-optimal-stopping.html#why-37",
    "title": "Lecture I - Optimal Stopping",
    "section": "",
    "text": "import math\n\ndef optimal_stopping_point(n):\n    return round(n/math.e, 2)\n\nexamples = [10, 20, 50, 100]\nfor n in examples:\n    stop = optimal_stopping_point(n)\n    percent = round(stop/n * 100, 1)\n    print(f\"For {n} options: Look at first {stop} ({percent}%)\")\n\nFor 10 options: Look at first 3.68 (36.8%)\nFor 20 options: Look at first 7.36 (36.8%)\nFor 50 options: Look at first 18.39 (36.8%)\nFor 100 options: Look at first 36.79 (36.8%)",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#implementation-in-python",
    "href": "part-01/lecture-optimal-stopping.html#implementation-in-python",
    "title": "Lecture I - Optimal Stopping",
    "section": "",
    "text": "def optimal_secretary_strategy(candidates):\n    n = len(candidates)\n    lookout_phase = int(n/math.e)\n    best_so_far = max(candidates[:lookout_phase])\n    \n    for i in range(lookout_phase, n):\n        if candidates[i] &gt; best_so_far:\n            return i\n    return n-1  # If no better candidate found",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#apartment-hunting",
    "href": "part-01/lecture-optimal-stopping.html#apartment-hunting",
    "title": "Lecture I - Optimal Stopping",
    "section": "Apartment Hunting",
    "text": "Apartment Hunting\nTask: Let’s simulate an apartment search in Hamburg\n\nimport random\n\ndef generate_apartments(n):\n    \"\"\"Generate n apartments with random scores (1-100)\"\"\"\n    return [random.randint(1, 100) for _ in range(n)]\n\n# Example usage\napartments = generate_apartments(10)\nstopping_point = optimal_stopping_point(len(apartments))\nprint(f\"Look at first {stopping_point} apartments before deciding\")\n\nLook at first 3.68 apartments before deciding",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#interactive-demo",
    "href": "part-01/lecture-optimal-stopping.html#interactive-demo",
    "title": "Lecture I - Optimal Stopping",
    "section": "Interactive Demo",
    "text": "Interactive Demo\nLet’s try it!\n\ndef apartment_search_game():\n    apartments = generate_apartments(10)\n    for i, score in enumerate(apartments):\n        print(f\"\\nApartment {i+1} Score: {score}\")\n        if i &lt; int(len(apartments)/math.e):\n            print(\"Still in observation phase...\")\n            continue\n        \n        choice = input(\"Take this apartment? (y/n): \")\n        if choice.lower() == 'y':\n            if score == max(apartments[i:]):\n                print(\"Great choice! This was the best remaining option!\")\n            else:\n                print(\"There was a better apartment later...\")\n            break",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#cost-of-searching",
    "href": "part-01/lecture-optimal-stopping.html#cost-of-searching",
    "title": "Lecture I - Optimal Stopping",
    "section": "Cost of Searching",
    "text": "Cost of Searching\n\nWhat if each additional search costs money?\nHow does this change our strategy?\nTrade-off between finding better options and search costs",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#risk-tolerance",
    "href": "part-01/lecture-optimal-stopping.html#risk-tolerance",
    "title": "Lecture I - Optimal Stopping",
    "section": "Risk Tolerance",
    "text": "Risk Tolerance\n\nDifferent scenarios require different strategies\nConservative vs. aggressive approaches\nImpact of wrong decisions",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#further-reading",
    "href": "part-01/lecture-optimal-stopping.html#further-reading",
    "title": "Lecture I - Optimal Stopping",
    "section": "Further Reading",
    "text": "Further Reading\n\nChristian, B., & Griffiths, T. (2016). Algorithms to live by: The computer science of human decisions\nFerguson, T. S. (1989). Who solved the secretary problem?",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#about-me",
    "href": "part-01/lecture-optimal-stopping.html#about-me",
    "title": "Lecture I - Optimal Stopping",
    "section": "About me",
    "text": "About me\n\n\nField: Optimizing and simulating complex systems\nLanguages: of choice: Julia, Python and Rust\nInterest: Modelling, Simulations, Machine Learning\nTeaching: OR, Algorithms, and Programming\nContact: vlcek@beyondsimulations.com\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nI really appreciate active participation and interaction!",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#course-outline",
    "href": "part-01/lecture-optimal-stopping.html#course-outline",
    "title": "Lecture I - Optimal Stopping",
    "section": "Course Outline",
    "text": "Course Outline\n\nPart I: Introduction to Programming with Python\nPart II: Data Science Tools with Python\nPart III: Programming Projects",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#participation",
    "href": "part-01/lecture-optimal-stopping.html#participation",
    "title": "Lecture I - Optimal Stopping",
    "section": "Participation",
    "text": "Participation\n\nPrequisite for course Management Science (Prof. Goel)\nTry actively participating in this course\nYou will find it much (!) easier to follow Prof. Goel\nMaterials will be provided in the KLU portal\nSlides are hosted at beyondsimulations.github.io/Introduction-to-Python",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#teaching",
    "href": "part-01/lecture-optimal-stopping.html#teaching",
    "title": "Lecture I - Optimal Stopping",
    "section": "Teaching",
    "text": "Teaching\n\nLecture: Presentation of tools and concepts, based on small examples and code snippets\nTutorial: Hands-on examples to be solved in groups\nDifficulty: Difficult at first, but gradually easier",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#passing-the-course",
    "href": "part-01/lecture-optimal-stopping.html#passing-the-course",
    "title": "Lecture I - Optimal Stopping",
    "section": "Passing the Course",
    "text": "Passing the Course\n\nPass/fail course\n75% attendance required for passing the course\n2 assignments and 1 little project\nYou will be given programming exercises to solve\nYou can group up (3 students) and work together\nEach student group submits one solution",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#solution",
    "href": "part-01/lecture-optimal-stopping.html#solution",
    "title": "Lecture I - Optimal Stopping",
    "section": "Solution",
    "text": "Solution\n\nProvide a code solution to the problem (.py files)\nCode files need to be executable\nDetailed explanations of your code should be provided\nUse comments or docstrings in your code\nProvide a general (verbal) introduction to each problem\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nI’d encourage you to start and submit your solution early",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#difficulty-of-the-course",
    "href": "part-01/lecture-optimal-stopping.html#difficulty-of-the-course",
    "title": "Lecture I - Optimal Stopping",
    "section": "Difficulty of the Course",
    "text": "Difficulty of the Course\n\nWe’ll cover the basics of programming (in Python) at first\nThis is similar to learning a new foreign language\nFirst, you have to get used to the language and learn words\nLater, you’ll be able to apply it and see results\nSimilar to learning a language: Practice, practice, practice!",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#what-to-expect",
    "href": "part-01/lecture-optimal-stopping.html#what-to-expect",
    "title": "Lecture I - Optimal Stopping",
    "section": "What to expect",
    "text": "What to expect\n\nSome investment in the beginning to see the return later\nYou can ask questions and get support anytime\nAfter completion, you will be able to read code\nand write your own program using Python\nThat’s quite something!",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#goals-of-the-course",
    "href": "part-01/lecture-optimal-stopping.html#goals-of-the-course",
    "title": "Lecture I - Optimal Stopping",
    "section": "Goals of the Course",
    "text": "Goals of the Course\n\nEssential concepts and tools of modern programming\nAutomated solutions for recurrent tasks\nAlgorithm-based solutions of complex problems\nUsage of AI in a specific context",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#python-as-language",
    "href": "part-01/lecture-optimal-stopping.html#python-as-language",
    "title": "Lecture I - Optimal Stopping",
    "section": "Python as Language",
    "text": "Python as Language\n\nOrigins: Conceived in late 1980s as a teaching and scripting language\nSimple Syntax: Python’s syntax is straightforward and easy to learn\nVersatility: Used in web development, data analysis, artificial intelligence, and more\nCommunity Support: A large community of users and extensive documentation",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#help-from-ai",
    "href": "part-01/lecture-optimal-stopping.html#help-from-ai",
    "title": "Lecture I - Optimal Stopping",
    "section": "Help from AI",
    "text": "Help from AI\n\nYou are allowed to use AI (GitHub Copilot, ChatGPT, LLama3 …)\nThese new tools are really powerful for learning Python!\nThey can help you a lot to get started with programming\n\n. . .\n\n\n\n\n\n\nWarning\n\n\n\nBut you should not simply use them to replace your learning.",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#analytics",
    "href": "part-01/lecture-optimal-stopping.html#analytics",
    "title": "Lecture I - Optimal Stopping",
    "section": "Analytics",
    "text": "Analytics\n\nPhoto by Choong Deng Xiang on Unsplash",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#research",
    "href": "part-01/lecture-optimal-stopping.html#research",
    "title": "Lecture I - Optimal Stopping",
    "section": "Research",
    "text": "Research\n\nPhoto by National Cancer Institute on Unsplash",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#visualization",
    "href": "part-01/lecture-optimal-stopping.html#visualization",
    "title": "Lecture I - Optimal Stopping",
    "section": "Visualization",
    "text": "Visualization\n\nPhoto by Clay Banks on Unsplash",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#finance",
    "href": "part-01/lecture-optimal-stopping.html#finance",
    "title": "Lecture I - Optimal Stopping",
    "section": "Finance",
    "text": "Finance\n\nPhoto by Ishant Mishra on Unsplash",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#logistics",
    "href": "part-01/lecture-optimal-stopping.html#logistics",
    "title": "Lecture I - Optimal Stopping",
    "section": "Logistics",
    "text": "Logistics\n\nPhoto by Denys Nevozhai on Unsplash",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#my-recommendation",
    "href": "part-01/lecture-optimal-stopping.html#my-recommendation",
    "title": "Lecture I - Optimal Stopping",
    "section": "My Recommendation",
    "text": "My Recommendation\n\nBe present: Attend the lecture and participate\nPut in some work: Repeat lecture notes and try to understand the examples yourself\nDo coding: Run code examples on your own, play around, google, modify, and solve problems on your own\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nGreat resources to start are books and small challenges. You can find a list of book recommendations at the end of the lecture. Small challenges to solve can for example be found on Codewars.",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#dont-give-up",
    "href": "part-01/lecture-optimal-stopping.html#dont-give-up",
    "title": "Lecture I - Optimal Stopping",
    "section": "Don’t give up!",
    "text": "Don’t give up!\n\nProgramming is problem solving, don’t get frustrated!\nExpect to stretch your comfort zone",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#learning-path",
    "href": "part-01/lecture-optimal-stopping.html#learning-path",
    "title": "Lecture I - Optimal Stopping",
    "section": "Learning Path",
    "text": "Learning Path\n\nThe learning path can be quite steep!\nFirst of all help each other!\nTry to find help in lecture materials and books, the Python documentation, and online (e.g. Google, ChatGPT, StackOverflow, …)\nIn case you get frustrated, read the following helpful blog post about the challenges on medium.com",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#errors",
    "href": "part-01/lecture-optimal-stopping.html#errors",
    "title": "Lecture I - Optimal Stopping",
    "section": "Errors",
    "text": "Errors\nIn case you find errors and typos in the lecture notes, please report them in the following form:\nhttps://tally.so/r/w7oapa",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#install-python",
    "href": "part-01/lecture-optimal-stopping.html#install-python",
    "title": "Lecture I - Optimal Stopping",
    "section": "Install Python",
    "text": "Install Python\n\nSources are the Python website or Anaconda\nBut I would recommend we start by installing Thonny\nAn open source IDE running on Windows, Linux and Mac\nBuilt in Python interpreter and package management!",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#what-is-an-ide",
    "href": "part-01/lecture-optimal-stopping.html#what-is-an-ide",
    "title": "Lecture I - Optimal Stopping",
    "section": "What is an IDE?",
    "text": "What is an IDE?\n\nIntegrated Development Environment = application\nIt allows you to write, run and debug code scripts\nThonny is an IDE specifically for Python beginners\nIt is easy to use as beginner!\nOther IDEs include for example PyCharm from JetBrains or Visual Studio Code from Microsoft",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#python-on-ipads",
    "href": "part-01/lecture-optimal-stopping.html#python-on-ipads",
    "title": "Lecture I - Optimal Stopping",
    "section": "Python on iPads",
    "text": "Python on iPads\n\nAlthough you can run Python scripts from on your iPad, it is not recommended for the course\nNonetheless, you could use Pythonista\nIt works locally on your iPad and can run most scripts\n\n. . .\n\n\n\n\n\n\nCaution\n\n\n\nNot all packages available in Python are available in Pythonista, thus you might need a computer to solve certain problems.",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#hello-world",
    "href": "part-01/lecture-optimal-stopping.html#hello-world",
    "title": "Lecture I - Optimal Stopping",
    "section": "Hello, World!",
    "text": "Hello, World!\nTask: Create a directory for the course and create a new file called hello_world.py with the following code:\n\n# This is a comment in Python\nprint(\"Hello, World!\")\n\nHello, World!\n\n\n. . .\nRun it with the green ‘run’ button or by pressing F5!\n. . .\n\n\n\n\n\n\nNote\n\n\n\n“Hello world” is a classic example to start with. It is often used as a test to check if your computer is working properly and that you have installed the necessary software.",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#hello-world-in-a-message",
    "href": "part-01/lecture-optimal-stopping.html#hello-world-in-a-message",
    "title": "Lecture I - Optimal Stopping",
    "section": "Hello, World in a Message",
    "text": "Hello, World in a Message\nTask: Change the code in your hello_world.py file. Assign the string \"Hello, World!\" to a variable called message and print the variable.\n. . .\n\nUse the equals sign (=)\nVariable name goes on the left\nValue to be assigned goes on the right\n\n. . .\n\n# Here we assign the string \"Hello, World!\" to variable message and print it\nmessage = \"Hello, World!\"\nprint(message)\n\nHello, World!",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#hello-world-in-parentheses",
    "href": "part-01/lecture-optimal-stopping.html#hello-world-in-parentheses",
    "title": "Lecture I - Optimal Stopping",
    "section": "Hello, World in Parentheses",
    "text": "Hello, World in Parentheses\nWe can also mix \" and ' in a string, if we are consistent:\n\n# This code works\nmessage = 'I shout \"Hello, World!\"'\nprint(message)\n\nI shout \"Hello, World!\"\n\n\n. . .\n\n\n\n# This code does not!\nmessage = 'I shout 'Hello, World!\"\"\nprint(message)\n\n. . .\n\nTry it yourself! What does happen, if you try to run it?",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#first-errors",
    "href": "part-01/lecture-optimal-stopping.html#first-errors",
    "title": "Lecture I - Optimal Stopping",
    "section": "First Errors",
    "text": "First Errors\nSyntaxError: invalid syntax\n\nThe code is not valid Python syntax\nLikely the most common error that you will encounter!\nHappens when you make a mistake, e.g., illegal character, missing a colon, parentheses or quotations\nYou can fix this by correcting the code and re-running\nIn the lecture you will encounter many more errors!",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#what-is-a-program",
    "href": "part-01/lecture-optimal-stopping.html#what-is-a-program",
    "title": "Lecture I - Optimal Stopping",
    "section": "What is a Program?",
    "text": "What is a Program?\n\nSequence of instructions telling a computer what to do\nWritten in a language the computer can understand\nBasic operations in most languages:\n\nInput: Data from keyboard, file, network, sensors, etc.\nOutput: Display data, save it, send over network, etc.\nProcessing: Perform calculations, analyze data, make decisions, find patterns, etc.",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#key-concepts",
    "href": "part-01/lecture-optimal-stopping.html#key-concepts",
    "title": "Lecture I - Optimal Stopping",
    "section": "Key concepts",
    "text": "Key concepts\n\nKey concepts in most languages:\n\nVariables: Store and manipulate data\nConditional execution: Check and execute accordingly\nLoops: Perform actions repeatedly\nFunctions: Group instructions for reusability\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nWe will cover these concepts in more detail later in the course.",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#how-python-executes-code",
    "href": "part-01/lecture-optimal-stopping.html#how-python-executes-code",
    "title": "Lecture I - Optimal Stopping",
    "section": "How Python executes code",
    "text": "How Python executes code\n\nPython is an interpreted language\nThe source code is executed line by line\nThe interpreter checks the syntax and executes the code\nThis is in contrast to compiled languages, where the code is compiled into machine code before execution",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#hello-again-world",
    "href": "part-01/lecture-optimal-stopping.html#hello-again-world",
    "title": "Lecture I - Optimal Stopping",
    "section": "Hello again, World!",
    "text": "Hello again, World!\nLet’s go back to our first program:\n\n# Our first program\nmessage = \"Hello, World!\"\nprint(message)\n\n. . .\n\nComment: In the first line we define a comment with #\nVariable: In the second we define a variable message\nFunction: In the third line we call a function print",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#dont-worry",
    "href": "part-01/lecture-optimal-stopping.html#dont-worry",
    "title": "Lecture I - Optimal Stopping",
    "section": "Don’t worry!",
    "text": "Don’t worry!\n\nAlready confused? Don’t worry about it for now!\nWe’ll learn more about variables and functions later",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#the-zen-of-python",
    "href": "part-01/lecture-optimal-stopping.html#the-zen-of-python",
    "title": "Lecture I - Optimal Stopping",
    "section": "The Zen of Python",
    "text": "The Zen of Python\n\nPython’s name originally comes from Monty Python\nStyle is based on a philosophy called Zen of Python\nCollection of 19 statements with general principles\n\n. . .\nTask: Try this code in Python:\n\n# Try this code in Python to see the Zen of Python\nimport this",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#variables",
    "href": "part-01/lecture-optimal-stopping.html#variables",
    "title": "Lecture I - Optimal Stopping",
    "section": "Variables",
    "text": "Variables\n\nA variable in Python is a name that points to a value\nCreated by using the assignment operator =\nPython does not require a declaration of variable types\n\n\na = 2 # Variable a assigned the value 2\nb = \"Time\" # Variable b assigned the value \"Time\"\nc = print # Variable c assigned the print function\nc(b) # Now we can call the print function with c\n\nTime\n\n\n. . .\nBut there are certain rules to variable names!",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#variable-naming-conventions",
    "href": "part-01/lecture-optimal-stopping.html#variable-naming-conventions",
    "title": "Lecture I - Optimal Stopping",
    "section": "Variable Naming Conventions",
    "text": "Variable Naming Conventions\n\nMust start with a letter or underscore _\nCan contain letters, numbers and underscores\nNames are case sensitive, e.g., a and A are different!\nCannot be a reserved word, e.g., for, if, def, etc\nGood names are short and meaningful for humans!\n\n. . .\n\nQuestion: Which of the following fulfill these conditions?\na, _duration, 1x, time_left, 1_minute, oneWorld, xy4792",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#functions",
    "href": "part-01/lecture-optimal-stopping.html#functions",
    "title": "Lecture I - Optimal Stopping",
    "section": "Functions",
    "text": "Functions\n\nFunctions are named blocks of code\nCan take arguments function([arguments])\nCan return results or None\n\n. . .\n\n# Print is such a function\nprint(\"Hello, World!\") # It takes an argument and prints it to the console\nprint(\"Hello\",\"World!\", sep=\", \") # It can also take multiple arguments\n\nHello, World!\nHello, World!\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nWe will cover functions in more detail later in the course.",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#what-are-values-and-types",
    "href": "part-01/lecture-optimal-stopping.html#what-are-values-and-types",
    "title": "Lecture I - Optimal Stopping",
    "section": "What are Values and Types?",
    "text": "What are Values and Types?\n\nValue: Fundamental thing that a program manipulates\n\nIn Python, values are either numbers or strings\n\nType: Type of a value\n\nDetermines what operations can be performed on it\ntype() is a function that returns the type of a value\nTakes one argument and returns its type as string",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#strings",
    "href": "part-01/lecture-optimal-stopping.html#strings",
    "title": "Lecture I - Optimal Stopping",
    "section": "Strings",
    "text": "Strings\nBack to our example of “Hello, World!”\n\n# We define the variable message and assign it the value \"Hello, World!\"\nmessage = \"Hello, World!\"\n\n# We save its type in another variable called message_type\nmessage_type = type(message)\n\n# We print the value of our new variable\nprint(f\"{message} is a {message_type}\")\n\nHello, World! is a &lt;class 'str'&gt;\n\n\n. . .\n\nResult: “Hello, World” is a string - in short ‘str’.\n. . .\nBut what about the f”?",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#formated-strings",
    "href": "part-01/lecture-optimal-stopping.html#formated-strings",
    "title": "Lecture I - Optimal Stopping",
    "section": "Formated Strings",
    "text": "Formated Strings\n\nf-strings are strings that start with f\nThey contain expressions, e.g., variables, in braces\nEvaluated at run time and inserted into the string\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nIn older code bases, f strings were not available. Here, interpolation could be done as shown below with print() and .format(). But this method is less concise and arguably less readable.\n\n\n. . .\n\nprint(\"{} is a {}\".format(message, message_type))\n\nHello, World! is a &lt;class 'str'&gt;",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#specifying-formatted-strings",
    "href": "part-01/lecture-optimal-stopping.html#specifying-formatted-strings",
    "title": "Lecture I - Optimal Stopping",
    "section": "Specifying Formatted Strings",
    "text": "Specifying Formatted Strings\n\nWe can further specify their forman with {&lt;to_print&gt;:&lt;width&gt;.&lt;precision&gt;f}\nwidth can be a number specifying the output width\n&lt;, ^, &gt; can be used before the width to align the text\nprecision can be used to specify the decimals\n.f can be used to format floats\n\n\nx = \"hello\"\nprint(f\"{x:&lt;10} has {len(x):&gt;10.2f} characters.\")\n\nhello      has       5.00 characters.",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#expressions",
    "href": "part-01/lecture-optimal-stopping.html#expressions",
    "title": "Lecture I - Optimal Stopping",
    "section": "Expressions",
    "text": "Expressions\n\nProduce a value when evaluated\nCan be used as part of larger expressions or statements\nStatements are expressions that don’t produce a value\nExamples: arithmetic operations, function calls, variables\n\n\nx = 1 # Statement that assigns the value 3 to x\ny = x + 2 # Expression on the right side assigned to a variable y\nprint(f\"Great, the result is {y}\")\n\nGreat, the result is 3",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#a-step-back-what-is-a-string",
    "href": "part-01/lecture-optimal-stopping.html#a-step-back-what-is-a-string",
    "title": "Lecture I - Optimal Stopping",
    "section": "A step back: What is a String?",
    "text": "A step back: What is a String?\n\nRemember: “Hello, World” is a string - in short ‘str’\nA string is a sequence of characters enclosed in quotes\nExamples: \"Hello\", 'World', \"123\", '1World23'\n\n\nhello = \"Hello\"\nworld = 'World!'\nprint(hello,world,sep=\", \") # We can specify the separator with the argument sep\n\nHello, World!\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nStrings are immutable, we can’t change characters in them once created.",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#string-operations",
    "href": "part-01/lecture-optimal-stopping.html#string-operations",
    "title": "Lecture I - Optimal Stopping",
    "section": "String Operations",
    "text": "String Operations\n\nBut we can also do much more with strings!\nString concatenation, indexing, slicing, length, etc.\n\n\ntwo_strings = \"Hello\" + \", \" + \"World!\" # String concatenation\nprint(two_strings)\n\nHello, World!\n\n\n. . .\n\nprint(two_strings[0]) # Indexing starts at zero!\n\nH\n\n\n. . .\n\nprint(len(two_strings)) # With len we can find the length of our string\n\n13\n\n\n. . .\n\nprint(\"--x--\"*3) # We can also repeat strings\n\n--x----x----x--",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#booleans",
    "href": "part-01/lecture-optimal-stopping.html#booleans",
    "title": "Lecture I - Optimal Stopping",
    "section": "Booleans",
    "text": "Booleans\n\nBooleans represent two values: True and False\nInternally they are represented as 1 and 0, respectively\nThey are used for logical operations and control flow\nE.g.: if, while, for, elif, `else\n\n. . .\n\nx = True\ny = False\nprint(x)\nprint(type(y))\n\nTrue\n&lt;class 'bool'&gt;\n\n\n. . .\n&gt; More on them in our next lecture!",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#integers-and-floats",
    "href": "part-01/lecture-optimal-stopping.html#integers-and-floats",
    "title": "Lecture I - Optimal Stopping",
    "section": "Integers and Floats",
    "text": "Integers and Floats\n\nIntegers are whole numbers, e.g.: 1, -3, 0 or 100\nFloats are decimal numbers, e.g.: -4.78, 0.1 or 1.23e2\nBit size is not specified (e.g.: 64 bits) in Python!\n\n. . .\n\nx = 1; y = 1.2864e2 # We can separate multiple operations in one line with semicolons\nprint(f\"{x} is of type {type(x)}, {y} is of type {type(y)}\")\n\n1 is of type &lt;class 'int'&gt;, 128.64 is of type &lt;class 'float'&gt;\n\n\n. . .\n\n\n\n\n\n\nWarning\n\n\n\nThe interpreter will automatically convert booleans to integers to floats when necessary, but not the other way around!",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#arithmetic-operators",
    "href": "part-01/lecture-optimal-stopping.html#arithmetic-operators",
    "title": "Lecture I - Optimal Stopping",
    "section": "Arithmetic operators",
    "text": "Arithmetic operators\n\naddition = 1 + 2;           print(f\"Result: addition is {addition}\")\nsubstraction = 1 - 2;       print(f\"Result: substraction is {substraction}\")\nmultiplication = 3 * 4;     print(f\"Result: multiplication is {multiplication}\")\ndivision = 7 / 4;           print(f\"Result: division is {division}\")\nfloor_division = 7 // 4;    print(f\"Result: floor_division is {floor_division}\")\nexponentiation = 9 ** 0.5;  print(f\"Result: exponentiation is {exponentiation}\")\nmodulo = 10 % 3;            print(f\"Result: modulo is {modulo}\")\n\nResult: addition is 3\nResult: substraction is -1\nResult: multiplication is 12\nResult: division is 1.75\nResult: floor_division is 1\nResult: exponentiation is 3.0\nResult: modulo is 1",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#precedence",
    "href": "part-01/lecture-optimal-stopping.html#precedence",
    "title": "Lecture I - Optimal Stopping",
    "section": "Precedence",
    "text": "Precedence\n\nOperators are the same as in most other languages\nCan be combined with each other and variables\nNormal rules of precedence apply\n\n. . .\n\n# Operator precedence works as on paper\ncombined_operation = 2 + 3 * 4\nprint(f\"2 + 3 * 4 = {combined_operation}\")\n\n2 + 3 * 4 = 14\n\n\n. . .\n\n# Parentheses change precedence as expected\nparentheses_operation = (2 + 3) * 4\nprint(f\"(2 + 3) * 4 = {parentheses_operation}\")\n\n(2 + 3) * 4 = 20",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#the-input-function",
    "href": "part-01/lecture-optimal-stopping.html#the-input-function",
    "title": "Lecture I - Optimal Stopping",
    "section": "The input() Function",
    "text": "The input() Function\n\nUsed to get user input as string from the console\nSyntax: input([userprompt])\nDisplays optional prompt and waits for user input\n\n. . .\n\nname = input(\"What's your name? \")\nprint(f\"Hello, {name}!\")\n\n. . .\n\n\n\n\n\n\nImportant\n\n\n\nThe function always returns the input as string!",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#input-in-action",
    "href": "part-01/lecture-optimal-stopping.html#input-in-action",
    "title": "Lecture I - Optimal Stopping",
    "section": "Input in Action",
    "text": "Input in Action\nTask: Solve the following task:\n\n# TODO: Ask the user for their age and print a compliment\n\n. . .\nSolution\n\nage = int(input(\"How old are you? \"))\nprint(f\"You look great for {age}!\")",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#type-conversion",
    "href": "part-01/lecture-optimal-stopping.html#type-conversion",
    "title": "Lecture I - Optimal Stopping",
    "section": "Type Conversion",
    "text": "Type Conversion\nUse type conversion for other data types\n\nInteger: int(input())\nFloat: float(input())\nBoolean: bool(input())\nString: str(input())\n\n. . .\n\n# Converting to Integer\nage = int(input(\"Enter your age: \"))\nnext_year = age + 1\nprint(f\"Next year, you'll be {next_year}\")",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#the-round-function",
    "href": "part-01/lecture-optimal-stopping.html#the-round-function",
    "title": "Lecture I - Optimal Stopping",
    "section": "The round() Function",
    "text": "The round() Function\n\n# Hence, we can use the int() function to convert a float into an int\nsoon_int = 1.789\nprint(f\"{soon_int} converted to {int(soon_int)} of type {type(int(soon_int))}\")\n\n1.789 converted to 1 of type &lt;class 'int'&gt;\n\n\n. . .\n\n# We can also use `round()` to round a float to an int\nsoon_int = 1.789\nprint(f\"{soon_int} converted to {round(soon_int)} of type {type(round(soon_int))}\")\n\n1.789 converted to 2 of type &lt;class 'int'&gt;\n\n\n. . .\n\n# Or to a float with a certain number of decimals\nno_int = 1.789\nprint(f\"{no_int} converted to {round(no_int,1)} of type {type(round(no_int,1))}\")\n\n1.789 converted to 1.8 of type &lt;class 'float'&gt;",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#questions-1",
    "href": "part-01/lecture-optimal-stopping.html#questions-1",
    "title": "Lecture I - Optimal Stopping",
    "section": "Questions?",
    "text": "Questions?\n. . .\n\n\n\n\n\n\nNote\n\n\n\nThat’s it for todays lecture!\nWe now have covered the basics on the Python syntax, variables, and data types.",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#interesting-books-to-start",
    "href": "part-01/lecture-optimal-stopping.html#interesting-books-to-start",
    "title": "Lecture I - Optimal Stopping",
    "section": "Interesting Books to start",
    "text": "Interesting Books to start\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Link to free online version\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nThink Python is a great book to start with. It’s available online for free here. Schrödinger Programmiert Python is a great alternative for German students, as it is a very playful introduction to programming with lots of examples.\n\n\n. . .\nFor more interesting literature to learn more about Python, take a look at the literature list of this course.",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/tutorial-02-comparisons.html",
    "href": "part-01/tutorial-02-comparisons.html",
    "title": "Tutorial I.II - Comparison Operators",
    "section": "",
    "text": "Imagine you’re teaching a computer to make decisions. Just like we compare things in everyday life (“Is it raining?”, “Do I have enough money?”), computers need ways to compare values and make choices. Let’s look at this in the context of hiring decisions to help us how to make decisions in the context of optimal stopping problems. Imagine you’re helping a company make hiring decisions. You need to look at different candidates and decide if they meet certain requirements. To make these decisions with Python, we need to learn how to make comparisons!",
    "crumbs": [
      "01 Optimal Stopping",
      "02 - Comparisons"
    ]
  },
  {
    "objectID": "part-01/tutorial-02-comparisons.html#exercise-1.1---compare-test-scores",
    "href": "part-01/tutorial-02-comparisons.html#exercise-1.1---compare-test-scores",
    "title": "Tutorial I.II - Comparison Operators",
    "section": "Exercise 1.1 - Compare Test Scores",
    "text": "Exercise 1.1 - Compare Test Scores\nA candidate scored 95 on their test. The previous highest score was 88. Create a comparison to check if the new score is better and store the result in compare_scores.\n\n# Creates the variables\nnew_score = 95\nprevious_best = 88\n# YOUR CODE BELOW\n\n# Test your answer\nassert compare_scores == True, \"The new score should be greater than the previous best\"\nprint(f\"Is new score better? {compare_scores}\")",
    "crumbs": [
      "01 Optimal Stopping",
      "02 - Comparisons"
    ]
  },
  {
    "objectID": "part-01/tutorial-02-comparisons.html#exercise-1.2---compare-skills",
    "href": "part-01/tutorial-02-comparisons.html#exercise-1.2---compare-skills",
    "title": "Tutorial I.II - Comparison Operators",
    "section": "Exercise 1.2 - Compare Skills",
    "text": "Exercise 1.2 - Compare Skills\nCheck if a candidate’s skill matches what we need. Compare if the following two variables are different and store the result in compare_skills.\n\ncandidate_skill = \"Finance\"\nrequired_skill = \"Python\"\n# YOUR CODE BELOW\n\n\n# Test your answer\nassert compare_skills == False, \"The candidate's skill should not match the required skill\"\nprint(\"Good job! You correctly identified that the skills are different\")",
    "crumbs": [
      "01 Optimal Stopping",
      "02 - Comparisons"
    ]
  },
  {
    "objectID": "part-01/tutorial-02-comparisons.html#exercise-1.3---compare-candidates",
    "href": "part-01/tutorial-02-comparisons.html#exercise-1.3---compare-candidates",
    "title": "Tutorial I.II - Comparison Operators",
    "section": "Exercise 1.3 - Compare Candidates",
    "text": "Exercise 1.3 - Compare Candidates\nIn the secretary problem, we need to compare candidates to the best we’ve seen. Check if the current candidate is better than our best so far and store the result in is_better.\n\ncurrent_rating = 92\nbest_so_far = 88\n# YOUR CODE BELOW\n\n\n# Test your answer\nassert is_better == True, \"The current candidate should be better than the best so far\"\nprint(\"Good job! You correctly identified that the current candidate is better than the best so far\")",
    "crumbs": [
      "01 Optimal Stopping",
      "02 - Comparisons"
    ]
  },
  {
    "objectID": "part-01/tutorial-02-comparisons.html#exercise-2.1---check-multiple-requirements",
    "href": "part-01/tutorial-02-comparisons.html#exercise-2.1---check-multiple-requirements",
    "title": "Tutorial I.II - Comparison Operators",
    "section": "Exercise 2.1 - Check Multiple Requirements",
    "text": "Exercise 2.1 - Check Multiple Requirements\nWe have a candidate with:\n\n4 years of experience\nTest score of 90\n\nCheck if they meet BOTH requirements:\n\nMore than 3 years experience\nTest score above 85\n\nStore the result in meets_requirements.\n\nyears = 4\nscore = 90\n# YOUR CODE BELOW\n\n\n# Test your answer\nassert meets_requirements == True, \"The candidate should meet both requirements\"\nprint(\"Good job! You correctly identified that the candidate meets both requirements\")",
    "crumbs": [
      "01 Optimal Stopping",
      "02 - Comparisons"
    ]
  },
  {
    "objectID": "part-01/tutorial-02-comparisons.html#exercise-2.2---alternative-requirements",
    "href": "part-01/tutorial-02-comparisons.html#exercise-2.2---alternative-requirements",
    "title": "Tutorial I.II - Comparison Operators",
    "section": "Exercise 2.2 - Alternative Requirements",
    "text": "Exercise 2.2 - Alternative Requirements\nA candidate is acceptable if they EITHER:\n\nHave a PhD\nOR have a high test score (above 95)\n\n\nhas_phd = True\ntest_score = 92\n\n# Store the result in `is_qualified`\n# YOUR CODE BELOW\n\n\n# Test your answer\nassert is_qualified == True, \"The candidate should be qualified\"\nprint(\"Good job! You correctly identified that the candidate is qualified\")",
    "crumbs": [
      "01 Optimal Stopping",
      "02 - Comparisons"
    ]
  },
  {
    "objectID": "part-01/tutorial-02-comparisons.html#exercise-3.1---make-a-hiring-decision",
    "href": "part-01/tutorial-02-comparisons.html#exercise-3.1---make-a-hiring-decision",
    "title": "Tutorial I.II - Comparison Operators",
    "section": "Exercise 3.1 - Make a Hiring Decision",
    "text": "Exercise 3.1 - Make a Hiring Decision\nLook at the following candidate’s information and decide if we should hire them:\nRequirements:\n\nAt least 5 years experience\nTest score above 85\nSalary request at most 90000\nMust have a degree\n\nCreate a single boolean expression that checks ALL requirements and store the result in final_decision.\n\n# Candidate information\ncandidate_experience = 7\ncandidate_score = 89\ncandidate_salary = 92000\ncandidate_has_degree = True\n# YOUR CODE BELOW\n\n\n# Test your answer\nassert final_decision == False, \"The candidate should not meet all requirements\"\nprint(\"Good job! You correctly identified that the candidate does not meet all requirements as his salary expectation is too high.\")",
    "crumbs": [
      "01 Optimal Stopping",
      "02 - Comparisons"
    ]
  },
  {
    "objectID": "part-01/tutorial-02-comparisons.html#exercise-2.3---optimal-stopping-decision",
    "href": "part-01/tutorial-02-comparisons.html#exercise-2.3---optimal-stopping-decision",
    "title": "Tutorial I.II - Comparison Operators",
    "section": "Exercise 2.3 - Optimal Stopping Decision",
    "text": "Exercise 2.3 - Optimal Stopping Decision\nWe have:\n\nSeen 18 out of 40 candidates\nCurrent candidate score: 90\nBest score so far: 85\n\nCheck if we should hire this candidate (we should hire if we’ve seen at least 37% of candidates AND this candidate is better than the best so far).\nStore the result in make_offer.\n\n# Candidate information\ncandidates_seen = 18\ntotal_candidates = 40\ncurrent_score = 90\nbest_score_so_far = 85\n# YOUR CODE BELOW\n\n\n# Test your answer\nassert make_offer == True, \"We should hire this candidate\"\nprint(\"Good job! You correctly identified that we should hire this candidate\")",
    "crumbs": [
      "01 Optimal Stopping",
      "02 - Comparisons"
    ]
  },
  {
    "objectID": "general/syllabus.html",
    "href": "general/syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Lectures\nIn our lectures, we mostly refrain from showing you any code. Instead, we will focus on explaining the concepts and how they can be used to solve problems. The tutorials will then show you step-by-step how to implement the concepts in Python. We were rather ambitious in the design of the course in the course module, thus we will not be able to cover all topics there. However, we have chosen the most important topics from our perspective that will lay a good foundation for interested students to continue learning on their own.\nWelcome and Optimal Stopping (I)\n- Overview of the course and its objectives - Introduction to algorithmic thinking - Optimal Stopping - Programming: First Steps in Python\nExplore & Exploit (II)\n- Multi-armed Bandit Problem - Balancing exploration and exploitation - Programming: Simulating the Multi-armed Bandit Problem\nCaching (III)\n- Principles of caching and memory management - Least Recently Used (LRU) and other caching strategies - Programming: Implementing an LRU cache\nScheduling (IV)\n- Task scheduling algorithms - Trade-offs between efficiency and fairness - Programming: Implementing scheduling algorithms\nRandomness (V)\n- Role of randomness in algorithms - Monte Carlo methods and their applications - Programming: Monte Carlo simulation\nComputational Kindness (VI)\n- Algorithms for social good - Ethical considerations in algorithm design - Quick review of key concepts - Brief student presentations - Open discussion and Q&A\n\n\nAssignment\nThe assignment will be posted on the course website in the coming weeks. We will create three assignments to choose from. You can do the assignments in your own time at your own pace. However, you will have to hand in your solutions before the deadline.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/faq.html",
    "href": "general/faq.html",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "If you have a question that is not answered here, please let me know by sending me an e-mail to vlcek@beyondsimulations.com or by creating an issue on GitHub.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#unanswered-questions",
    "href": "general/faq.html#unanswered-questions",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "If you have a question that is not answered here, please let me know by sending me an e-mail to vlcek@beyondsimulations.com or by creating an issue on GitHub.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#contribution-and-mistakes",
    "href": "general/faq.html#contribution-and-mistakes",
    "title": "Frequently Asked Questions",
    "section": "Contribution and Mistakes",
    "text": "Contribution and Mistakes\nIf you have found a mistake in the course material or if you have any suggestion on how to improve the course, please let us know in the following form or by creating an issue on GitHub.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#faqs",
    "href": "general/faq.html#faqs",
    "title": "Frequently Asked Questions",
    "section": "FAQs",
    "text": "FAQs\nSo far, we haven’t received any questions.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Programming: Everyday Decision-Making Algorithms",
    "section": "",
    "text": "Course Description\nThis course explores the intersection of computer science and everyday life by examining how algorithms can be applied to improve decision-making in various contexts. Based on the book “Algorithms to Live By” by Brian Christian and Tom Griffiths, the course will cover topics such as optimal stopping, scheduling, caching, and game theory, providing both theoretical foundations and practical programming exercises. The course consists of lectures and exercises.\n\n\nLearning Outcomes\nOur broad goal is to equip students with the ability to get to grips with algorithmic thinking. We want to enable students, to indepently apply methods and concepts from algorithms to solve their everyday practical problems while also providing a brief introduction into programming with python.\nUpon completion of the course, students … • … will understand fundamental algorithms and their applications to everyday problems • … develop the ability to model real-world scenarios using algorithmic thinking • … implement simple algorithms in python to solve practical problems • … analyze the efficiency and effectiveness of different algorithms in various contexts\nPlease note that this course is specifically designed for business students. That is, it is not required to have any advanced knowledge or experience in programming to attend this course. The teaching format will make it possible to account for different levels of programming skills such that every student can take the most out of the course.\n\n\nCourse Blocks\n\n\nCourse Structure\nThe course is based on a hands-on approach with a two-fold structure:\n\nLectures: In the lectures, we will introduce and discuss concepts and illustrate them in reproducible examples.\nHands-on Tutorials: Students will apply the concepts from the lecture in jupyter notebooks, while simultaneously learning the basics of python.\n\nThe evaluation of the course will be based on the following two components: 1. Assignment: Students will solve one programming exercise in groups of up to three students that they will have to hand in. 2. Presentation: Students will give a short presentation on a topic of their choice.\nYou can find more information on the course contents in the syllabus.\n\n\nHow to see the slides\n\nThis course is based on Quarto\nIt uses revealjs to render the slides\nYou find the slides for each lecture in the corresponding lecture\nTo see the slides, click on RevealJS in the top right corner\n\n\n\nQuestions\nIf you have any questions regarding the course, please contact me under vlcek@beyondsimulations.com.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "general/literature.html",
    "href": "general/literature.html",
    "title": "Literature and Resources",
    "section": "",
    "text": "This section provides a curated list of books and resources to enhance your understanding of algorithmic thinking and programming. Each recommendation includes a brief description to help you choose the most suitable resources for you.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#books",
    "href": "general/literature.html#books",
    "title": "Literature and Resources",
    "section": "Books",
    "text": "Books\n\nChristian, B., & Griffiths, T. (2016). Algorithms to live by: the computer science of human decisions. First international edition. New York, Henry Holt and Company.\n\nA book that inspired this lecture and will give you a good intuition for the principles of algorithmic thinking and how they can be applied to solve problems in everyday life.\n\nZingaro, D. (2024) Algorithmic thinking, 2nd edition: Unlock your programming potential. AU: No Starch Press.\n\nA book that introduces you to different algorithms and their reasoning. Written without any pseudocode, but with a lot of examples and explanations.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#books-1",
    "href": "general/literature.html#books-1",
    "title": "Literature and Resources",
    "section": "Books",
    "text": "Books\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly.\n\nA great book to start with if you have no experience with programming.\nLink to free online book\n\nVanderPlas, J. (2016). A whirlwind tour of Python (August 2016, First edition). O’Reilly Media Inc.\n\nA very good and short book to get a quick overview of the most important features of Python if you already have some experience with programming.\nLink to the free online version\n\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\nA book that is unfortunately only available in German, but a very good and comedic start for beginners with lots of illustrations, examples and exercises. It is only available in print.\n\nMatthes, E. (2023). Python crash course: A hands-on, project-based introduction to programming (3rd edition). No Starch Press.\n\nA great book to learn Python with a hands-on approach. Highly recommended even for beginners but only available to buy.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#resources",
    "href": "general/literature.html#resources",
    "title": "Literature and Resources",
    "section": "Resources",
    "text": "Resources\n\nDaily Dose of Data Science\n\nA website and a newsletter with lots of easy-to-digest resources to improve your skills in Data Science.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#books-2",
    "href": "general/literature.html#books-2",
    "title": "Literature and Resources",
    "section": "Books",
    "text": "Books\n\nWilke, C. (2019). Fundamentals of data visualization: A primer on making informative and compelling figures (First edition). O’Reilly Media.\n\nA book that is highly recommended to understand the principles of data visualization and how to create effective visualizations.\nLink to the free book website\n\nThomas, D., & Hunt, A. (2019). The pragmatic programmer, 20th anniversary edition: Journey to mastery (Second edition). Addison-Wesley.\n\nA fantasticbook to understand the principles of software development and how to create effective software.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#resources-1",
    "href": "general/literature.html#resources-1",
    "title": "Literature and Resources",
    "section": "Resources",
    "text": "Resources\n\nQuarto\n\nA static website generator that is very powerful and flexible. Used to create the slides and the website for the course.\n\nCursor\n\nA code editor based on VS Code that is very powerful and flexible. It uses AI to help you write code.\n\nJupyter\n\nA web application that allows you to create and share documents that contain code, equations, visualizations and text. It is very popular in the field of data science and academia and also part of Quarto.\n\nAdvent of Code\n\nA wonderful website with daily challenges during the christmas time. Highly recommended to playfully improve your skills.\n\nTiny Python Projects\n\nInteresting and fun projects to programm in order to improve your programming skills.\n\nGithub\n\nThe largest provider for git repositories owned by Microsoft. A lot of open source projects are hosted here and you can read the code.\n\nCodewars\n\nA platform to improve your coding skills by solving challenges. You can compete with others, see how other people solved the challenges and read and learn from the code.\n\nCheat-Sheets\n\nFantastic resource with cheat sheets for the book “Python Crash Course” by Eric Matthes. You can use these to quickly look up syntax and functions.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "part-01/tutorial-03-stopping.html",
    "href": "part-01/tutorial-03-stopping.html",
    "title": "Tutorial I.III - Making Decisions",
    "section": "",
    "text": "Imagine you’re searching for a new apartment. You view a flat - should you take it or keep looking for something better? This is another classic optimal stopping problem! Just like in dating or hiring, you need to decide when to stop searching.\nIn this tutorial, we’ll learn how computers make decisions using if and else statements. These are like the “if this, then that” decisions we make every day!",
    "crumbs": [
      "01 Optimal Stopping",
      "03 - Stopping"
    ]
  },
  {
    "objectID": "part-01/tutorial-03-stopping.html#exercise-1.1---your-first-decision",
    "href": "part-01/tutorial-03-stopping.html#exercise-1.1---your-first-decision",
    "title": "Tutorial I.III - Making Decisions",
    "section": "Exercise 1.1 - Your First Decision",
    "text": "Exercise 1.1 - Your First Decision\nCreate an if statement that prints “Perfect flat!” if the flat_rating is 10.\n\nflat_rating = 10\n# YOUR CODE BELOW\n\n# Test your answer yourself - the cell should print \"Perfect flat!\" if executed correctly",
    "crumbs": [
      "01 Optimal Stopping",
      "03 - Stopping"
    ]
  },
  {
    "objectID": "part-01/tutorial-03-stopping.html#exercise-2.1---complete-decision",
    "href": "part-01/tutorial-03-stopping.html#exercise-2.1---complete-decision",
    "title": "Tutorial I.III - Making Decisions",
    "section": "Exercise 2.1 - Complete Decision",
    "text": "Exercise 2.1 - Complete Decision\nWrite an if-else statement that sets decision to “Apply now” if flat_rating is at least 7, and “Keep searching” otherwise.\n\nflat_rating = 6\ndecision = \"\"\n# YOUR CODE BELOW\n\n\n# Test your answer\nassert decision == \"Keep searching\", \"The decision should be 'Keep searching' as the flat rating is less than 7\"\nprint(f\"Decision: {decision} as the flat rating is {flat_rating}\")\n\n\n\n\n\n\n\nTip\n\n\n\nWriting Better If-Else Statements:\n\nKeep your conditions simple and readable\nUse meaningful variable names\nConsider what should happen in both cases\nTest both paths to make sure they work",
    "crumbs": [
      "01 Optimal Stopping",
      "03 - Stopping"
    ]
  },
  {
    "objectID": "part-01/tutorial-03-stopping.html#exercise-3.1---apartment-categories",
    "href": "part-01/tutorial-03-stopping.html#exercise-3.1---apartment-categories",
    "title": "Tutorial I.III - Making Decisions",
    "section": "Exercise 3.1 - Apartment Categories",
    "text": "Exercise 3.1 - Apartment Categories\nCreate a variable flat_category that is:\n\n“Luxury” if rating is 9 or 10\n“Premium” if rating is 7 or 8\n“Standard” if rating is 5 or 6\n“Basic” for anything lower\n\n\nflat_rating = 8\nflat_category = \"\"\n# YOUR CODE BELOW\n\n\n# Test your answer\nassert flat_category == \"Premium\", \"The flat category should be 'Premium' as the flat rating is 8\"\nprint(f\"Flat Category: {flat_category} as the flat rating is {flat_rating}\")",
    "crumbs": [
      "01 Optimal Stopping",
      "03 - Stopping"
    ]
  },
  {
    "objectID": "part-01/tutorial-03-stopping.html#exercise-4.1---real-world-flat-hunting",
    "href": "part-01/tutorial-03-stopping.html#exercise-4.1---real-world-flat-hunting",
    "title": "Tutorial I.III - Making Decisions",
    "section": "Exercise 4.1 - Real World Flat Hunting",
    "text": "Exercise 4.1 - Real World Flat Hunting\nCreate a variable should_apply that is True if:\n\nThe flat rating is at least 8, OR\nThe flat rating is at least 6 AND we’ve been searching for 3 weeks or more\n\n\nflat_rating = 6\nweeks_searching = 4\nshould_apply = False\n# YOUR CODE BELOW\n\n\n# Test your answer\nassert should_apply == True, \"The flat rating is 6 and we've been searching for 4 weeks, so we should apply\"\nprint(f\"Should we apply? {should_apply} as the flat rating is {flat_rating} and we've been searching for {weeks_searching} weeks\")",
    "crumbs": [
      "01 Optimal Stopping",
      "03 - Stopping"
    ]
  },
  {
    "objectID": "part-01/tutorial-03-stopping.html#exercise-5.1---implement-the-rule",
    "href": "part-01/tutorial-03-stopping.html#exercise-5.1---implement-the-rule",
    "title": "Tutorial I.III - Making Decisions",
    "section": "Exercise 5.1 - Implement the Rule",
    "text": "Exercise 5.1 - Implement the Rule\nAdjust the code below to change the variable make_application to True if:\n\nWe’ve seen at least 37% of available flats (use 15 total flats), AND\nThe current flat is better than the best we’ve seen so far\n\n\nflats_seen = 6  # We've seen 6 flats\ntotal_viewings = 15  # We plan to view 15 flats in total\ncurrent_rating = 9\nbest_rating_so_far = 8\nmake_application = False\n# YOUR CODE BELOW\n\n\n# Test your answer\nassert make_application == True, \"The flat rating is 9 and we've been searching for 4 weeks, so we should apply\"\nprint(f\"Should we apply for this flat? {make_application}\")",
    "crumbs": [
      "01 Optimal Stopping",
      "03 - Stopping"
    ]
  },
  {
    "objectID": "part-01/tutorial-01-variables.html",
    "href": "part-01/tutorial-01-variables.html",
    "title": "Tutorial I.I - Variables and Types",
    "section": "",
    "text": "Welcome to this interactive Python tutorial on variables, types, and algorithmic thinking! We’ll explore these concepts through the lens of optimization problems, specifically using the famous “Secretary Problem” as our running example.\nThe Secretary Problem asks: “If you need to hire the best candidate, and you can only interview candidates one at a time (with no going back), when should you stop and make an offer?” This is a perfect example of optimal stopping and will help us understand how variables and data types play crucial roles in algorithmic thinking. To make the problem more interesting, we will use the Secretary Problem to help us make better dating decisions! The question is thus: When should you stop dating and commit to someone?\nKnown academically as the “Optimal Stopping Problem” or “The Marriage Problem”, it asks: If you want to find the best possible partner, and you can only date one person at a time (no going back to previous dates!), when should you stop dating and propose?\nLet’s learn how to use Python to help us in order to make better dating decisions!",
    "crumbs": [
      "01 Optimal Stopping",
      "01 - Variables"
    ]
  },
  {
    "objectID": "part-01/tutorial-01-variables.html#exercise-1.1---first-date-setup",
    "href": "part-01/tutorial-01-variables.html#exercise-1.1---first-date-setup",
    "title": "Tutorial I.I - Variables and Types",
    "section": "Exercise 1.1 - First Date Setup",
    "text": "Exercise 1.1 - First Date Setup\nCreate a variable currently_dating and set it to False (because we’re starting our dating journey).\n\n# YOUR CODE BELOW\n\n\n# Test your answer\nassert currently_dating == False, \"Let's start fresh - set currently_dating to False!\"\nprint(\"Ready to start dating! We have defined the variable `currently_dating` as boolean.\")",
    "crumbs": [
      "01 Optimal Stopping",
      "01 - Variables"
    ]
  },
  {
    "objectID": "part-01/tutorial-01-variables.html#exercise-1.2---dream-date",
    "href": "part-01/tutorial-01-variables.html#exercise-1.2---dream-date",
    "title": "Tutorial I.I - Variables and Types",
    "section": "Exercise 1.2 - Dream Date",
    "text": "Exercise 1.2 - Dream Date\nCreate a variable dream_date_name with your ideal date’s name (let’s say “Mika”).\n\n# YOUR CODE BELOW\n\n\n# Test your answer\nassert dream_date_name == \"Mika\", \"Let's use 'Mika' as our dream date's name\"\nprint(f\"We have defined a string variable for our dream date. Now, we are looking for {dream_date_name}!\")",
    "crumbs": [
      "01 Optimal Stopping",
      "01 - Variables"
    ]
  },
  {
    "objectID": "part-01/tutorial-01-variables.html#exercise-2.1---dating-score",
    "href": "part-01/tutorial-01-variables.html#exercise-2.1---dating-score",
    "title": "Tutorial I.I - Variables and Types",
    "section": "Exercise 2.1 - Dating Score",
    "text": "Exercise 2.1 - Dating Score\nCreate a float variable minimum_rating and set it to 7.0 (our standards are high!). Of course, we don’t objectify people and rate their appearance, we rate the compatibility. We just want to find the best possible partner!\n\n# YOUR CODE BELOW\n\n\n# Test your answer\nassert minimum_rating == 7.0 and isinstance(minimum_rating, float), \"Set your standards (minimum_rating) to 7.0!\"\nprint(f\"We won't settle for less than {minimum_rating}/10, where the minimum rating is defined as a float!\")",
    "crumbs": [
      "01 Optimal Stopping",
      "01 - Variables"
    ]
  },
  {
    "objectID": "part-01/tutorial-01-variables.html#exercise-2.2---dating-history",
    "href": "part-01/tutorial-01-variables.html#exercise-2.2---dating-history",
    "title": "Tutorial I.I - Variables and Types",
    "section": "Exercise 2.2 - Dating History",
    "text": "Exercise 2.2 - Dating History\nCreate an integer variable past_relationships and set it to 0.\n\n# YOUR CODE BELOW\n\n\n# Test your answer\nassert past_relationships == 0 and isinstance(past_relationships, int), \"Let's start fresh with 0 past relationships\"\nprint(\"Clean slate, although likely not true! We have defined the variable `past_relationships` as an integer and are ready to start dating!\")",
    "crumbs": [
      "01 Optimal Stopping",
      "01 - Variables"
    ]
  },
  {
    "objectID": "part-01/tutorial-01-variables.html#exercise-3.1---decision-point",
    "href": "part-01/tutorial-01-variables.html#exercise-3.1---decision-point",
    "title": "Tutorial I.I - Variables and Types",
    "section": "Exercise 3.1 - Decision Point",
    "text": "Exercise 3.1 - Decision Point\nConvert the string \"37\" into an integer variable named stopping_point.\n\nstopping_point = \"37\"\n# YOUR CODE BELOW\n\n\n# Test your answer\nassert isinstance(stopping_point, int) and stopping_point == 37, \"Convert '37' to an integer\"\nprint(f\"After person {stopping_point}, we'll get serious about finding the best possible partner.\")\n\n\n\n\n\n\n\nTip\n\n\n\nWhen converting strings to numbers: - Make sure the string contains only numeric characters - Use int() for whole numbers - Use float() if you need decimal points",
    "crumbs": [
      "01 Optimal Stopping",
      "01 - Variables"
    ]
  },
  {
    "objectID": "part-01/tutorial-01-variables.html#exercise-4.1---profile-message",
    "href": "part-01/tutorial-01-variables.html#exercise-4.1---profile-message",
    "title": "Tutorial I.I - Variables and Types",
    "section": "Exercise 4.1 - Profile Message",
    "text": "Exercise 4.1 - Profile Message\nWe have already defined the variables name and minimum_rating. Now we want to use them in the context of a formatted string. You have already seen how to do this in the previous cells, but not explicitly. String formatting is a powerful tool in Python that allows you to insert variables into strings. We do so by using curly braces {} around the variable names and with the f prefix before the string. For example:\n\nf\"Hello, {name}! Nice to meet you.\"\n\nHere, {name} will insert the value of name into the string if the variable name is defined.\nCreate a formatted string profile_message using the variables name and minimum_rating that says “Looking for {name} (must be at least {minimum_rating}/10)”.\n\n# YOUR CODE BELOW\n\n\n# Test your answer\nassert profile_message == \"Looking for Casey (must be at least 7.0/10)\", \"Format your dating profile message correctly!\"\nprint(\"Your dating profile is ready!\")",
    "crumbs": [
      "01 Optimal Stopping",
      "01 - Variables"
    ]
  }
]