[
  {
    "objectID": "part-01/tutorial-03-stopping.html",
    "href": "part-01/tutorial-03-stopping.html",
    "title": "Tutorial I.III - Making Decisions",
    "section": "",
    "text": "Imagine you’re searching for a new apartment. You view a flat - should you take it or keep looking for something better? This is another classic optimal stopping problem! Just like in dating or hiring, you need to decide when to stop searching.\nIn this tutorial, we’ll learn how computers make decisions using if and else statements. These are like the “if this, then that” decisions we make every day!",
    "crumbs": [
      "01 Optimal Stopping",
      "03 - Decisions"
    ]
  },
  {
    "objectID": "part-01/tutorial-03-stopping.html#exercise-1.1---your-first-decision",
    "href": "part-01/tutorial-03-stopping.html#exercise-1.1---your-first-decision",
    "title": "Tutorial I.III - Making Decisions",
    "section": "Exercise 1.1 - Your First Decision",
    "text": "Exercise 1.1 - Your First Decision\nCreate an if statement that prints “Perfect flat!” if the flat_rating is 10.\n\nflat_rating = 10\n# YOUR CODE BELOW\n\n# Test your answer yourself - the cell should print \"Perfect flat!\" if executed correctly",
    "crumbs": [
      "01 Optimal Stopping",
      "03 - Decisions"
    ]
  },
  {
    "objectID": "part-01/tutorial-03-stopping.html#exercise-2.1---complete-decision",
    "href": "part-01/tutorial-03-stopping.html#exercise-2.1---complete-decision",
    "title": "Tutorial I.III - Making Decisions",
    "section": "Exercise 2.1 - Complete Decision",
    "text": "Exercise 2.1 - Complete Decision\nWrite an if-else statement that sets decision to “Apply now” if flat_rating is at least 7, and “Keep searching” otherwise.\n\nflat_rating = 6\ndecision = \"\"\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert decision == \"Keep searching\", \"The decision should be 'Keep searching' as the flat rating is less than 7\"\nprint(f\"Decision: {decision} as the flat rating is {flat_rating}\")\n\n\n\n\n\n\n\n\nTip\n\n\n\nWriting Better If-Else Statements:\n\nKeep your conditions simple and readable\nUse meaningful variable names\nConsider what should happen in both cases\nTest both paths to make sure they work",
    "crumbs": [
      "01 Optimal Stopping",
      "03 - Decisions"
    ]
  },
  {
    "objectID": "part-01/tutorial-03-stopping.html#exercise-3.1---apartment-categories",
    "href": "part-01/tutorial-03-stopping.html#exercise-3.1---apartment-categories",
    "title": "Tutorial I.III - Making Decisions",
    "section": "Exercise 3.1 - Apartment Categories",
    "text": "Exercise 3.1 - Apartment Categories\nCreate a variable flat_category that is:\n\n“Luxury” if rating is 9 or 10\n“Premium” if rating is 7 or 8\n“Standard” if rating is 5 or 6\n“Basic” for anything lower\n\n\nflat_rating = 8\nflat_category = \"\"\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert flat_category == \"Premium\", \"The flat category should be 'Premium' as the flat rating is 8\"\nprint(f\"Flat Category: {flat_category} as the flat rating is {flat_rating}\")",
    "crumbs": [
      "01 Optimal Stopping",
      "03 - Decisions"
    ]
  },
  {
    "objectID": "part-01/tutorial-03-stopping.html#exercise-4.1---real-world-flat-hunting",
    "href": "part-01/tutorial-03-stopping.html#exercise-4.1---real-world-flat-hunting",
    "title": "Tutorial I.III - Making Decisions",
    "section": "Exercise 4.1 - Real World Flat Hunting",
    "text": "Exercise 4.1 - Real World Flat Hunting\nCreate a variable should_apply that is True if:\n\nThe flat rating is at least 8, OR\nThe flat rating is at least 6 AND we’ve been searching for 3 weeks or more\n\n\nflat_rating = 6\nweeks_searching = 4\nshould_apply = False\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert should_apply == True, \"The flat rating is 6 and we've been searching for 4 weeks, so we should apply\"\nprint(f\"Should we apply? {should_apply} as the flat rating is {flat_rating} and we've been searching for {weeks_searching} weeks\")",
    "crumbs": [
      "01 Optimal Stopping",
      "03 - Decisions"
    ]
  },
  {
    "objectID": "part-01/tutorial-03-stopping.html#exercise-5.1---implement-the-rule",
    "href": "part-01/tutorial-03-stopping.html#exercise-5.1---implement-the-rule",
    "title": "Tutorial I.III - Making Decisions",
    "section": "Exercise 5.1 - Implement the Rule",
    "text": "Exercise 5.1 - Implement the Rule\nAdjust the code below to change the variable make_application to True if:\n\nWe’ve seen at least 37% of available flats (use 15 total flats), AND\nThe current flat is better than the best we’ve seen so far\n\n\nflats_seen = 6  # We've seen 6 flats\ntotal_viewings = 15  # We plan to view 15 flats in total\ncurrent_rating = 9\nbest_rating_so_far = 8\nmake_application = False\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert make_application == True, \"The flat rating is 9 and we've been searching for 4 weeks, so we should apply\"\nprint(f\"Should we apply for this flat? {make_application}\")",
    "crumbs": [
      "01 Optimal Stopping",
      "03 - Decisions"
    ]
  },
  {
    "objectID": "part-01/tutorial-01-variables.html",
    "href": "part-01/tutorial-01-variables.html",
    "title": "Tutorial I.I - Variables and Types",
    "section": "",
    "text": "Welcome to this interactive Python tutorial on variables, types, and algorithmic thinking! We’ll explore these concepts through the lens of optimization problems, specifically using the famous “Secretary Problem” as our running example.\nThe Secretary Problem asks: “If you need to hire the best candidate, and you can only interview candidates one at a time (with no going back), when should you stop and make an offer?” This is a perfect example of optimal stopping and will help us understand how variables and data types play crucial roles in algorithmic thinking. To make the problem more interesting, we will use the Secretary Problem to help us make better dating decisions!\nThe question is thus: When should you stop dating and commit to someone?\nKnown academically as the “Optimal Stopping Problem” or “The Marriage Problem”, it asks: If you want to find the best possible partner, and you can only date one person at a time (no going back to previous dates!), when should you stop dating and propose?\nLet’s learn how to use Python to help us in order to make better dating decisions!",
    "crumbs": [
      "01 Optimal Stopping",
      "01 - Variables"
    ]
  },
  {
    "objectID": "part-01/tutorial-01-variables.html#exercise-1.1---first-date-setup",
    "href": "part-01/tutorial-01-variables.html#exercise-1.1---first-date-setup",
    "title": "Tutorial I.I - Variables and Types",
    "section": "Exercise 1.1 - First Date Setup",
    "text": "Exercise 1.1 - First Date Setup\nCreate a variable currently_dating and set it to False (because we’re starting our dating journey).\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert currently_dating == False, \"Let's start fresh - set currently_dating to False!\"\nprint(\"Ready to start dating! We have defined the variable `currently_dating` as boolean.\")",
    "crumbs": [
      "01 Optimal Stopping",
      "01 - Variables"
    ]
  },
  {
    "objectID": "part-01/tutorial-01-variables.html#exercise-1.2---date-name",
    "href": "part-01/tutorial-01-variables.html#exercise-1.2---date-name",
    "title": "Tutorial I.I - Variables and Types",
    "section": "Exercise 1.2 - Date Name",
    "text": "Exercise 1.2 - Date Name\nCreate a variable date_name with your tonight’s date’s name (let’s say \"Mika\").\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert date_name == \"Mika\", \"Let's use 'Mika' as our tonight's date's name\"\nprint(f\"We have defined a string variable for our tonight's date. Now, we are looking for {date_name}!\")",
    "crumbs": [
      "01 Optimal Stopping",
      "01 - Variables"
    ]
  },
  {
    "objectID": "part-01/tutorial-01-variables.html#exercise-2.1---dating-score",
    "href": "part-01/tutorial-01-variables.html#exercise-2.1---dating-score",
    "title": "Tutorial I.I - Variables and Types",
    "section": "Exercise 2.1 - Dating Score",
    "text": "Exercise 2.1 - Dating Score\nCreate a float variable minimum_rating and set it to 7.0 (our standards are high!). Of course, we don’t objectify people and rate their appearance, thus we rate the compatibility!\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert minimum_rating == 7.0 and isinstance(minimum_rating, float), \"Set your standards (minimum_rating) to 7.0!\"\nprint(f\"We won't settle for less than {minimum_rating}/10, where the minimum rating is defined as a float!\")",
    "crumbs": [
      "01 Optimal Stopping",
      "01 - Variables"
    ]
  },
  {
    "objectID": "part-01/tutorial-01-variables.html#exercise-2.2---dating-history",
    "href": "part-01/tutorial-01-variables.html#exercise-2.2---dating-history",
    "title": "Tutorial I.I - Variables and Types",
    "section": "Exercise 2.2 - Dating History",
    "text": "Exercise 2.2 - Dating History\nCreate an integer variable past_relationships and set it to 0.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert past_relationships == 0 and isinstance(past_relationships, int), \"Let's start fresh with 0 past relationships\"\nprint(\"Clean slate, although likely not true! We have defined the variable `past_relationships` as an integer and are ready to start dating!\")",
    "crumbs": [
      "01 Optimal Stopping",
      "01 - Variables"
    ]
  },
  {
    "objectID": "part-01/tutorial-01-variables.html#exercise-3.1---decision-point",
    "href": "part-01/tutorial-01-variables.html#exercise-3.1---decision-point",
    "title": "Tutorial I.I - Variables and Types",
    "section": "Exercise 3.1 - Decision Point",
    "text": "Exercise 3.1 - Decision Point\nConvert the string \"37\" into an integer variable named stopping_point.\n\nstopping_point = \"37\"\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert isinstance(stopping_point, int) and stopping_point == 37, \"Convert '37' to an integer\"\nprint(f\"After person {stopping_point}, we'll get serious about finding the best possible partner.\")\n\n\n\n\n\n\n\n\nTip\n\n\n\nWhen converting strings to numbers: - Make sure the string contains only numeric characters - Use int() for whole numbers - Use float() if you need decimal points",
    "crumbs": [
      "01 Optimal Stopping",
      "01 - Variables"
    ]
  },
  {
    "objectID": "part-01/tutorial-01-variables.html#exercise-4.1---profile-message",
    "href": "part-01/tutorial-01-variables.html#exercise-4.1---profile-message",
    "title": "Tutorial I.I - Variables and Types",
    "section": "Exercise 4.1 - Profile Message",
    "text": "Exercise 4.1 - Profile Message\nWe have already defined the variables name and minimum_rating. Now we want to use them in the context of a formatted string. You have already seen how to do this in the previous cells, but not explicitly. String formatting is a powerful tool in Python that allows you to insert variables into strings. We do so by using curly braces {} around the variable names and with the f prefix before the string. For example:\n\nf\"Hello, {name}! Nice to meet you.\"\n\n'Hello, Casey! Nice to meet you.'\n\n\nHere, {name} will insert the value of name into the string if the variable name is defined.\nCreate a formatted string profile_message using the variables name and minimum_rating that says “Hello, {name}! Nice to meet you. I hope you are at least {minimum_rating}/10 compatible with me!”.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert profile_message == \"Hello, Casey! Nice to meet you. I hope you are at least 7.0/10 compatible with me!\", \"Format your first message to Casey correctly!\"\nprint(\"Your message is send - good luck!\")",
    "crumbs": [
      "01 Optimal Stopping",
      "01 - Variables"
    ]
  },
  {
    "objectID": "general/syllabus.html",
    "href": "general/syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Lectures\nIn our lectures, we mostly refrain from showing you any code. Instead, we will focus on explaining the concepts and how they can be used to solve problems. The tutorials will then show you step-by-step how to implement the concepts in Python.\nWe were rather ambitious in the design of the course in the course module, thus we will not be able to cover all topics there. However, we have chosen the most important topics from our perspective that will lay a good foundation for interested students to continue learning on their own.\nWelcome and Optimal Stopping (I)\n\nOverview of the course and its objectives\nIntroduction to algorithmic thinking\nOptimal Stopping\nProgramming: First Steps in Python\n\nExplore & Exploit (II)\n\nMulti-armed Bandit Problem\nBalancing exploration and exploitation\nProgramming: Simulating the Multi-armed Bandit Problem\n\nCaching (III)\n\nPrinciples of caching and memory management\nLeast Recently Used (LRU) and other caching strategies\nProgramming: Implementing an LRU cache\n\nScheduling (IV)\n\nTask scheduling algorithms\nTrade-offs between efficiency and fairness\nProgramming: Implementing scheduling algorithms\n\nRandomness (V)\n\nRole of randomness in algorithms\nMonte Carlo methods and their applications\nProgramming: Monte Carlo simulation\n\nComputational Kindness (VI)\n\nAlgorithms for social good\nEthical considerations in algorithm design\nQuick review of key concepts\nBrief student presentations\nOpen discussion and Q&A",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "general/faq.html",
    "href": "general/faq.html",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "If you have a question that is not answered here, please let me know by sending me an e-mail to vlcek@beyondsimulations.com or by creating an issue on GitHub.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#unanswered-questions",
    "href": "general/faq.html#unanswered-questions",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "If you have a question that is not answered here, please let me know by sending me an e-mail to vlcek@beyondsimulations.com or by creating an issue on GitHub.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#contribution-and-mistakes",
    "href": "general/faq.html#contribution-and-mistakes",
    "title": "Frequently Asked Questions",
    "section": "Contribution and Mistakes",
    "text": "Contribution and Mistakes\nIf you have found a mistake in the course material or if you have any suggestion on how to improve the course, please let us know in the following form or by creating an issue on GitHub.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#faqs",
    "href": "general/faq.html#faqs",
    "title": "Frequently Asked Questions",
    "section": "FAQs",
    "text": "FAQs\nSo far, we haven’t received any questions.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Programming: Everyday Decision-Making Algorithms",
    "section": "",
    "text": "Course Description\nThis course explores the intersection of computer science and everyday life by examining how algorithms can be applied to improve decision-making in various contexts. Based on the book “Algorithms to Live By” by Brian Christian and Tom Griffiths, the course will cover topics such as optimal stopping, scheduling, caching, and game theory, providing both theoretical foundations and practical programming exercises. The course consists of lectures and exercises.\n\n\nLearning Outcomes\nOur broad goal is to equip students with the ability to get to grips with algorithmic thinking. We want to enable students, to indepently apply methods and concepts from algorithms to solve their everyday practical problems while also providing a brief introduction into programming with python.\nUpon completion of the course, students will:\n\nunderstand fundamental algorithms and their applications to everyday problems\ndevelop the ability to model real-world scenarios using algorithmic thinking\nimplement simple algorithms in python to solve practical problems\nanalyze the efficiency and effectiveness of different algorithms in various contexts\n\nPlease note that this course is specifically designed for business students. That is, it is not required to have any advanced knowledge or experience in programming to attend this course. The teaching format will make it possible to account for different levels of programming skills such that every student can take the most out of the course.\n\n\nCourse Structure\nThe course is based on a hands-on approach with a two-fold structure:\n\nLectures: In the lectures, we will introduce and discuss concepts and illustrate them in reproducible examples.\nHands-on Tutorials: Students will apply the concepts from the lecture in jupyter notebooks, while simultaneously learning the basics of python.\n\nThe course is not graded and can only be passed/failed. The evaluation of the course will be based on the following components:\n\nAttendence: Students are expected to attend at least 75% of the lectures.\nAssignments: Students will have to hand in the assignments from 2 out of the 5 tutorials in this course. All are due by the end of the quarter, but earlier submissions of the assignments are highly encouraged. At least 50% of the solutions of the assignment must be correct.\nPresentation: Students will give a short presentation in groups of up to 3 students on their main findings and the application of the learned concepts of the course in the last lecture which are then discussed with the rest of the class.\n\nYou can find more information on the course contents in the syllabus.\n\n\nHow to see the slides\n\nThis course is based on Quarto\nIt uses revealjs to render the slides\nYou find the slides for each lecture in the corresponding lecture\nTo see the slides, click on RevealJS in the top right corner\n\n\n\nQuestions\nIf you have any questions regarding the course, please contact me under vlcek@beyondsimulations.com.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "general/literature.html",
    "href": "general/literature.html",
    "title": "Literature and Resources",
    "section": "",
    "text": "This section provides a curated list of books and resources to enhance your understanding of algorithmic thinking and programming. Each recommendation includes a brief description to help you choose the most suitable resources for you.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#books",
    "href": "general/literature.html#books",
    "title": "Literature and Resources",
    "section": "Books",
    "text": "Books\n\nChristian, B., & Griffiths, T. (2016). Algorithms to live by: the computer science of human decisions. First international edition. New York, Henry Holt and Company.\n\nA book that inspired this lecture and will give you a good intuition for the principles of algorithmic thinking and how they can be applied to solve problems in everyday life.\n\nZingaro, D. (2024) Algorithmic thinking, 2nd edition: Unlock your programming potential. AU: No Starch Press.\n\nA book that introduces you to different algorithms and their reasoning. Written without any pseudocode, but with a lot of examples and explanations.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#books-1",
    "href": "general/literature.html#books-1",
    "title": "Literature and Resources",
    "section": "Books",
    "text": "Books\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly.\n\nA great book to start with if you have no experience with programming.\nLink to free online book\n\nVanderPlas, J. (2016). A whirlwind tour of Python (August 2016, First edition). O’Reilly Media Inc.\n\nA very good and short book to get a quick overview of the most important features of Python if you already have some experience with programming.\nLink to the free online version\n\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\nA book that is unfortunately only available in German, but a very good and comedic start for beginners with lots of illustrations, examples and exercises. It is only available in print.\n\nMatthes, E. (2023). Python crash course: A hands-on, project-based introduction to programming (3rd edition). No Starch Press.\n\nA great book to learn Python with a hands-on approach. Highly recommended even for beginners but only available to buy.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#resources",
    "href": "general/literature.html#resources",
    "title": "Literature and Resources",
    "section": "Resources",
    "text": "Resources\n\nDaily Dose of Data Science\n\nA website and a newsletter with lots of easy-to-digest resources to improve your skills in Data Science.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#books-2",
    "href": "general/literature.html#books-2",
    "title": "Literature and Resources",
    "section": "Books",
    "text": "Books\n\nWilke, C. (2019). Fundamentals of data visualization: A primer on making informative and compelling figures (First edition). O’Reilly Media.\n\nA book that is highly recommended to understand the principles of data visualization and how to create effective visualizations.\nLink to the free book website\n\nThomas, D., & Hunt, A. (2019). The pragmatic programmer, 20th anniversary edition: Journey to mastery (Second edition). Addison-Wesley.\n\nA fantasticbook to understand the principles of software development and how to create effective software.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#resources-1",
    "href": "general/literature.html#resources-1",
    "title": "Literature and Resources",
    "section": "Resources",
    "text": "Resources\n\nQuarto\n\nA static website generator that is very powerful and flexible. Used to create the slides and the website for the course.\n\nCursor\n\nA code editor based on VS Code that is very powerful and flexible. It uses AI to help you write code.\n\nJupyter\n\nA web application that allows you to create and share documents that contain code, equations, visualizations and text. It is very popular in the field of data science and academia and also part of Quarto.\n\nAdvent of Code\n\nA wonderful website with daily challenges during the christmas time. Highly recommended to playfully improve your skills.\n\nTiny Python Projects\n\nInteresting and fun projects to programm in order to improve your programming skills.\n\nGithub\n\nThe largest provider for git repositories owned by Microsoft. A lot of open source projects are hosted here and you can read the code.\n\nCodewars\n\nA platform to improve your coding skills by solving challenges. You can compete with others, see how other people solved the challenges and read and learn from the code.\n\nCheat-Sheets\n\nFantastic resource with cheat sheets for the book “Python Crash Course” by Eric Matthes. You can use these to quickly look up syntax and functions.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html",
    "href": "part-01/lecture-optimal-stopping.html",
    "title": "Lecture I - Optimal Stopping",
    "section": "",
    "text": "Dr. Tobias Vlcek\n\n\n\n\n\n\n\nDr. Nils Roemer\n\n\n\n\n\n\n\n\n\n\nField: Optimizing and simulating complex systems\nLanguages: of choice: Julia, Python and Rust\nInterest: Modelling, Simulations, Machine Learning\nTeaching: OR, Algorithms, and Programming\nContact: vlcek@beyondsimulations.com\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nWe really appreciate active participation and interaction!\n\n\n\n\n\n\nI: Optimal Stopping\nII: Explore & Exploit\nIII: Caching\nIV: Scheduling\nV: Randomness\nVI: Computational Kindness\n\n\n\n\n\nTry actively participating in this course\nYou will find it much (!) easier and more fun\nMaterial and slides are hosted here: beyondsimulations.github.io/Programming-Everyday-Decisions\n\n\n\n\n\nLecture: Presentation and discussion of algorithms related to everyday decision-making\nTutorial: Step-by-step assignments to be solved and discussed together in groups\nDifficulty: Strongly depends on your background and programming experience\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nNo worries, we will help you out if you have any questions!\n\n\n\n\n\n\nPass/fail course without exams\n75% attendance required for passing the course\nHand in the assignments of at least two lectures\nShort presentation and discussion at the end\nYou work together in groups of three students\n\n\n\n\n\nEach student group submits one solution\nProvide us all working notebooks of the lecture\nHand in is due at the beginning of the next lecture\nAt least 50 % have to be correct to pass\nYou have to pass at least twice\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nThis is just in order to provide you with working solutions after each deadline.\n\n\n\n\n\nWe will mostly not cover Python during the lectures!\n. . .\nQuestion: Anybody know why?\n. . .\n\nIn our experience, the best way to learn is by doing!\nHere, we will focus on decision-making algorithms\nYou will learn Python by doing the tutorials\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nDon’t worry, we will help you out if you have any questions!\n\n\n\n\n\n\nAt first it might be a little bit overwhelming\nProgramming is similar to learning a new language\nFirst, you have to get used to it and learn words\nLater, you’ll be able to apply it and see results\nImportant: Practice, practice, practice!\n\n\n\n\n\nLearn the basics of programming\nLearn about algorithmic thinking\nBe able to apply methods and concepts\nSolve practical problems with algorithms\n\n\n\n\n\n\n\nTip\n\n\n\nWe are convinced that this course will be quite interesting and teach you more for your daily life than most other courses!\n\n\n\n\n\n\nOrigins: Conceived in late 1980s as a teaching and scripting language\nSimple Syntax: Python’s syntax is mostly straightforward and very easy to learn\nVersatility: Used in web development, data analysis, artificial intelligence, and more\nCommunity Support: A large community of users worldwide and extensive documentation\n\n\n\n\n\nYou are allowed to use AI in the course, we use it as well (e.g., Claude, ChatGPT, LLama3 …)\nThese tools are great for learning Python!\nCan help you a lot to get started with programming\n\n. . .\n\n\n\n\n\n\nWarning\n\n\n\nBut you should not simply use them to replace your learning.",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#teaching-team",
    "href": "part-01/lecture-optimal-stopping.html#teaching-team",
    "title": "Lecture I - Optimal Stopping",
    "section": "",
    "text": "Dr. Tobias Vlcek\n\n\n\n\n\n\n\nDr. Nils Roemer",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#about-me",
    "href": "part-01/lecture-optimal-stopping.html#about-me",
    "title": "Lecture I - Optimal Stopping",
    "section": "",
    "text": "Field: Optimizing and simulating complex systems\nLanguages: of choice: Julia, Python and Rust\nInterest: Modelling, Simulations, Machine Learning\nTeaching: OR, Algorithms, and Programming\nContact: vlcek@beyondsimulations.com\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nWe really appreciate active participation and interaction!",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#course-outline",
    "href": "part-01/lecture-optimal-stopping.html#course-outline",
    "title": "Lecture I - Optimal Stopping",
    "section": "",
    "text": "I: Optimal Stopping\nII: Explore & Exploit\nIII: Caching\nIV: Scheduling\nV: Randomness\nVI: Computational Kindness",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#participation",
    "href": "part-01/lecture-optimal-stopping.html#participation",
    "title": "Lecture I - Optimal Stopping",
    "section": "",
    "text": "Try actively participating in this course\nYou will find it much (!) easier and more fun\nMaterial and slides are hosted here: beyondsimulations.github.io/Programming-Everyday-Decisions",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#teaching",
    "href": "part-01/lecture-optimal-stopping.html#teaching",
    "title": "Lecture I - Optimal Stopping",
    "section": "",
    "text": "Lecture: Presentation and discussion of algorithms related to everyday decision-making\nTutorial: Step-by-step assignments to be solved and discussed together in groups\nDifficulty: Strongly depends on your background and programming experience\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nNo worries, we will help you out if you have any questions!",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#passing-the-course",
    "href": "part-01/lecture-optimal-stopping.html#passing-the-course",
    "title": "Lecture I - Optimal Stopping",
    "section": "",
    "text": "Pass/fail course without exams\n75% attendance required for passing the course\nHand in the assignments of at least two lectures\nShort presentation and discussion at the end\nYou work together in groups of three students",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#handing-in-assignments",
    "href": "part-01/lecture-optimal-stopping.html#handing-in-assignments",
    "title": "Lecture I - Optimal Stopping",
    "section": "",
    "text": "Each student group submits one solution\nProvide us all working notebooks of the lecture\nHand in is due at the beginning of the next lecture\nAt least 50 % have to be correct to pass\nYou have to pass at least twice\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nThis is just in order to provide you with working solutions after each deadline.",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#learning-python",
    "href": "part-01/lecture-optimal-stopping.html#learning-python",
    "title": "Lecture I - Optimal Stopping",
    "section": "",
    "text": "We will mostly not cover Python during the lectures!\n. . .\nQuestion: Anybody know why?\n. . .\n\nIn our experience, the best way to learn is by doing!\nHere, we will focus on decision-making algorithms\nYou will learn Python by doing the tutorials\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nDon’t worry, we will help you out if you have any questions!",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#difficulty-of-the-course",
    "href": "part-01/lecture-optimal-stopping.html#difficulty-of-the-course",
    "title": "Lecture I - Optimal Stopping",
    "section": "",
    "text": "At first it might be a little bit overwhelming\nProgramming is similar to learning a new language\nFirst, you have to get used to it and learn words\nLater, you’ll be able to apply it and see results\nImportant: Practice, practice, practice!",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#goals-of-the-course",
    "href": "part-01/lecture-optimal-stopping.html#goals-of-the-course",
    "title": "Lecture I - Optimal Stopping",
    "section": "",
    "text": "Learn the basics of programming\nLearn about algorithmic thinking\nBe able to apply methods and concepts\nSolve practical problems with algorithms\n\n\n\n\n\n\n\nTip\n\n\n\nWe are convinced that this course will be quite interesting and teach you more for your daily life than most other courses!",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#why-python",
    "href": "part-01/lecture-optimal-stopping.html#why-python",
    "title": "Lecture I - Optimal Stopping",
    "section": "",
    "text": "Origins: Conceived in late 1980s as a teaching and scripting language\nSimple Syntax: Python’s syntax is mostly straightforward and very easy to learn\nVersatility: Used in web development, data analysis, artificial intelligence, and more\nCommunity Support: A large community of users worldwide and extensive documentation",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#help-from-ai",
    "href": "part-01/lecture-optimal-stopping.html#help-from-ai",
    "title": "Lecture I - Optimal Stopping",
    "section": "",
    "text": "You are allowed to use AI in the course, we use it as well (e.g., Claude, ChatGPT, LLama3 …)\nThese tools are great for learning Python!\nCan help you a lot to get started with programming\n\n. . .\n\n\n\n\n\n\nWarning\n\n\n\nBut you should not simply use them to replace your learning.",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#our-recommendation",
    "href": "part-01/lecture-optimal-stopping.html#our-recommendation",
    "title": "Lecture I - Optimal Stopping",
    "section": "Our Recommendation",
    "text": "Our Recommendation\n\nBe present: Attend the lecture and solve the tutorials\nPut in some work: Repeat code and try to understand it\nDo coding: Run code, play around, modify, and solve\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nGreat resources to start are books and small challenges. You can find a list of book recommendations at the end of the lecture. Small challenges to solve can for example be found on Codewars.",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#dont-give-up",
    "href": "part-01/lecture-optimal-stopping.html#dont-give-up",
    "title": "Lecture I - Optimal Stopping",
    "section": "Don’t give up!",
    "text": "Don’t give up!\n\nProgramming is problem solving, don’t get frustrated!\nExpect to stretch your comfort zone",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#the-setup",
    "href": "part-01/lecture-optimal-stopping.html#the-setup",
    "title": "Lecture I - Optimal Stopping",
    "section": "The Setup",
    "text": "The Setup\n\nWe will use Jupyter Notebooks for the tutorials\nAllow to combine code and text in one document\nWe will use Visual Studio Code as an IDE\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nIDE = Integrated Development Environment",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#install-python",
    "href": "part-01/lecture-optimal-stopping.html#install-python",
    "title": "Lecture I - Optimal Stopping",
    "section": "Install Python",
    "text": "Install Python\n\nSources are the Python website or Anaconda\nOn macOS, Python is often already installed\nIf not, I recommend Miniconda (via command line)\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nIf the installation does not work, let us know!",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#install-vs-code",
    "href": "part-01/lecture-optimal-stopping.html#install-vs-code",
    "title": "Lecture I - Optimal Stopping",
    "section": "Install VS Code",
    "text": "Install VS Code\n\nDownload and install from the website\nBuilt for Windows, Linux and Mac\nInstall the Python and Jupyter extension\nNow you are ready to go!\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nUnsure on how to work with VS Code and notebooks? Take a look at the tutorial from VS Code and/or ask us! We are happy to help you out!",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#python-on-ipads",
    "href": "part-01/lecture-optimal-stopping.html#python-on-ipads",
    "title": "Lecture I - Optimal Stopping",
    "section": "Python on iPads",
    "text": "Python on iPads\n\nYou can run Python scripts on your iPad\nBut it is not recommended for the course\nHowever, you could use Juno if you want to\nIt works locally on your iPad and can run notebooks\n\n. . .\n\n\n\n\n\n\nCaution\n\n\n\nNot all packages available in Python are available here, thus you might need a computer to solve certain problems. For our course, this should not be a problem.",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#hello-world",
    "href": "part-01/lecture-optimal-stopping.html#hello-world",
    "title": "Lecture I - Optimal Stopping",
    "section": "Hello, World!",
    "text": "Hello, World!\nTask: Create a directory for the course and create a new file called hello_world.py with the following code:\n\n# This is a comment in Python\nprint(\"Hello, World!\")\n\nHello, World!\n\n\n. . .\nRun it with the green ‘run’ button or by pressing F5!\n. . .\n\n\n\n\n\n\nNote\n\n\n\n“Hello world” is a classic example to start with. Often used as a test to check if your computer is working properly and that you have installed the necessary software.",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#section",
    "href": "part-01/lecture-optimal-stopping.html#section",
    "title": "Lecture I - Optimal Stopping",
    "section": "",
    "text": "Any questions\nso far?",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#what-is-optimal-stopping",
    "href": "part-01/lecture-optimal-stopping.html#what-is-optimal-stopping",
    "title": "Lecture I - Optimal Stopping",
    "section": "What is Optimal Stopping?",
    "text": "What is Optimal Stopping?\nQuestion: Anybody know what optimal stopping is?\n\n\nOptimal stopping is the problem of:\n\nchoosing the best option\nfrom a sequence of options\nwhere the options are revealed one by one\n\n\n\n. . .\nQuestion: Anybody have an example of optimal stopping?",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#flat-hunting",
    "href": "part-01/lecture-optimal-stopping.html#flat-hunting",
    "title": "Lecture I - Optimal Stopping",
    "section": "Flat Hunting",
    "text": "Flat Hunting\n\nPhoto by Aditya Ghosh on Unsplash",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#hiring-applicants",
    "href": "part-01/lecture-optimal-stopping.html#hiring-applicants",
    "title": "Lecture I - Optimal Stopping",
    "section": "Hiring applicants",
    "text": "Hiring applicants\n\nPhoto by Scott Graham on Unsplash",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#dating",
    "href": "part-01/lecture-optimal-stopping.html#dating",
    "title": "Lecture I - Optimal Stopping",
    "section": "Dating",
    "text": "Dating\n\nPhoto by Shelby Deeter on Unsplash",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#searching-for-a-parking-spot",
    "href": "part-01/lecture-optimal-stopping.html#searching-for-a-parking-spot",
    "title": "Lecture I - Optimal Stopping",
    "section": "Searching for a parking spot",
    "text": "Searching for a parking spot\n\nPhoto by Joseph Pearson on Unsplash",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#the-secretary-problem",
    "href": "part-01/lecture-optimal-stopping.html#the-secretary-problem",
    "title": "Lecture I - Optimal Stopping",
    "section": "The Secretary Problem",
    "text": "The Secretary Problem\n\n\nImagine you’re hiring a secretary\nYou must interview candidates one by one\nNow, you must decide: hire or continue searching\nOnce you reject a candidate, you cannot go back\nHow to maximize chance of selecting the best candidate?\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nThe name is a bit misleading, as the problem is not about hiring a secretary, but about finding the best candidate. It comes from the 1960s and thus a little outdated.",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#section-1",
    "href": "part-01/lecture-optimal-stopping.html#section-1",
    "title": "Lecture I - Optimal Stopping",
    "section": "",
    "text": "Ideas?",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#the-37-rule",
    "href": "part-01/lecture-optimal-stopping.html#the-37-rule",
    "title": "Lecture I - Optimal Stopping",
    "section": "The 37% Rule",
    "text": "The 37% Rule\nThe optimal strategy is to:\n\nLook at the first 37% of options\nRemember the best one seen so far\nChoose the next option that’s better than the best seen\n\n. . .\nDone - at least for this scenario!\n. . .\n\n\n\n\n\n\nNote\n\n\n\nChance of selecting the best candidate is 37%!",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#why-37",
    "href": "part-01/lecture-optimal-stopping.html#why-37",
    "title": "Lecture I - Optimal Stopping",
    "section": "Why 37%?",
    "text": "Why 37%?\n\nThis is based on the geometric distribution\nThe optimal stopping point is at n/e\ne is the base of the natural logarithm\nIt is the limit of (1 + 1/n)^n as n approaches infinity\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nThis is a bit more advanced, so don’t worry if you don’t understand it! We will not go into the details of the math here and focus more on the insights.",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#in-python",
    "href": "part-01/lecture-optimal-stopping.html#in-python",
    "title": "Lecture I - Optimal Stopping",
    "section": "In Python",
    "text": "In Python\nWe can check this in Python:\n\nimport math\n\npercentage = 1/math.e\nprint(f\"Percentage of options to look at: {percentage:.3f}%\")\n\ncandidates = 20\nlookout_phase = candidates/math.e\nprint(f\"Look at first {lookout_phase:.3f} candidates\")\n\nPercentage of options to look at: 0.368%\nLook at first 7.358 candidates\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nNo worries if you don’t understand the code! We are essentialy just using the formula to calculate the percentage of candidates to look at.",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#cost-of-searching",
    "href": "part-01/lecture-optimal-stopping.html#cost-of-searching",
    "title": "Lecture I - Optimal Stopping",
    "section": "Cost of Searching",
    "text": "Cost of Searching\n\nWhat if each additional search costs money?\nTrade-off between finding better options and search costs\nOptimal stopping point can change!",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#choose-past-candidates",
    "href": "part-01/lecture-optimal-stopping.html#choose-past-candidates",
    "title": "Lecture I - Optimal Stopping",
    "section": "Choose past candidates",
    "text": "Choose past candidates\n\nWhat if you could choose past candidates?\nTrade-off between choosing a candidate you like and continuing to search\nOptimal stopping point changes!",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#questions",
    "href": "part-01/lecture-optimal-stopping.html#questions",
    "title": "Lecture I - Optimal Stopping",
    "section": "Questions?",
    "text": "Questions?\n. . .\n\n\n\n\n\n\nNote\n\n\n\nThat’s it for todays lecture!\nWe now have covered a brief introduction into optimal stopping and seen how to set up Python.",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#interesting-books-to-start",
    "href": "part-01/lecture-optimal-stopping.html#interesting-books-to-start",
    "title": "Lecture I - Optimal Stopping",
    "section": "Interesting Books to start",
    "text": "Interesting Books to start\n\nChristian, B., & Griffiths, T. (2016). Algorithms to live by: the computer science of human decisions. First international edition. New York, Henry Holt and Company.\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nThe main inspiration for this lecture. Nils and I have read it and discussed it in depth, always wanting to translate it into a course.",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#books-on-programming",
    "href": "part-01/lecture-optimal-stopping.html#books-on-programming",
    "title": "Lecture I - Optimal Stopping",
    "section": "Books on Programming",
    "text": "Books on Programming\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Here\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nThink Python is a great book to start with. It’s available online for free. Schrödinger Programmiert Python is a great alternative for German students, as it is a very playful introduction to programming with lots of examples.",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-optimal-stopping.html#more-literature",
    "href": "part-01/lecture-optimal-stopping.html#more-literature",
    "title": "Lecture I - Optimal Stopping",
    "section": "More Literature",
    "text": "More Literature\nFor more interesting literature, take a look at the literature list of this course.",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "part-01/lecture-presentation.html#teaching-team",
    "href": "part-01/lecture-presentation.html#teaching-team",
    "title": "Lecture I - Optimal Stopping",
    "section": "Teaching Team",
    "text": "Teaching Team\n\n\n\n\n\n\n\n\n\nDr. Tobias Vlcek\n\n\n\n\n\n\n\nDr. Nils Roemer"
  },
  {
    "objectID": "part-01/lecture-presentation.html#about-me",
    "href": "part-01/lecture-presentation.html#about-me",
    "title": "Lecture I - Optimal Stopping",
    "section": "About me",
    "text": "About me\n\n\nField: Optimizing and simulating complex systems\nLanguages: of choice: Julia, Python and Rust\nInterest: Modelling, Simulations, Machine Learning\nTeaching: OR, Algorithms, and Programming\nContact: vlcek@beyondsimulations.com\n\n\n\n\n\n\n\n\n\nTip\n\n\nWe really appreciate active participation and interaction!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#course-outline",
    "href": "part-01/lecture-presentation.html#course-outline",
    "title": "Lecture I - Optimal Stopping",
    "section": "Course Outline",
    "text": "Course Outline\n\nI: Optimal Stopping\nII: Explore & Exploit\nIII: Caching\nIV: Scheduling\nV: Randomness\nVI: Computational Kindness"
  },
  {
    "objectID": "part-01/lecture-presentation.html#participation",
    "href": "part-01/lecture-presentation.html#participation",
    "title": "Lecture I - Optimal Stopping",
    "section": "Participation",
    "text": "Participation\n\nTry actively participating in this course\nYou will find it much (!) easier and more fun\nMaterial and slides are hosted here: beyondsimulations.github.io/Programming-Everyday-Decisions"
  },
  {
    "objectID": "part-01/lecture-presentation.html#teaching",
    "href": "part-01/lecture-presentation.html#teaching",
    "title": "Lecture I - Optimal Stopping",
    "section": "Teaching",
    "text": "Teaching\n\nLecture: Presentation and discussion of algorithms related to everyday decision-making\nTutorial: Step-by-step assignments to be solved and discussed together in groups\nDifficulty: Strongly depends on your background and programming experience\n\n\n\n\n\n\n\n\nTip\n\n\nNo worries, we will help you out if you have any questions!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#passing-the-course",
    "href": "part-01/lecture-presentation.html#passing-the-course",
    "title": "Lecture I - Optimal Stopping",
    "section": "Passing the Course",
    "text": "Passing the Course\n\nPass/fail course without exams\n75% attendance required for passing the course\nHand in the assignments of at least two lectures\nShort presentation and discussion at the end\nYou work together in groups of three students"
  },
  {
    "objectID": "part-01/lecture-presentation.html#handing-in-assignments",
    "href": "part-01/lecture-presentation.html#handing-in-assignments",
    "title": "Lecture I - Optimal Stopping",
    "section": "Handing in Assignments",
    "text": "Handing in Assignments\n\nEach student group submits one solution\nProvide us all working notebooks of the lecture\nHand in is due at the beginning of the next lecture\nAt least 50 % have to be correct to pass\nYou have to pass at least twice\n\n\n\n\n\n\n\n\nTip\n\n\nThis is just in order to provide you with working solutions after each deadline."
  },
  {
    "objectID": "part-01/lecture-presentation.html#learning-python",
    "href": "part-01/lecture-presentation.html#learning-python",
    "title": "Lecture I - Optimal Stopping",
    "section": "Learning Python",
    "text": "Learning Python\nWe will mostly not cover Python during the lectures!\n\nQuestion: Anybody know why?\n\n\n\nIn our experience, the best way to learn is by doing!\nHere, we will focus on decision-making algorithms\nYou will learn Python by doing the tutorials\n\n\n\n\n\n\n\n\n\nTip\n\n\nDon’t worry, we will help you out if you have any questions!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#difficulty-of-the-course",
    "href": "part-01/lecture-presentation.html#difficulty-of-the-course",
    "title": "Lecture I - Optimal Stopping",
    "section": "Difficulty of the Course",
    "text": "Difficulty of the Course\n\nAt first it might be a little bit overwhelming\nProgramming is similar to learning a new language\nFirst, you have to get used to it and learn words\nLater, you’ll be able to apply it and see results\nImportant: Practice, practice, practice!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#goals-of-the-course",
    "href": "part-01/lecture-presentation.html#goals-of-the-course",
    "title": "Lecture I - Optimal Stopping",
    "section": "Goals of the Course",
    "text": "Goals of the Course\n\nLearn the basics of programming\nLearn about algorithmic thinking\nBe able to apply methods and concepts\nSolve practical problems with algorithms\n\n\n\n\n\n\n\nTip\n\n\nWe are convinced that this course will be quite interesting and teach you more for your daily life than most other courses!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#why-python",
    "href": "part-01/lecture-presentation.html#why-python",
    "title": "Lecture I - Optimal Stopping",
    "section": "Why Python?",
    "text": "Why Python?\n\nOrigins: Conceived in late 1980s as a teaching and scripting language\nSimple Syntax: Python’s syntax is mostly straightforward and very easy to learn\nVersatility: Used in web development, data analysis, artificial intelligence, and more\nCommunity Support: A large community of users worldwide and extensive documentation"
  },
  {
    "objectID": "part-01/lecture-presentation.html#help-from-ai",
    "href": "part-01/lecture-presentation.html#help-from-ai",
    "title": "Lecture I - Optimal Stopping",
    "section": "Help from AI",
    "text": "Help from AI\n\nYou are allowed to use AI in the course, we use it as well (e.g., Claude, ChatGPT, LLama3 …)\nThese tools are great for learning Python!\nCan help you a lot to get started with programming\n\n\n\n\n\n\n\n\nWarning\n\n\nBut you should not simply use them to replace your learning."
  },
  {
    "objectID": "part-01/lecture-presentation.html#our-recommendation",
    "href": "part-01/lecture-presentation.html#our-recommendation",
    "title": "Lecture I - Optimal Stopping",
    "section": "Our Recommendation",
    "text": "Our Recommendation\n\nBe present: Attend the lecture and solve the tutorials\nPut in some work: Repeat code and try to understand it\nDo coding: Run code, play around, modify, and solve\n\n\n\n\n\n\n\n\nTip\n\n\nGreat resources to start are books and small challenges. You can find a list of book recommendations at the end of the lecture. Small challenges to solve can for example be found on Codewars."
  },
  {
    "objectID": "part-01/lecture-presentation.html#dont-give-up",
    "href": "part-01/lecture-presentation.html#dont-give-up",
    "title": "Lecture I - Optimal Stopping",
    "section": "Don’t give up!",
    "text": "Don’t give up!\n\nProgramming is problem solving, don’t get frustrated!\nExpect to stretch your comfort zone"
  },
  {
    "objectID": "part-01/lecture-presentation.html#the-setup",
    "href": "part-01/lecture-presentation.html#the-setup",
    "title": "Lecture I - Optimal Stopping",
    "section": "The Setup",
    "text": "The Setup\n\nWe will use Jupyter Notebooks for the tutorials\nAllow to combine code and text in one document\nWe will use Visual Studio Code as an IDE\n\n\n\n\n\n\n\n\nTip\n\n\nIDE = Integrated Development Environment"
  },
  {
    "objectID": "part-01/lecture-presentation.html#install-python",
    "href": "part-01/lecture-presentation.html#install-python",
    "title": "Lecture I - Optimal Stopping",
    "section": "Install Python",
    "text": "Install Python\n\nSources are the Python website or Anaconda\nOn macOS, Python is often already installed\nIf not, I recommend Miniconda (via command line)\n\n\n\n\n\n\n\n\nTip\n\n\nIf the installation does not work, let us know!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#install-vs-code",
    "href": "part-01/lecture-presentation.html#install-vs-code",
    "title": "Lecture I - Optimal Stopping",
    "section": "Install VS Code",
    "text": "Install VS Code\n\nDownload and install from the website\nBuilt for Windows, Linux and Mac\nInstall the Python and Jupyter extension\nNow you are ready to go!\n\n\n\n\n\n\n\n\nTip\n\n\nUnsure on how to work with VS Code and notebooks? Take a look at the tutorial from VS Code and/or ask us! We are happy to help you out!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#python-on-ipads",
    "href": "part-01/lecture-presentation.html#python-on-ipads",
    "title": "Lecture I - Optimal Stopping",
    "section": "Python on iPads",
    "text": "Python on iPads\n\nYou can run Python scripts on your iPad\nBut it is not recommended for the course\nHowever, you could use Juno if you want to\nIt works locally on your iPad and can run notebooks\n\n\n\n\n\n\n\n\nCaution\n\n\nNot all packages available in Python are available here, thus you might need a computer to solve certain problems. For our course, this should not be a problem."
  },
  {
    "objectID": "part-01/lecture-presentation.html#hello-world",
    "href": "part-01/lecture-presentation.html#hello-world",
    "title": "Lecture I - Optimal Stopping",
    "section": "Hello, World!",
    "text": "Hello, World!\nTask: Create a directory for the course and create a new file called hello_world.py with the following code:\n\n# This is a comment in Python\nprint(\"Hello, World!\")\n\n\n\nHello, World!\n\n\n\nRun it with the green ‘run’ button or by pressing F5!\n\n\n\n\n\n\n\n\nNote\n\n\n“Hello world” is a classic example to start with. Often used as a test to check if your computer is working properly and that you have installed the necessary software."
  },
  {
    "objectID": "part-01/lecture-presentation.html#section",
    "href": "part-01/lecture-presentation.html#section",
    "title": "Lecture I - Optimal Stopping",
    "section": "",
    "text": "Any questions\nso far?"
  },
  {
    "objectID": "part-01/lecture-presentation.html#what-is-optimal-stopping",
    "href": "part-01/lecture-presentation.html#what-is-optimal-stopping",
    "title": "Lecture I - Optimal Stopping",
    "section": "What is Optimal Stopping?",
    "text": "What is Optimal Stopping?\nQuestion: Anybody know what optimal stopping is?\n\n\nOptimal stopping is the problem of:\n\nchoosing the best option\nfrom a sequence of options\nwhere the options are revealed one by one\n\n\n\n\nQuestion: Anybody have an example of optimal stopping?"
  },
  {
    "objectID": "part-01/lecture-presentation.html#flat-hunting",
    "href": "part-01/lecture-presentation.html#flat-hunting",
    "title": "Lecture I - Optimal Stopping",
    "section": "Flat Hunting",
    "text": "Flat Hunting\n\nPhoto by Aditya Ghosh on Unsplash"
  },
  {
    "objectID": "part-01/lecture-presentation.html#hiring-applicants",
    "href": "part-01/lecture-presentation.html#hiring-applicants",
    "title": "Lecture I - Optimal Stopping",
    "section": "Hiring applicants",
    "text": "Hiring applicants\n\nPhoto by Scott Graham on Unsplash"
  },
  {
    "objectID": "part-01/lecture-presentation.html#dating",
    "href": "part-01/lecture-presentation.html#dating",
    "title": "Lecture I - Optimal Stopping",
    "section": "Dating",
    "text": "Dating\n\nPhoto by Shelby Deeter on Unsplash"
  },
  {
    "objectID": "part-01/lecture-presentation.html#searching-for-a-parking-spot",
    "href": "part-01/lecture-presentation.html#searching-for-a-parking-spot",
    "title": "Lecture I - Optimal Stopping",
    "section": "Searching for a parking spot",
    "text": "Searching for a parking spot\n\nPhoto by Joseph Pearson on Unsplash"
  },
  {
    "objectID": "part-01/lecture-presentation.html#the-secretary-problem",
    "href": "part-01/lecture-presentation.html#the-secretary-problem",
    "title": "Lecture I - Optimal Stopping",
    "section": "The Secretary Problem",
    "text": "The Secretary Problem\n\n\nImagine you’re hiring a secretary\nYou must interview candidates one by one\nNow, you must decide: hire or continue searching\nOnce you reject a candidate, you cannot go back\nHow to maximize chance of selecting the best candidate?\n\n\n\n\n\n\n\n\n\nNote\n\n\nThe name is a bit misleading, as the problem is not about hiring a secretary, but about finding the best candidate. It comes from the 1960s and thus a little outdated."
  },
  {
    "objectID": "part-01/lecture-presentation.html#section-1",
    "href": "part-01/lecture-presentation.html#section-1",
    "title": "Lecture I - Optimal Stopping",
    "section": "",
    "text": "Ideas?"
  },
  {
    "objectID": "part-01/lecture-presentation.html#the-37-rule",
    "href": "part-01/lecture-presentation.html#the-37-rule",
    "title": "Lecture I - Optimal Stopping",
    "section": "The 37% Rule",
    "text": "The 37% Rule\nThe optimal strategy is to:\n\nLook at the first 37% of options\nRemember the best one seen so far\nChoose the next option that’s better than the best seen\n\n\nDone - at least for this scenario!\n\n\n\n\n\n\n\n\nNote\n\n\nChance of selecting the best candidate is 37%!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#why-37",
    "href": "part-01/lecture-presentation.html#why-37",
    "title": "Lecture I - Optimal Stopping",
    "section": "Why 37%?",
    "text": "Why 37%?\n\nThis is based on the geometric distribution\nThe optimal stopping point is at n/e\ne is the base of the natural logarithm\nIt is the limit of (1 + 1/n)^n as n approaches infinity\n\n\n\n\n\n\n\n\nTip\n\n\nThis is a bit more advanced, so don’t worry if you don’t understand it! We will not go into the details of the math here and focus more on the insights."
  },
  {
    "objectID": "part-01/lecture-presentation.html#in-python",
    "href": "part-01/lecture-presentation.html#in-python",
    "title": "Lecture I - Optimal Stopping",
    "section": "In Python",
    "text": "In Python\nWe can check this in Python:\n\nimport math\n\npercentage = 1/math.e\nprint(f\"Percentage of options to look at: {percentage:.3f}%\")\n\ncandidates = 20\nlookout_phase = candidates/math.e\nprint(f\"Look at first {lookout_phase:.3f} candidates\")\n\n\n\nPercentage of options to look at: 0.368%\nLook at first 7.358 candidates\n\n\n\n\n\n\n\n\n\nNote\n\n\nNo worries if you don’t understand the code! We are essentialy just using the formula to calculate the percentage of candidates to look at."
  },
  {
    "objectID": "part-01/lecture-presentation.html#cost-of-searching",
    "href": "part-01/lecture-presentation.html#cost-of-searching",
    "title": "Lecture I - Optimal Stopping",
    "section": "Cost of Searching",
    "text": "Cost of Searching\n\nWhat if each additional search costs money?\nTrade-off between finding better options and search costs\nOptimal stopping point can change!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#choose-past-candidates",
    "href": "part-01/lecture-presentation.html#choose-past-candidates",
    "title": "Lecture I - Optimal Stopping",
    "section": "Choose past candidates",
    "text": "Choose past candidates\n\nWhat if you could choose past candidates?\nTrade-off between choosing a candidate you like and continuing to search\nOptimal stopping point changes!"
  },
  {
    "objectID": "part-01/lecture-presentation.html#questions",
    "href": "part-01/lecture-presentation.html#questions",
    "title": "Lecture I - Optimal Stopping",
    "section": "Questions?",
    "text": "Questions?\n\n\n\n\n\n\n\nNote\n\n\nThat’s it for todays lecture!\nWe now have covered a brief introduction into optimal stopping and seen how to set up Python."
  },
  {
    "objectID": "part-01/lecture-presentation.html#interesting-books-to-start",
    "href": "part-01/lecture-presentation.html#interesting-books-to-start",
    "title": "Lecture I - Optimal Stopping",
    "section": "Interesting Books to start",
    "text": "Interesting Books to start\n\nChristian, B., & Griffiths, T. (2016). Algorithms to live by: the computer science of human decisions. First international edition. New York, Henry Holt and Company.\n\n\n\n\n\n\n\n\nNote\n\n\nThe main inspiration for this lecture. Nils and I have read it and discussed it in depth, always wanting to translate it into a course."
  },
  {
    "objectID": "part-01/lecture-presentation.html#books-on-programming",
    "href": "part-01/lecture-presentation.html#books-on-programming",
    "title": "Lecture I - Optimal Stopping",
    "section": "Books on Programming",
    "text": "Books on Programming\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Here\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n\n\n\n\n\n\n\nNote\n\n\nThink Python is a great book to start with. It’s available online for free. Schrödinger Programmiert Python is a great alternative for German students, as it is a very playful introduction to programming with lots of examples."
  },
  {
    "objectID": "part-01/lecture-presentation.html#more-literature",
    "href": "part-01/lecture-presentation.html#more-literature",
    "title": "Lecture I - Optimal Stopping",
    "section": "More Literature",
    "text": "More Literature\nFor more interesting literature, take a look at the literature list of this course."
  },
  {
    "objectID": "part-01/tutorial-02-comparisons.html",
    "href": "part-01/tutorial-02-comparisons.html",
    "title": "Tutorial I.II - Comparison Operators",
    "section": "",
    "text": "You’re teaching a computer to make decisions. Just like we compare things in everyday life (“Is it raining?”, “Do I have enough money?”), computers need ways to compare values and make choices. Let’s look at this in the context of hiring decisions to help us how to make decisions in the context of optimal stopping problems.\nImagine you’re helping a company make hiring decisions. You need to look at different candidates and decide if they meet certain requirements. To make these decisions with Python, we need to learn how to make comparisons!",
    "crumbs": [
      "01 Optimal Stopping",
      "02 - Comparisons"
    ]
  },
  {
    "objectID": "part-01/tutorial-02-comparisons.html#exercise-1.1---compare-test-scores",
    "href": "part-01/tutorial-02-comparisons.html#exercise-1.1---compare-test-scores",
    "title": "Tutorial I.II - Comparison Operators",
    "section": "Exercise 1.1 - Compare Test Scores",
    "text": "Exercise 1.1 - Compare Test Scores\nA candidate scored 95 on their test. The previous highest score was 88. Create a comparison to check if the new score is better and store the result in compare_scores.\n\n# Creates the variables\nnew_score = 95\nprevious_best = 88\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert compare_scores == True, \"The new score should be greater than the previous best\"\nprint(f\"Is new score better? {compare_scores}\")",
    "crumbs": [
      "01 Optimal Stopping",
      "02 - Comparisons"
    ]
  },
  {
    "objectID": "part-01/tutorial-02-comparisons.html#exercise-1.2---compare-skills",
    "href": "part-01/tutorial-02-comparisons.html#exercise-1.2---compare-skills",
    "title": "Tutorial I.II - Comparison Operators",
    "section": "Exercise 1.2 - Compare Skills",
    "text": "Exercise 1.2 - Compare Skills\nCheck if a candidate’s skill matches what we need. Compare if the following two variables are different and store the result in compare_skills.\n\ncandidate_skill = \"Finance\"\nrequired_skill = \"Python\"\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert compare_skills == False, \"The candidate's skill should not match the required skill\"\nprint(\"Good job! You correctly identified that the skills are different\")",
    "crumbs": [
      "01 Optimal Stopping",
      "02 - Comparisons"
    ]
  },
  {
    "objectID": "part-01/tutorial-02-comparisons.html#exercise-1.3---compare-candidates",
    "href": "part-01/tutorial-02-comparisons.html#exercise-1.3---compare-candidates",
    "title": "Tutorial I.II - Comparison Operators",
    "section": "Exercise 1.3 - Compare Candidates",
    "text": "Exercise 1.3 - Compare Candidates\nIn the secretary problem, we need to compare candidates to the best we’ve seen. Check if the current candidate is better than our best so far and store the result in is_better.\n\ncurrent_rating = 92\nbest_so_far = 88\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert is_better == True, \"The current candidate should be better than the best so far\"\nprint(\"Good job! You correctly identified that the current candidate is better than the best so far\")",
    "crumbs": [
      "01 Optimal Stopping",
      "02 - Comparisons"
    ]
  },
  {
    "objectID": "part-01/tutorial-02-comparisons.html#exercise-2.1---check-multiple-requirements",
    "href": "part-01/tutorial-02-comparisons.html#exercise-2.1---check-multiple-requirements",
    "title": "Tutorial I.II - Comparison Operators",
    "section": "Exercise 2.1 - Check Multiple Requirements",
    "text": "Exercise 2.1 - Check Multiple Requirements\nWe have a candidate with:\n\n4 years of experience\nTest score of 90\n\nCheck if they meet BOTH requirements:\n\nMore than 3 years experience\nTest score above 85\n\nStore the result in meets_requirements.\n\nyears = 4\nscore = 90\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert meets_requirements == True, \"The candidate should meet both requirements\"\nprint(\"Good job! You correctly identified that the candidate meets both requirements\")",
    "crumbs": [
      "01 Optimal Stopping",
      "02 - Comparisons"
    ]
  },
  {
    "objectID": "part-01/tutorial-02-comparisons.html#exercise-2.2---alternative-requirements",
    "href": "part-01/tutorial-02-comparisons.html#exercise-2.2---alternative-requirements",
    "title": "Tutorial I.II - Comparison Operators",
    "section": "Exercise 2.2 - Alternative Requirements",
    "text": "Exercise 2.2 - Alternative Requirements\nA candidate is acceptable if they EITHER:\n\nHave a PhD\nOR have a high test score (above 95)\n\nStore the result in is_qualified\n\nhas_phd = True\ntest_score = 92\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert is_qualified == True, \"The candidate should be qualified\"\nprint(\"Good job! You correctly identified that the candidate is qualified\")",
    "crumbs": [
      "01 Optimal Stopping",
      "02 - Comparisons"
    ]
  },
  {
    "objectID": "part-01/tutorial-02-comparisons.html#exercise-3.1---make-a-hiring-decision",
    "href": "part-01/tutorial-02-comparisons.html#exercise-3.1---make-a-hiring-decision",
    "title": "Tutorial I.II - Comparison Operators",
    "section": "Exercise 3.1 - Make a Hiring Decision",
    "text": "Exercise 3.1 - Make a Hiring Decision\nLook at the following candidate’s information and decide if we should hire them:\nRequirements:\n\nAt least 5 years experience\nTest score above 85\nSalary request at most 90000\nMust have a degree\n\nCreate a single boolean expression that checks ALL requirements and store the result in final_decision.\n\n# Candidate information\ncandidate_experience = 7\ncandidate_score = 89\ncandidate_salary = 92000\ncandidate_has_degree = True\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert final_decision == False, \"The candidate should not meet all requirements\"\nprint(\"Good job! You correctly identified that the candidate does not meet all requirements as his salary expectation is too high.\")",
    "crumbs": [
      "01 Optimal Stopping",
      "02 - Comparisons"
    ]
  },
  {
    "objectID": "part-01/tutorial-02-comparisons.html#exercise-2.3---optimal-stopping-decision",
    "href": "part-01/tutorial-02-comparisons.html#exercise-2.3---optimal-stopping-decision",
    "title": "Tutorial I.II - Comparison Operators",
    "section": "Exercise 2.3 - Optimal Stopping Decision",
    "text": "Exercise 2.3 - Optimal Stopping Decision\nWe have:\n\nSeen 18 out of 40 candidates\nCurrent candidate score: 90\nBest score so far: 85\n\nCheck if we should hire this candidate (we should hire if we’ve seen at least 37% of candidates AND this candidate is better than the best so far).\nStore the result in make_offer.\n\n# Candidate information\ncandidates_seen = 18\ntotal_candidates = 40\ncurrent_score = 90\nbest_score_so_far = 85\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert make_offer == True, \"We should hire this candidate\"\nprint(\"Good job! You correctly identified that we should hire this candidate\")",
    "crumbs": [
      "01 Optimal Stopping",
      "02 - Comparisons"
    ]
  }
]