[
  {
    "objectID": "tutorials/tut_05_03_free.html",
    "href": "tutorials/tut_05_03_free.html",
    "title": "Tutorial V.III - Free Tasks",
    "section": "",
    "text": "This is the final tutorial of the course. You’ll have the opportunity to work on a task of your choice, implementing it with the tools learned throughout this course and leveraging AI assistance. Don’t worry, you will see how easy it is to get going with AI!\n\n\n\n\n\n\nTipDevelopment Environment\n\n\n\nWe recommend developing these projects in standalone .py files rather than notebooks. Use an AI-assisted editor like Cursor to help with implementation.",
    "crumbs": [
      "05 Randomness",
      "15 - Free Tasks"
    ]
  },
  {
    "objectID": "tutorials/tut_05_03_free.html#stock-price-random-walk-simulator",
    "href": "tutorials/tut_05_03_free.html#stock-price-random-walk-simulator",
    "title": "Tutorial V.III - Free Tasks",
    "section": "1. Stock Price Random Walk Simulator",
    "text": "1. Stock Price Random Walk Simulator\nCreate a program that simulates and visualizes stock price random walks. The program should:\n\nAccept user input for:\n\nInitial stock price\nSimulation timeframe (days)\nDaily price volatility (standard deviation)\n\nGenerate 5 different random walk scenarios\nVisualize the price trajectories on a single plot\n\nKey libraries: numpy, matplotlib",
    "crumbs": [
      "05 Randomness",
      "15 - Free Tasks"
    ]
  },
  {
    "objectID": "tutorials/tut_05_03_free.html#pygame-jump-run-game",
    "href": "tutorials/tut_05_03_free.html#pygame-jump-run-game",
    "title": "Tutorial V.III - Free Tasks",
    "section": "2. Pygame Jump & Run Game",
    "text": "2. Pygame Jump & Run Game\nDevelop an interactive platformer game using Pygame. Suggested development approach:\n\nStart with a basic game skeleton (player, platform, basic physics)\nIncrementally add features:\n\nPlayer movement and jumping mechanics\nCollision detection\nObstacles and collectibles\nScore tracking\nVisual improvements\n\n\nKey library: pygame",
    "crumbs": [
      "05 Randomness",
      "15 - Free Tasks"
    ]
  },
  {
    "objectID": "tutorials/tut_05_03_free.html#interactive-stock-dashboard",
    "href": "tutorials/tut_05_03_free.html#interactive-stock-dashboard",
    "title": "Tutorial V.III - Free Tasks",
    "section": "3. Interactive Stock Dashboard",
    "text": "3. Interactive Stock Dashboard\nBuild a web-based dashboard for stock market analysis using Streamlit. Required features:\n\nStock price data visualization using yfinance\nInteractive date range selection\nBasic price statistics\n\nOptional enhancements:\n\nMulti-stock comparison view\nTechnical indicators (Moving averages, RSI, etc.)\nStock selector dropdown\nPrice prediction features\n\nKey libraries: streamlit, yfinance, pandas, plotly\n\n\n\n\n\n\nNoteAI Assistance\n\n\n\nFor each project, start by breaking down the requirements into smaller tasks. Use these as the basis for your AI prompts to generate initial code structure and implementations.\n\n\n\nCongratulations on completing the tutorials! We hope you enjoyed the course and the tutorials and learned a lot!",
    "crumbs": [
      "05 Randomness",
      "15 - Free Tasks"
    ]
  },
  {
    "objectID": "tutorials/tut_04_03_dataframes.html",
    "href": "tutorials/tut_04_03_dataframes.html",
    "title": "Tutorial IV.III - DataFrames",
    "section": "",
    "text": "Imagine you’re planning a Mars mission. Every task, from equipment checks to crew training, needs careful scheduling. In this tutorial, we’ll learn how to use Python’s Pandas library to implement scheduling algorithms like Earliest Due Date (EDD) and Shortest Processing Time (SPT).\n\n\n\n\n\n\nNote\n\n\n\nBefore starting, ensure you have the pandas library installed.\nuv install pandas\nconda install pandas\n\n\nLet’s begin by importing pandas:\n\nimport pandas as pd",
    "crumbs": [
      "04 Scheduling",
      "12 - DataFrames"
    ]
  },
  {
    "objectID": "tutorials/tut_04_03_dataframes.html#exercise-1.1---create-mission-tasks-dataframe",
    "href": "tutorials/tut_04_03_dataframes.html#exercise-1.1---create-mission-tasks-dataframe",
    "title": "Tutorial IV.III - DataFrames",
    "section": "Exercise 1.1 - Create Mission Tasks DataFrame",
    "text": "Exercise 1.1 - Create Mission Tasks DataFrame\nCreate a DataFrame named mission_tasks with critical Mars mission preparation tasks. Include columns for task (a string), duration (in hours), and deadline (hours from now) with the following data:\n\nLife Support Check: 4 hours, deadline 12\nNavigation Systems: 7 hours, deadline 16\nFuel Loading: 6 hours, deadline 8\nCommunication Setup: 3 hours, deadline 6\n\nMake sure, that the hours and deadlines are integers. And create the DataFrame with the index labels Task 1, Task 2, Task 3, Task 4.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\ndef test_mission_tasks(df):\n\n    # Check if all required columns exist\n    required_cols = ['task', 'duration', 'deadline']\n    assert all(col in df.columns for col in required_cols), \"Missing required columns\"\n\n    # Check if we have the correct number of tasks\n    assert len(df) == 4, \"Should have exactly 4 tasks\"\n\n    # Check if all values are of correct type\n    assert df['duration'].dtype in ['int32', 'int64'], \"Duration should be integers\"\n    assert df['deadline'].dtype in ['int32', 'int64'], \"Deadline should be integers\"\n\n    # Check if all required tasks are present\n    required_tasks = {'Life Support Check', 'Navigation Systems', 'Fuel Loading', 'Communication Setup'}\n    assert set(df['task']) == required_tasks, \"Missing or incorrect task names\"\n\ntest_mission_tasks(mission_tasks)\n\nprint(\"Mission tasks created successfully!\")",
    "crumbs": [
      "04 Scheduling",
      "12 - DataFrames"
    ]
  },
  {
    "objectID": "tutorials/tut_04_03_dataframes.html#accessing-columns",
    "href": "tutorials/tut_04_03_dataframes.html#accessing-columns",
    "title": "Tutorial IV.III - DataFrames",
    "section": "Accessing Columns",
    "text": "Accessing Columns\nThere are two main ways to access columns:\n\nUsing square bracket notation []\nUsing dot notation .\n\n\n# Access a single column (returns a Series)\ndurations = tasks['duration']\nprint(\"Durations:\\n\", durations)\n\n# Access multiple columns (returns a DataFrame)\nselected_cols = tasks[['task', 'duration']]\nprint(\"\\nSelected columns:\\n\", selected_cols)\n\n# Using dot notation (only works for simple column names)\npriorities = tasks.deadline\nprint(\"\\nPriorities:\\n\", priorities)\n\nDurations:\n Task 1    6\nTask 2    3\nTask 3    7\nName: duration, dtype: int64\n\nSelected columns:\n                    task  duration\nTask 1  Equipment Check         6\nTask 2    Crew Training         3\nTask 3   Supply Loading         7\n\nPriorities:\n Task 1    10\nTask 2    15\nTask 3     8\nName: deadline, dtype: int64",
    "crumbs": [
      "04 Scheduling",
      "12 - DataFrames"
    ]
  },
  {
    "objectID": "tutorials/tut_04_03_dataframes.html#accessing-rows",
    "href": "tutorials/tut_04_03_dataframes.html#accessing-rows",
    "title": "Tutorial IV.III - DataFrames",
    "section": "Accessing Rows",
    "text": "Accessing Rows\nWe can access rows using:\n\niloc[] for integer-based indexing\nloc[] for label-based indexing\n\n\n# Get first row using iloc (integer location)\nfirst_row = tasks.iloc[0]\nprint(\"First row:\\n\", first_row)\n\n# Get rows 0 and 2\nselected_rows = tasks.iloc[[0, 2]]\nprint(\"\\nSelected rows:\\n\", selected_rows)\n\n# Get specific rows and columns\nsubset = tasks.iloc[0, 0]  # First row, first column\nprint(\"\\nSubset of data based on integer index:\\n\", subset)\n\n# Get specific rows and columns using loc\nsubset = tasks.loc['Task 2', 'task']\nprint(\"\\nSubset of data based on labels:\\n\", subset)\n\nFirst row:\n task        Equipment Check\nduration                  6\ndeadline                 10\nName: Task 1, dtype: object\n\nSelected rows:\n                    task  duration  deadline\nTask 1  Equipment Check         6        10\nTask 3   Supply Loading         7         8\n\nSubset of data based on integer index:\n Equipment Check\n\nSubset of data based on labels:\n Crew Training",
    "crumbs": [
      "04 Scheduling",
      "12 - DataFrames"
    ]
  },
  {
    "objectID": "tutorials/tut_04_03_dataframes.html#exercise-4.1---data-access-practice",
    "href": "tutorials/tut_04_03_dataframes.html#exercise-4.1---data-access-practice",
    "title": "Tutorial IV.III - DataFrames",
    "section": "Exercise 4.1 - Data Access Practice",
    "text": "Exercise 4.1 - Data Access Practice\nUsing the mission_tasks DataFrame from earlier, complete these tasks:\n\nExtract only the ‘duration’ column as duration_col\nGet the first two tasks with all columns as first_two\nCreate a subset containing only the ‘task’ and ‘deadline’ columns as task_deadline_subset\n\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert len(duration_col) == 4, \"Duration column should have 4 entries\"\nassert len(first_two) == 2, \"Should have first two rows\"\nassert list(task_deadline_subset.columns) == ['task', 'deadline'], \"Should only have task and deadline columns\"\nprint(\"Data access exercises completed successfully!\")\n\n\n\n\n\n\n\n\nTip\n\n\n\nRemember:\n\nUse [] for single or multiple columns\nUse iloc[] when you want to access by position\nUse loc[] when you want to access by label (using the index labels)\nSlicing works similar to Python lists: 0:2 means “from 0 up to (but not including) 2”",
    "crumbs": [
      "04 Scheduling",
      "12 - DataFrames"
    ]
  },
  {
    "objectID": "tutorials/tut_04_03_dataframes.html#exercise-2.1---apply-edd-to-mission-tasks",
    "href": "tutorials/tut_04_03_dataframes.html#exercise-2.1---apply-edd-to-mission-tasks",
    "title": "Tutorial IV.III - DataFrames",
    "section": "Exercise 2.1 - Apply EDD to Mission Tasks",
    "text": "Exercise 2.1 - Apply EDD to Mission Tasks\nSort your mission_tasks using the EDD algorithm (sort by deadline).\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert edd_schedule.iloc[0]['task'] == 'Communication Setup', \"First task should be Communication Setup\"\nprint(\"EDD Schedule created successfully!\")\nprint(edd_schedule)",
    "crumbs": [
      "04 Scheduling",
      "12 - DataFrames"
    ]
  },
  {
    "objectID": "tutorials/tut_04_03_dataframes.html#exercise-2.2---calculate-new-deadline",
    "href": "tutorials/tut_04_03_dataframes.html#exercise-2.2---calculate-new-deadline",
    "title": "Tutorial IV.III - DataFrames",
    "section": "Exercise 2.2 - Calculate New Deadline",
    "text": "Exercise 2.2 - Calculate New Deadline\nUnfortuantely, the mission has been delayed as some tasks are rather complex. Add a new column to the mission_tasks DataFrame called new_deadline. The new deadline is the old deadline plus the duration of the task.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert 'new_deadline' in mission_tasks.columns, \"Missing new_deadline column\"\nassert all(mission_tasks['new_deadline'] &gt; mission_tasks['deadline']), \"New deadlines should be later than original deadlines\"\nprint(\"New deadlines calculated successfully!\")\nprint(mission_tasks)",
    "crumbs": [
      "04 Scheduling",
      "12 - DataFrames"
    ]
  },
  {
    "objectID": "tutorials/tut_04_03_dataframes.html#exercise-3.1---apply-earliest-due-date-to-mission-tasks",
    "href": "tutorials/tut_04_03_dataframes.html#exercise-3.1---apply-earliest-due-date-to-mission-tasks",
    "title": "Tutorial IV.III - DataFrames",
    "section": "Exercise 3.1 - Apply Earliest Due Date to Mission Tasks",
    "text": "Exercise 3.1 - Apply Earliest Due Date to Mission Tasks\nNow it is your turn: Apply the EDD algorithm to the mission_tasks DataFrame. Remember, that the EDD algorithm sorts the tasks by the original deadline and then loops over the rows, computing the completion time and maximum delay for each task (just like in the example above).\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert edd_schedule.iloc[0]['task'] == 'Communication Setup', \"First task should be Communication Setup\"\nassert max_delay == 4, \"Maximum delay should be 4 hours\"\nassert completion_time == 20, \"Completion time should be 20 hours\"\nprint(\"EDD Schedule created successfully!\")\nprint(edd_schedule)",
    "crumbs": [
      "04 Scheduling",
      "12 - DataFrames"
    ]
  },
  {
    "objectID": "tutorials/tut_04_03_dataframes.html#exercise-3.2---apply-shortest-processing-time-to-mission-tasks",
    "href": "tutorials/tut_04_03_dataframes.html#exercise-3.2---apply-shortest-processing-time-to-mission-tasks",
    "title": "Tutorial IV.III - DataFrames",
    "section": "Exercise 3.2 - Apply Shortest Processing Time to Mission Tasks",
    "text": "Exercise 3.2 - Apply Shortest Processing Time to Mission Tasks\nNow, apply the SPT algorithm to the mission_tasks DataFrame. Remember, that the SPT algorithm sorts the tasks by duration and then loops over the rows, computing the completion time and total waiting time for all tasks.\nCompute the sum of the waiting times for all tasks in a variabel called total_waiting_time and compute the completion time of the last task in a variable called completion_time.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert spt_schedule.iloc[0]['task'] == 'Communication Setup', \"First task should be Communication Setup\"\nassert total_waiting_time == 23, \"Total waiting time should be 23\"\nassert completion_time == 20, \"Completion time should be 20\"\nprint(\"SPT Schedule created successfully!\")\nprint(spt_schedule)\nprint(f\"Total waiting time: {total_waiting_time}\")",
    "crumbs": [
      "04 Scheduling",
      "12 - DataFrames"
    ]
  },
  {
    "objectID": "tutorials/tut_04_01_recap.html",
    "href": "tutorials/tut_04_01_recap.html",
    "title": "Tutorial IV.I - Recap",
    "section": "",
    "text": "To get you started again on the topics of the last lecture, we’ll go through a recap of th previous concepts before we start with some new concepts. In this tutorial, we’ll apply Python programming concepts to solve common scheduling problems to make better scheduling decisions!\nImagine you’re managing “The Python Café”. Every day, you face these challenges:\n\nManaging multiple baristas’ schedules\nPrioritizing customer orders\nBalancing preparation times with deadlines\nHandling rush hour efficiently",
    "crumbs": [
      "04 Scheduling",
      "10 - Recap"
    ]
  },
  {
    "objectID": "tutorials/tut_04_01_recap.html#exercise-1.1---create-menu-lists",
    "href": "tutorials/tut_04_01_recap.html#exercise-1.1---create-menu-lists",
    "title": "Tutorial IV.I - Recap",
    "section": "Exercise 1.1 - Create Menu Lists",
    "text": "Exercise 1.1 - Create Menu Lists\nCreate two lists: 1. drinks containing at least 5 different drink names of your choice 2. prep_times containing the preparation time (in minutes) for each drink in the same order\n\n# YOUR CODE HERE\n\n\n\nCode\n# Test your answer\nassert isinstance(drinks, list), \"drinks should be a list\"\nassert isinstance(prep_times, list), \"prep_times should be a list\"\nassert len(drinks) &gt;= 5, \"Include at least 5 drinks\"\nassert len(drinks) == len(prep_times), \"Each drink needs a preparation time\"\nassert all(isinstance(t, (int, float)) for t in prep_times), \"All times should be numbers\"\nprint(\"Great! Your menu lists have been created.\")",
    "crumbs": [
      "04 Scheduling",
      "10 - Recap"
    ]
  },
  {
    "objectID": "tutorials/tut_04_01_recap.html#exercise-2.1---find-quickest-drink",
    "href": "tutorials/tut_04_01_recap.html#exercise-2.1---find-quickest-drink",
    "title": "Tutorial IV.I - Recap",
    "section": "Exercise 2.1 - Find Quickest Drink",
    "text": "Exercise 2.1 - Find Quickest Drink\nCreate a function find_quickest_drink that takes the drinks and prep_times lists as parameters and returns the name of the drink that takes the least time to prepare. Test your function with the drinks and prep_times lists you created in the previous exercise and print the result.\nAs this might be a bit tricky, let’s break it down into some steps:\n\nFind the shortest time in the prep_times list with the min() function\nCompare each drink’s preparation time with the shortest time\nUse a for loop to iterate over the prep_times list and compare each time with the shortest time\nIf you want to iterate over the drinks list, you can use the len() function inside of the range() function and use the index to get the corresponding drink\nReturn the name of the drink with the shortest preparation time\n\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert len(drinks) &gt;= 5, \"Include at least 5 drinks\"\nassert len(drinks) == len(prep_times), \"Each drink needs a preparation time\"\ntest_drinks = [\"Latte\", \"Espresso\", \"Cappuccino\"]\ntest_times = [5, 2, 4]\nresult = find_quickest_drink(test_drinks, test_times)\nassert result == \"Espresso\", \"Should return the drink with shortest prep time\"\nprint(\"Perfect! Your function correctly identifies the quickest drink.\")",
    "crumbs": [
      "04 Scheduling",
      "10 - Recap"
    ]
  },
  {
    "objectID": "tutorials/tut_04_01_recap.html#exercise-3.1---create-order-list",
    "href": "tutorials/tut_04_01_recap.html#exercise-3.1---create-order-list",
    "title": "Tutorial IV.I - Recap",
    "section": "Exercise 3.1 - Create Order List",
    "text": "Exercise 3.1 - Create Order List\nCreate a function create_order_list that takes four parameters:\n\ncustomer_names (list): a list of customer names as strings\nordered_drinks (list): a list of drinks as strings\nprices (list): a list of prices as floats\ndeadline (list): a list of deadlines in minutes as integers\n\nThe function should return a list of lists where each inner list contains [customer_name, drink, price, deadline].\n\n\n\n\n\n\nTip\n\n\n\n\nUse a for loop to iterate over the customer_names list and append the corresponding values to the orders list\nRemember that len(customer_names) gives you the number of customers\nUse the append method to add a list to the orders list\n\n\n\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nnames = [\"Elio\", \"Mischa\", \"Nina\"]\ndrinks = [\"Latte\", \"Espresso\", \"Cappuccino\"]\nprices = [3.5, 2.5, 4.0]\ndeadline = [10, 5, 15]\nresult = create_order_list(names, drinks, prices, deadline)\nassert isinstance(result, list), \"Should return a list\"\nassert len(result) == 3, \"Should have one entry per customer\"\nassert len(result[0]) == 4, \"Each entry should have 4 elements\"\nassert result[0][0] == \"Elio\", \"First entry should be Elio's order\"\nprint(\"Excellent! Your order list creator works perfectly.\")",
    "crumbs": [
      "04 Scheduling",
      "10 - Recap"
    ]
  },
  {
    "objectID": "tutorials/tut_04_01_recap.html#exercise-4.1---find-earliest-deadline",
    "href": "tutorials/tut_04_01_recap.html#exercise-4.1---find-earliest-deadline",
    "title": "Tutorial IV.I - Recap",
    "section": "Exercise 4.1 - Find Earliest Deadline",
    "text": "Exercise 4.1 - Find Earliest Deadline\nCreate a function find_earliest_deadline that takes a list of orders (as created in Exercise 3.1) and returns the order (as a list and not a list of lists) with the earliest deadline.\n\n\n\n\n\n\nTip\n\n\n\n\nInitialize a variable with the lowest found deadline with a high value (e.g., 1000000)\nInitialize a variable with the order that has the lowest deadline (first set it to an empty list)\nUse a for loop to iterate over the orders list\nInside the loop, compare the deadline of the current order with the lowest found deadline\n\n\n\n\n# YOUR CODE BELOW\n\n\n# With the test orders below you can test your function\ntest_orders = [\n    [\"Elio\", \"Latte\", 3.5, 10],\n    [\"Mischa\", \"Espresso\", 2.5, 5],\n    [\"Nina\", \"Cappuccino\", 4.0, 15]\n]\nprint(find_earliest_deadline(test_orders))\n\n\n\nCode\n# Test your answer\nresult = find_earliest_deadline(test_orders)\nassert result[1] == \"Espresso\", \"Earliest order is Mischa's Espresso\"\nprint(\"Great job! Your function works correctly.\")",
    "crumbs": [
      "04 Scheduling",
      "10 - Recap"
    ]
  },
  {
    "objectID": "tutorials/tut_03_02_functions.html",
    "href": "tutorials/tut_03_02_functions.html",
    "title": "Tutorial III.II - Functions",
    "section": "",
    "text": "Imagine you’re a librarian who needs to organize and retrieve books efficiently. Instead of explaining every step of finding a book each time, wouldn’t it be nice to have a set of standard procedures? In programming, these procedures are called functions! They help us organize our code into reusable blocks, just like having standard procedures in a library.\nThis tutorial will teach you about functions using a library management system and a coffee machine as an example. We’ll create functions to help us manage books, track their popularity, and implement a simple caching system.\n\n\n\n\n\n\nTipReal-World Example\n\n\n\nThink of a function like a coffee machine:\n\nInput (parameters) → Coffee beans, water, settings\nProcess → Internal brewing steps\nOutput (return value) → Your finished coffee",
    "crumbs": [
      "03 Caching",
      "03-02 - Functions"
    ]
  },
  {
    "objectID": "tutorials/tut_03_02_functions.html#exercise-1.1---create-a-book-information-function",
    "href": "tutorials/tut_03_02_functions.html#exercise-1.1---create-a-book-information-function",
    "title": "Tutorial III.II - Functions",
    "section": "Exercise 1.1 - Create a Book Information Function",
    "text": "Exercise 1.1 - Create a Book Information Function\nCreate a function called get_book_info that takes three parameters: title, author, and year. It should return a formatted string with the book’s information.\n\n\n\n\n\n\nNoteBefore You Start\n\n\n\nCommon mistakes to avoid:\n\nDon’t forget the spaces in the formatting\nRemember to use f-strings for easy string formatting\nMake sure to include the parentheses around the year\n\n\n\n\n# If you call the function like this:\n# get_book_info(\"Return\", \"Alan Wake\", 2023)\n# it should return the string:\n# \"Return by Alan Wake (2023)\"\n# YOUR CODE BELOW\n\n\n\nCode\n# Assertions to verify your solution\nassert get_book_info(\"1984\", \"George Orwell\", 1949) == \"1984 by George Orwell (1949)\"\nprint(\"Great job! Your book information function works as expected!\")",
    "crumbs": [
      "03 Caching",
      "03-02 - Functions"
    ]
  },
  {
    "objectID": "tutorials/tut_03_02_functions.html#common-pitfall",
    "href": "tutorials/tut_03_02_functions.html#common-pitfall",
    "title": "Tutorial III.II - Functions",
    "section": "Common Pitfall",
    "text": "Common Pitfall\nWhen using multiple conditions, be careful with the order of operations. Consider using parentheses to make your logic clear:\nif (copies_available &gt; 0) and (not on_hold):  # More readable than the code above",
    "crumbs": [
      "03 Caching",
      "03-02 - Functions"
    ]
  },
  {
    "objectID": "tutorials/tut_03_02_functions.html#exercise-2.1---create-a-function-to-check-if-a-book-is-popular",
    "href": "tutorials/tut_03_02_functions.html#exercise-2.1---create-a-function-to-check-if-a-book-is-popular",
    "title": "Tutorial III.II - Functions",
    "section": "Exercise 2.1 - Create a Function to Check if a Book is Popular",
    "text": "Exercise 2.1 - Create a Function to Check if a Book is Popular\nCreate a function called is_popular that takes a single parameter rating. If the rating is greater than 3, it should return True, otherwise it should return False.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Assertions to verify your solution\nassert is_popular(4) == True, \"A rating of 4 or higher is considered popular\"\nassert is_popular(2) == False, \"A rating of 3 or lower is not popular\"\nprint(\"Excellent! Your popular book function works correctly!\")",
    "crumbs": [
      "03 Caching",
      "03-02 - Functions"
    ]
  },
  {
    "objectID": "tutorials/tut_03_02_functions.html#exercise-2.2---create-a-book-access-function",
    "href": "tutorials/tut_03_02_functions.html#exercise-2.2---create-a-book-access-function",
    "title": "Tutorial III.II - Functions",
    "section": "Exercise 2.2 - Create a Book Access Function",
    "text": "Exercise 2.2 - Create a Book Access Function\nMany libraries have borrowing policies that depend on multiple factors. Let’s implement a realistic borrowing policy function that a library might use. Create a function called can_borrow_book that takes three parameters:\n\nis_member: boolean indicating if the person is a library member\nbooks_borrowed: number of books currently borrowed\nhas_overdue: boolean indicating if they have overdue books\n\nThe function should return True only if:\n\nThey are a member AND\nThey have borrowed less than 3 books AND\nThey have no overdue books\n\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Assertions to verify your solution\nassert can_borrow_book(True, 2, False) == True, \"Should allow borrowing\"\nassert can_borrow_book(True, 3, False) == False, \"Should not allow more than 3 books\"\nassert can_borrow_book(True, 1, True) == False, \"Should not allow with overdue books\"\nprint(\"Excellent! Your borrowing function works as it should!\")",
    "crumbs": [
      "03 Caching",
      "03-02 - Functions"
    ]
  },
  {
    "objectID": "tutorials/tut_03_02_functions.html#exercise-3.1---create-a-cache-priority-function",
    "href": "tutorials/tut_03_02_functions.html#exercise-3.1---create-a-cache-priority-function",
    "title": "Tutorial III.II - Functions",
    "section": "Exercise 3.1 - Create a Cache Priority Function",
    "text": "Exercise 3.1 - Create a Cache Priority Function\nCreate a function called calculate_cache_priority that helps decide if a book should be kept in the easily accessible section. It should take:\n\ntimes_borrowed: How many times the book was borrowed\ndays_since_last_borrow: Days since last borrowed\nis_reference: Whether it’s a reference book (default: False)\n\nReturn a priority score calculated as:\n\nFor regular books: times_borrowed / (days_since_last_borrow + 1)\nFor reference books: 2 * (times_borrowed / (days_since_last_borrow + 1))\n\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert calculate_cache_priority(10, 5) == 10/(5+1), \"Check your regular book calculation\"\nassert calculate_cache_priority(10, 5, True) == 2*(10/(5+1)), \"Check your reference book calculation\"\nprint(\"Great! Your cache priority function works and calculates correctly!\")",
    "crumbs": [
      "03 Caching",
      "03-02 - Functions"
    ]
  },
  {
    "objectID": "tutorials/tut_03_02_functions.html#exercise-4.1---working-with-string-methods-and-functions",
    "href": "tutorials/tut_03_02_functions.html#exercise-4.1---working-with-string-methods-and-functions",
    "title": "Tutorial III.II - Functions",
    "section": "Exercise 4.1 - Working with String Methods and Functions",
    "text": "Exercise 4.1 - Working with String Methods and Functions\nCreate a function called format_book_title that takes a book title as input and:\n\nCapitalizes the first letter of each word\nRemoves any extra whitespace\nReturns the formatted title\n\n\n\n\n\n\n\nNoteCommon String Methods\n\n\n\n\n.strip() - Removes whitespace from start and end\n.title() - Capitalizes first letter of each word\n.lower() - Converts to lowercase\n.upper() - Converts to uppercase\n\n\n\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert format_book_title(\"  the hitchhikers guide  \") == \"The Hitchhikers Guide\", \"Check your whitespace removal\"\nassert format_book_title(\"dune\") == \"Dune\", \"Check your capitalization\"\nprint(\"Excellent! Your title formatting function works correctly!\")",
    "crumbs": [
      "03 Caching",
      "03-02 - Functions"
    ]
  },
  {
    "objectID": "tutorials/tut_02_03_explore_exploit.html",
    "href": "tutorials/tut_02_03_explore_exploit.html",
    "title": "Tutorial II.III - Explore and Exploit",
    "section": "",
    "text": "Introduction\nWelcome to the final tutorial of Part II! We’ll tie together everything we’ve learned so far - variables, lists, conditions, and loops - to tackle a classic explore-exploit problem: the one-armed bandit (slot machine). This is a perfect example of balancing exploration (trying different strategies) with exploitation (sticking to what works).\n\n\nSection 1 - Setting Up Our Casino\nFirst, let’s create a simple slot machine simulator using what we learned about variables and lists. In order to do this, we’ll need to import the random module, which we can do using the import statement. Don’t worry about the details of this statement for now - we’ll cover it in more detail in a future tutorial.\n\nimport random\n\n# Initial setup\nmoney = 100 # Starting money\nbet = 10 # How much we bet each time\npayouts = [0, 5, 10, 20, 50] # Different possible wins\n\nprint(\"Possible outcomes:\")\nfor payout in payouts:\n    print(f\"🎰 Win ${payout}\")\n\nPossible outcomes:\n🎰 Win $0\n🎰 Win $5\n🎰 Win $10\n🎰 Win $20\n🎰 Win $50\n\n\nIn this setup, we’re creating a simple slot machine where: - You start with $100 - Each play costs $10 - There are 5 possible payouts: $0 (loss), $5 (small win), $10 (break even), $20 (good win), and $50 (jackpot) - The random.choice() function simulates pulling the lever by randomly selecting one of these payouts\n\n\n\n\n\n\nNote\n\n\n\nIn real slot machines, the probabilities of different payouts aren’t equal. Higher payouts are much less likely to occur than lower ones. Our simplified version gives each payout an equal chance.\n\n\nTo simulate playing the slot machine once, we can start as follows:\n\n# Simulate playing the slot machine once\nwin = random.choice(payouts)\nmoney += win\nprint(f\"You bet ${bet}\")\nprint(f\"You won ${win}!\")\nprint(f\"Your new balance is ${money}\")\n\nYou bet $10\nYou won $0!\nYour new balance is $100\n\n\n\n\n\n\n\n\nTip\n\n\n\n+= is a shorthand for “add and assign”. So money += 10 is equivalent to money = money + 10. This also works for other arithmetic operations, like -=, *=, and /=.\n\n\n\n\nExercise 1.1 - Multiple Attempts\nNow let’s use a loop to play multiple times and track our results. Write a loop that:\n\nPlays the slot machine 10 times\nSubtracts the bet amount each time\nAdds a random payout\nStores the results in a list\n\n\nmoney = 100 # Reset our money\nbet = 10 # How much we bet each time\nresults = [] # List to store how much money we have after each play\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Check your results\nassert len(results) == 10, \"You should have 10 results in your list\"\nassert all(isinstance(x, (int, float)) for x in results), \"All results should be numbers\"\nprint(f\"You played the slot machine {len(results)} times\")\nprint(f\"Your final balance is ${results[-1]}\")\nprint(f\"Unfortunately, the payout rates are not realistic here...\")\n\n\n\n\n\n\n\n\nTip\n\n\n\nUse the append() method to add an element to a list. For example, results.append(money) will add the current value of money to the results list.\n\n\n\n\nExercise 1.2 - Playing with a Budget\nNow let’s simulate playing the slot machine multiple times with a budget. We’ll use a while loop to play until we run out of money. This is more realistic than playing a fixed number of times, as real players need to stop when they’re out of money!\nThe machine_payout_rate represents how generous the machine is:\n\nThe function random.random() generates a random number between 0 and 1.\nA rate of 2.0 means you get back exactly what you bet (on average)\nOur rate of 1.5 means you could win up to 1.5 times your bet but on average you’ll get back 0.75 times your bet\n\n# Compute the payout for the current play\nmachine_payout_rate = 1.5\npayout = random.random() * machine_payout_rate * bet\nUse a while loop to play the slot machine until you run out of money, and store the amount of money you have after each play in the results list. Further, print out the amount of money you have after each play with a formatted string.\n\nimport random\n\nmachine_payout_rate = 1.5 # Payout rate for the machine\nbet = 10 # Bet size\nmoney = 100 # Our starting money\nresults = [] # Store results of each play here\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Check your results\nassert len(results) &gt; 0, \"You should have at least one result\"\nassert all(isinstance(x, (int, float)) for x in results), \"All results should be numbers\"\nassert results[-1] &lt;= bet, \"Should stop playing when money is less than bet amount\"\nassert all(abs(results[i] - results[i-1]) &lt;= bet * machine_payout_rate for i in range(1, len(results))), \"Each play should not change money by more than maximum possible payout\"\nprint(f\"You played the slot machine {len(results)} times\")\n\n\n\n\nSection 2 - Nested Loops\nNow let’s use nested loops to try different slot machines with different payout rates. This is where exploration comes in! Nested loops are a way to repeat a loop multiple times, and we can use them to try different options. It’s essentially a loop inside another loop.\n\n\n\n\n\n\nTip\n\n\n\nNested loops are like a clock: the outer loop is like the hour hand (moves slowly), and the inner loop is like the minute hand (completes a full cycle for each move of the hour hand).\n\n\nFor example, for machine in range(3) will run a loop 3 times. We can use nested loops to try all combinations of two different options.\n\nfor machine in range(3):\n    for payout in range(4):\n        print(f\"Machine Nr. {machine}, Payout Nr. {payout}\")\n\nMachine Nr. 0, Payout Nr. 0\nMachine Nr. 0, Payout Nr. 1\nMachine Nr. 0, Payout Nr. 2\nMachine Nr. 0, Payout Nr. 3\nMachine Nr. 1, Payout Nr. 0\nMachine Nr. 1, Payout Nr. 1\nMachine Nr. 1, Payout Nr. 2\nMachine Nr. 1, Payout Nr. 3\nMachine Nr. 2, Payout Nr. 0\nMachine Nr. 2, Payout Nr. 1\nMachine Nr. 2, Payout Nr. 2\nMachine Nr. 2, Payout Nr. 3\n\n\n\n\nExercise 2.1 - Simulating Multiple Machines\nThe setup is the same as in Exercise 1.2, but we’re now comparing three different machines, each with its own payout rate. Use a while loop for each machine and a for loop to try all machines. As the bank always wins, we’re not interested in the results for each machine, but rather in the number of times we can play each machine before we run out of money.\nStore the number of plays in a list called plays with three elements, one for each machine. The goal is to find out which machine lets us play the longest with our budget. This is a common exploration strategy: try each option several times to understand its characteristics.\n\nimport random\n# Different machines might have different payout rates\nmachine_1_payout_rate = 1.2\nmachine_2_payout_rate = 1.5\nmachine_3_payout_rate = 1.8\n\nbet = 10 # Bet size at each play\nbudget = 100 # Our starting money for each machine!\nplays = [0, 0, 0] # List to store number of plays for each machine\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Check your results\nassert len(plays) == 3, \"Should have results for three machines\"\nassert all(isinstance(x, int) and x &gt;= 0 for x in plays), \"Number of plays should be non-negative integers\"\nassert all(x &lt;= budget/bet * 6 for x in plays), \"Number of plays seems unreasonably high given budget\"\nprint(f\"You played the slot machine {plays[0]} times on machine 1\")\nprint(f\"You played the slot machine {plays[1]} times on machine 2\")\nprint(f\"You played the slot machine {plays[2]} times on machine 3\")\n\n\n\n\nExercise 2.2 - Exploring the Machines\nNow let’s find out which machine is the best and which one is the worst by comparing the number of plays for each machine. Store the index of the best machine in best_machine and the index of the worst machine in worst_machine. You can use the max(plays) function to find the maximum number of plays in the plays list and the plays.index(max(plays)) function to find the index of the maximum number of plays.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Check your results\nassert isinstance(best_machine, int) and 0 &lt;= best_machine &lt;= 2, \"Best machine should be 0, 1, or 2\"\nassert isinstance(worst_machine, int) and 0 &lt;= worst_machine &lt;= 2, \"Worst machine should be 0, 1, or 2\"\nassert best_machine != worst_machine, \"Best and worst machine cannot be the same\"\nprint(f\"The best machine is machine {best_machine}\")\nprint(f\"The worst machine is machine {worst_machine}\")\n\n\n\n\nConclusion\nExcellent work! You’ve successfully combined multiple programming concepts to tackle a real explore-exploit problem:\n\nVariables and types for tracking money and bets\nLists for storing payouts and results\nLoops (including nested loops) for testing different machines\nConditions for finding the best machine\n\nThis is a simplified version of how casinos and gambling companies might analyze their games, though in reality, they use much more sophisticated algorithms! Remember though, that the casino always wins!\n\n\nSolutions\nYou will likely find solutions to most exercises online. However, we strongly encourage you to work on these exercises independently without searching explicitly for the exact answers to the exercises. Understanding someone else’s solution is very different from developing your own. Use the lecture notes and try to solve the exercises on your own. This approach will significantly enhance your learning and problem-solving skills.\nRemember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities. If you encounter difficulties, review the lecture materials, experiment with different approaches, and don’t hesitate to ask for clarification during class discussions.\nLater, you will find the solutions to these exercises online in the associated GitHub repository, but we will also quickly go over them next week. To access the solutions, click on the Github button on the lower right and search for the folder with today’s lecture and tutorial. Alternatively, you can ask ChatGPT or Claude to explain them to you. But please remember, the goal is not just to complete the exercises, but to understand the concepts and improve your programming abilities.\n\nThat’s it for part II! Next week, we’ll learn about functions and how to use them to make our code more efficient and reusable.",
    "crumbs": [
      "02 Explore/Exploit",
      "02-03 - Exploration"
    ]
  },
  {
    "objectID": "tutorials/tut_02_01_lists.html",
    "href": "tutorials/tut_02_01_lists.html",
    "title": "Tutorial II.I - Lists and Tuples",
    "section": "",
    "text": "When deciding where to eat, we often face a dilemma: should we go to our favorite restaurant (exploit) or try somewhere new (explore)? This is a perfect example of the explore-exploit trade-off! To help us analyze this problem, we need to learn about lists and tuples in Python.\n\nLists are like our dining history - we can add new restaurants and remove ones we don’t like\nTuples are like a restaurant’s fixed menu - once set, it doesn’t change\n\nLet’s learn these concepts by helping a food critic make better restaurant decisions!\n\n\n\n\n\n\nNote\n\n\n\nIf a cell is marked with YOUR CODE BELOW, you are expected to write your code in that cell.",
    "crumbs": [
      "02 Explore/Exploit",
      "02-01 - Lists"
    ]
  },
  {
    "objectID": "tutorials/tut_02_01_lists.html#working-with-lists",
    "href": "tutorials/tut_02_01_lists.html#working-with-lists",
    "title": "Tutorial II.I - Lists and Tuples",
    "section": "Working with Lists",
    "text": "Working with Lists\nLists are flexible. Here are the most common operations:\n\nAdding items (like discovering a new restaurant):\n\nappend() adds to the end\ninsert() adds at a specific position\n\n\n\n# Adding a new restaurant\nrestaurants = [\"Pasta Place\", \"Sushi Bar\"]\nrestaurants.append(\"Pizza Palace\") # Adds to the end\nprint(restaurants)\n\n# You can also insert at a specific position\nrestaurants.insert(1, \"Taco Shop\") # Adds at position 1\nprint(restaurants) # [\"Pasta Place\", \"Taco Shop\", \"Sushi Bar\", \"Pizza Palace\"]\n\n['Pasta Place', 'Sushi Bar', 'Pizza Palace']\n['Pasta Place', 'Taco Shop', 'Sushi Bar', 'Pizza Palace']\n\n\n\nRemoving items (like removing a restaurant you don’t like):\n\npop() removes the last item\nremove() removes a specific item\n\n\n\n# Removing the last restaurant\nrestaurants = [\"Pasta Place\", \"Taco Shop\", \"Sushi Bar\", \"Pizza Palace\"]\nrestaurants.pop() # Removes and returns the last item\nprint(restaurants)\n\n# Removing a specific item\nrestaurants.remove(\"Pasta Place\")\nprint(restaurants)\n\n['Pasta Place', 'Taco Shop', 'Sushi Bar']\n['Taco Shop', 'Sushi Bar']\n\n\n\nAccessing items (like looking up a restaurant by position):\n\n[0] gives you the first item\n[1:3] gives you items second and third\n[-1] gives you the last item\n\n\n\nrestaurants = [\"Pasta Place\", \"Sushi Bar\", \"Burger Joint\"]\nfirst_choice = restaurants[0] # Gets \"Pasta Place\"\nlast_choice = restaurants[-1] # Gets \"Burger Joint\"\nsome_choices = restaurants[0:2] # Gets [\"Pasta Place\", \"Sushi Bar\"]\n\n\n\n\n\n\n\nTip\n\n\n\nIn Python, we start counting positions from 0, not 1. So restaurants[0] gives you the first restaurant!",
    "crumbs": [
      "02 Explore/Exploit",
      "02-01 - Lists"
    ]
  },
  {
    "objectID": "tutorials/tut_02_01_lists.html#exercise-1.1---create-a-restaurant-list",
    "href": "tutorials/tut_02_01_lists.html#exercise-1.1---create-a-restaurant-list",
    "title": "Tutorial II.I - Lists and Tuples",
    "section": "Exercise 1.1 - Create a Restaurant List",
    "text": "Exercise 1.1 - Create a Restaurant List\nreate a list favorite_spots with your top three favorite restaurants. Remember to:\n\nUse square brackets []\nPut restaurant names in quotes (they’re strings!)\nSeparate items with commas\n\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert len(favorite_spots) == 3, \"You should have exactly 3 restaurants\"\nassert isinstance(favorite_spots, list), \"favorite_spots should be a list\"\nassert all(isinstance(x, str) for x in favorite_spots), \"All items should be strings\"\nprint(\"Your favorite restaurants:\", favorite_spots)",
    "crumbs": [
      "02 Explore/Exploit",
      "02-01 - Lists"
    ]
  },
  {
    "objectID": "tutorials/tut_02_01_lists.html#exercise-1.2---add-a-new-discovery",
    "href": "tutorials/tut_02_01_lists.html#exercise-1.2---add-a-new-discovery",
    "title": "Tutorial II.I - Lists and Tuples",
    "section": "Exercise 1.2 - Add a New Discovery",
    "text": "Exercise 1.2 - Add a New Discovery\nYou’ve discovered a new restaurant called “The Golden Fork”. Add it to your favorite_spots list using the append() method. Think of this as writing a new entry in your restaurant diary!\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert \"The Golden Fork\" in favorite_spots, \"The Golden Fork should be in the list\"\nassert len(favorite_spots) == 4, \"You should now have 4 restaurants\"\nprint(\"Updated restaurant list:\", favorite_spots)",
    "crumbs": [
      "02 Explore/Exploit",
      "02-01 - Lists"
    ]
  },
  {
    "objectID": "tutorials/tut_02_01_lists.html#exercise-1.3---remove-a-restaurant",
    "href": "tutorials/tut_02_01_lists.html#exercise-1.3---remove-a-restaurant",
    "title": "Tutorial II.I - Lists and Tuples",
    "section": "Exercise 1.3 - Remove a Restaurant",
    "text": "Exercise 1.3 - Remove a Restaurant\nThe last restaurant in your list closed down. Remove it using the pop() method.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert \"The Golden Fork\" not in favorite_spots, \"The Golden Fork should be removed\"\nassert len(favorite_spots) == 3, \"You should now have 3 restaurants\"\nprint(\"Updated restaurant list:\", favorite_spots)",
    "crumbs": [
      "02 Explore/Exploit",
      "02-01 - Lists"
    ]
  },
  {
    "objectID": "tutorials/tut_02_01_lists.html#exercise-2.1---access-restaurant-info",
    "href": "tutorials/tut_02_01_lists.html#exercise-2.1---access-restaurant-info",
    "title": "Tutorial II.I - Lists and Tuples",
    "section": "Exercise 2.1 - Access Restaurant Info",
    "text": "Exercise 2.1 - Access Restaurant Info\nUsing the restaurant_data list above, create variables best_restaurant and best_rating containing the name and rating of the restaurant with the highest rating. You’ll need to:\n\nLook at each restaurant’s rating (position 1 in each inner list)\nKeep track of the highest rating and its restaurant name\n\n\nrestaurant_data = [\n    [\"Pasta Place\", 4.5, 3],\n    [\"Sushi Bar\", 4.2, 1],\n    [\"Burger Joint\", 3.8, 2]\n]\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert best_restaurant == \"Pasta Place\", \"Should be the restaurant with highest rating\"\nassert best_rating == 4.5, \"Should be the highest rating\"\nprint(f\"The best restaurant is {best_restaurant} with a rating of {best_rating}\")",
    "crumbs": [
      "02 Explore/Exploit",
      "02-01 - Lists"
    ]
  },
  {
    "objectID": "tutorials/tut_02_01_lists.html#why-use-tuples",
    "href": "tutorials/tut_02_01_lists.html#why-use-tuples",
    "title": "Tutorial II.I - Lists and Tuples",
    "section": "Why use tuples?",
    "text": "Why use tuples?\n\nThey protect data that shouldn’t change\nThey use less memory than lists\nThey can be used as dictionary keys (which we’ll learn about later)\n\n\n\n\n\n\n\nTip\n\n\n\nThink of tuples as sealed envelopes - once you seal them, you can’t change what’s inside. Lists are like notebooks where you can add or remove pages.",
    "crumbs": [
      "02 Explore/Exploit",
      "02-01 - Lists"
    ]
  },
  {
    "objectID": "tutorials/tut_02_01_lists.html#exercise-3.1---create-restaurant-profile",
    "href": "tutorials/tut_02_01_lists.html#exercise-3.1---create-restaurant-profile",
    "title": "Tutorial II.I - Lists and Tuples",
    "section": "Exercise 3.1 - Create Restaurant Profile",
    "text": "Exercise 3.1 - Create Restaurant Profile\nCreate a tuple restaurant_profile with three elements: restaurant name, cuisine type, and founding year. You can freely choose the values for these elements, just make sure they are of the correct type.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert isinstance(restaurant_profile, tuple), \"Should be a tuple\"\nassert len(restaurant_profile) == 3, \"Should have exactly 3 elements\"\nassert isinstance(restaurant_profile[0], str), \"First element should be a string (name)\"\nassert isinstance(restaurant_profile[1], str), \"Second element should be a string (cuisine)\"\nassert isinstance(restaurant_profile[2], int), \"Third element should be an integer (year)\"\nprint(\"Restaurant profile:\", restaurant_profile)",
    "crumbs": [
      "02 Explore/Exploit",
      "02-01 - Lists"
    ]
  },
  {
    "objectID": "tutorials/tut_01_02_comparisons.html",
    "href": "tutorials/tut_01_02_comparisons.html",
    "title": "Tutorial I.II - Comparison Operators",
    "section": "",
    "text": "You’re teaching a computer to make decisions. Just like we compare things in everyday life (“Is it raining?”, “Do I have enough money?”), computers need ways to compare values and make choices. Let’s look at this in the context of hiring decisions to help us how to make decisions in the context of optimal stopping problems.\nImagine you’re helping a company make hiring decisions. You need to look at different candidates and decide if they meet certain requirements. To make these decisions with Python, we need to learn how to make comparisons!",
    "crumbs": [
      "01 Optimal Stopping",
      "01-02 - Comparisons"
    ]
  },
  {
    "objectID": "tutorials/tut_01_02_comparisons.html#exercise-1.1---compare-test-scores",
    "href": "tutorials/tut_01_02_comparisons.html#exercise-1.1---compare-test-scores",
    "title": "Tutorial I.II - Comparison Operators",
    "section": "Exercise 1.1 - Compare Test Scores",
    "text": "Exercise 1.1 - Compare Test Scores\nA candidate scored 95 on their test. The previous highest score was 88. Create a comparison to check if the new score is better and store the result in compare_scores.\n\n# Creates the variables\nnew_score = 95\nprevious_best = 88\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert compare_scores == True, \"The new score should be greater than the previous best\"\nprint(f\"Is new score better? {compare_scores}\")",
    "crumbs": [
      "01 Optimal Stopping",
      "01-02 - Comparisons"
    ]
  },
  {
    "objectID": "tutorials/tut_01_02_comparisons.html#exercise-1.2---compare-skills",
    "href": "tutorials/tut_01_02_comparisons.html#exercise-1.2---compare-skills",
    "title": "Tutorial I.II - Comparison Operators",
    "section": "Exercise 1.2 - Compare Skills",
    "text": "Exercise 1.2 - Compare Skills\nCheck if a candidate’s skill matches what we need. Compare if the following two variables are different and store the result in compare_skills.\n\ncandidate_skill = \"Finance\"\nrequired_skill = \"Python\"\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert compare_skills == False, \"The candidate's skill should not match the required skill\"\nprint(\"Good job! You correctly identified that the skills are different\")",
    "crumbs": [
      "01 Optimal Stopping",
      "01-02 - Comparisons"
    ]
  },
  {
    "objectID": "tutorials/tut_01_02_comparisons.html#exercise-1.3---compare-candidates",
    "href": "tutorials/tut_01_02_comparisons.html#exercise-1.3---compare-candidates",
    "title": "Tutorial I.II - Comparison Operators",
    "section": "Exercise 1.3 - Compare Candidates",
    "text": "Exercise 1.3 - Compare Candidates\nIn the secretary problem, we need to compare candidates to the best we’ve seen. Check if the current candidate is better than our best so far and store the result in is_better.\n\ncurrent_rating = 92\nbest_so_far = 88\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert is_better == True, \"The current candidate should be better than the best so far\"\nprint(\"Good job! You correctly identified that the current candidate is better than the best so far\")",
    "crumbs": [
      "01 Optimal Stopping",
      "01-02 - Comparisons"
    ]
  },
  {
    "objectID": "tutorials/tut_01_02_comparisons.html#exercise-2.1---check-multiple-requirements",
    "href": "tutorials/tut_01_02_comparisons.html#exercise-2.1---check-multiple-requirements",
    "title": "Tutorial I.II - Comparison Operators",
    "section": "Exercise 2.1 - Check Multiple Requirements",
    "text": "Exercise 2.1 - Check Multiple Requirements\nWe have a candidate with:\n\n4 years of experience\nTest score of 90\n\nCheck if they meet BOTH requirements:\n\nMore than 3 years experience\nTest score above 85\n\nStore the result in meets_requirements.\n\nyears = 4\nscore = 90\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert meets_requirements == True, \"The candidate should meet both requirements\"\nprint(\"Good job! You correctly identified that the candidate meets both requirements\")",
    "crumbs": [
      "01 Optimal Stopping",
      "01-02 - Comparisons"
    ]
  },
  {
    "objectID": "tutorials/tut_01_02_comparisons.html#exercise-2.2---alternative-requirements",
    "href": "tutorials/tut_01_02_comparisons.html#exercise-2.2---alternative-requirements",
    "title": "Tutorial I.II - Comparison Operators",
    "section": "Exercise 2.2 - Alternative Requirements",
    "text": "Exercise 2.2 - Alternative Requirements\nA candidate is acceptable if they EITHER:\n\nHave a PhD\nOR have a high test score (above 95)\n\nStore the result in is_qualified\n\nhas_phd = True\ntest_score = 92\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert is_qualified == True, \"The candidate should be qualified\"\nprint(\"Good job! You correctly identified that the candidate is qualified\")",
    "crumbs": [
      "01 Optimal Stopping",
      "01-02 - Comparisons"
    ]
  },
  {
    "objectID": "tutorials/tut_01_02_comparisons.html#exercise-3.1---make-a-hiring-decision",
    "href": "tutorials/tut_01_02_comparisons.html#exercise-3.1---make-a-hiring-decision",
    "title": "Tutorial I.II - Comparison Operators",
    "section": "Exercise 3.1 - Make a Hiring Decision",
    "text": "Exercise 3.1 - Make a Hiring Decision\nLook at the following candidate’s information and decide if we should hire them:\nRequirements:\n\nAt least 5 years experience\nTest score above 85\nSalary request at most 90000\nMust have a degree\n\nCreate a single boolean expression that checks ALL requirements and store the result in final_decision.\n\n# Candidate information\ncandidate_experience = 7\ncandidate_score = 89\ncandidate_salary = 92000\ncandidate_has_degree = True\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert final_decision == False, \"The candidate should not meet all requirements\"\nprint(\"Good job! You correctly identified that the candidate does not meet all requirements as his salary expectation is too high.\")",
    "crumbs": [
      "01 Optimal Stopping",
      "01-02 - Comparisons"
    ]
  },
  {
    "objectID": "tutorials/tut_01_02_comparisons.html#exercise-2.3---optimal-stopping-decision",
    "href": "tutorials/tut_01_02_comparisons.html#exercise-2.3---optimal-stopping-decision",
    "title": "Tutorial I.II - Comparison Operators",
    "section": "Exercise 2.3 - Optimal Stopping Decision",
    "text": "Exercise 2.3 - Optimal Stopping Decision\nWe have:\n\nSeen 18 out of 40 candidates\nCurrent candidate score: 90\nBest score so far: 85\n\nCheck if we should hire this candidate (we should hire if we’ve seen at least 37% of candidates AND this candidate is better than the best so far).\nStore the result in make_offer.\n\n# Candidate information\ncandidates_seen = 18\ntotal_candidates = 40\ncurrent_score = 90\nbest_score_so_far = 85\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert make_offer == True, \"We should hire this candidate\"\nprint(\"Good job! You correctly identified that we should hire this candidate\")",
    "crumbs": [
      "01 Optimal Stopping",
      "01-02 - Comparisons"
    ]
  },
  {
    "objectID": "lectures/tut_05_01_presentation.html#using-ai-to-generate-code",
    "href": "lectures/tut_05_01_presentation.html#using-ai-to-generate-code",
    "title": "Tutorial V.I - Programming with AI",
    "section": "Using AI to generate code",
    "text": "Using AI to generate code\n\nCoding by hand is not the only way to generate code\nMost likely, a lot of you have already used ChatGPT"
  },
  {
    "objectID": "lectures/tut_05_01_presentation.html#section",
    "href": "lectures/tut_05_01_presentation.html#section",
    "title": "Tutorial V.I - Programming with AI",
    "section": "",
    "text": "How do\nLarge Language\nModels work?\n\n\nPhoto by Taylor Vick on Unsplash"
  },
  {
    "objectID": "lectures/tut_05_01_presentation.html#large-language-models-llms",
    "href": "lectures/tut_05_01_presentation.html#large-language-models-llms",
    "title": "Tutorial V.I - Programming with AI",
    "section": "Large Language Models (LLMs)",
    "text": "Large Language Models (LLMs)\n\nThink of them like advanced pattern recognition systems\nThey have “read” massive amounts of text\nBooks, websites, articles, code, and more\nText is broken into tokens, parts of words or punctuation\nBased on patterns, they can generate new text"
  },
  {
    "objectID": "lectures/tut_05_01_presentation.html#training-llms",
    "href": "lectures/tut_05_01_presentation.html#training-llms",
    "title": "Tutorial V.I - Programming with AI",
    "section": "Training LLMs",
    "text": "Training LLMs\n\nImagine learning a language by reading millions of books\nLearns patterns in how words and ideas connect via tokens\nInterconnected nodes with weights representing patterns\nDuring training, these weights are adjusted\nOnce trained, applying them takes much less ressources"
  },
  {
    "objectID": "lectures/tut_05_01_presentation.html#pattern-recognition",
    "href": "lectures/tut_05_01_presentation.html#pattern-recognition",
    "title": "Tutorial V.I - Programming with AI",
    "section": "Pattern Recognition",
    "text": "Pattern Recognition\n\nNot like a search engine!\nWhen asked, it looks for relevant patterns it learned\nLike having a huge library in its “memory” to draw from\nIt can find patterns between concepts and your question\nKnows only limited text at once (context window)"
  },
  {
    "objectID": "lectures/tut_05_01_presentation.html#probability-based-responses",
    "href": "lectures/tut_05_01_presentation.html#probability-based-responses",
    "title": "Tutorial V.I - Programming with AI",
    "section": "Probability based responses",
    "text": "Probability based responses\n\nAfter each token, it predicts “what should come next?”\nLike a advanced word prediction on your phone\nChooses the most likely next token based on training\nUses randomness to generate different responses\nBut can’t actually “think” or “understand” like humans"
  },
  {
    "objectID": "lectures/tut_05_01_presentation.html#limitations",
    "href": "lectures/tut_05_01_presentation.html#limitations",
    "title": "Tutorial V.I - Programming with AI",
    "section": "Limitations",
    "text": "Limitations\n\nNo true understanding of cause and effect\nSometimes makes mistakes or “hallucinates”\nMostly only knows what it was trained on\nCan reflect biases present in training data\nNo emotional understanding (but can simulate responses!)"
  },
  {
    "objectID": "lectures/tut_05_01_presentation.html#impact-on-jobs",
    "href": "lectures/tut_05_01_presentation.html#impact-on-jobs",
    "title": "Tutorial V.I - Programming with AI",
    "section": "Impact on Jobs",
    "text": "Impact on Jobs\n\nQuestion: What do you think about their impact on jobs?\nQuestion: What are the implications for us?\nQuestion: Can we use them to our advantage?"
  },
  {
    "objectID": "lectures/tut_05_01_presentation.html#current-choices-for-programmers",
    "href": "lectures/tut_05_01_presentation.html#current-choices-for-programmers",
    "title": "Tutorial V.I - Programming with AI",
    "section": "(Current) Choices for Programmers",
    "text": "(Current) Choices for Programmers\n\nGithub Copilot: Integrated into VS Code by Microsoft\nCursor: Fork of VS Code with AI assistance built in\nAider: Chat interface for AI to write code in the terminal\n\n\n\n\n\n\n\n\nTip\n\n\nCurrently, Cursor is my favorite one. But this might change in the future, as there is a lot of competition in this space."
  },
  {
    "objectID": "lectures/tut_05_01_presentation.html#installing-cursor",
    "href": "lectures/tut_05_01_presentation.html#installing-cursor",
    "title": "Tutorial V.I - Programming with AI",
    "section": "Installing Cursor",
    "text": "Installing Cursor\n\nGo to Cursor\nDownload and install Cursor\nYou will need to create an account\nSome free usage per month, after that you need to pay\nFor us, the free plan should be more than enough"
  },
  {
    "objectID": "lectures/tut_05_01_presentation.html#using-cursor",
    "href": "lectures/tut_05_01_presentation.html#using-cursor",
    "title": "Tutorial V.I - Programming with AI",
    "section": "Using Cursor",
    "text": "Using Cursor\n\nOpen the folder with your tutorial files\nInstead of notebooks, we will use .py files\nCreate a new .py file\nPress Ctrl + L to open the chat"
  },
  {
    "objectID": "lectures/tut_05_01_presentation.html#asking-for-help",
    "href": "lectures/tut_05_01_presentation.html#asking-for-help",
    "title": "Tutorial V.I - Programming with AI",
    "section": "Asking for help",
    "text": "Asking for help\nTask: Paste the following prompt in to the chat:\nCan you please write me a small random number guessing game in python? It should work for one player in the terminal. The player should guess a number between 1-10 and get hints about whether his guess was too large or too small. After 3 tries, end the game if he didn’t succeed with a nice message.\n\nCopy the generated code and paste it into your file."
  },
  {
    "objectID": "lectures/tut_05_01_presentation.html#more-on-cursor",
    "href": "lectures/tut_05_01_presentation.html#more-on-cursor",
    "title": "Tutorial V.I - Programming with AI",
    "section": "More on Cursor",
    "text": "More on Cursor\n\nWhile working with Cursor, it will suggest you code changes\nYou can accept or reject them\nThe rest you will learn by doing!\n\n\n\n\n\n\n\n\nNote\n\n\nAnd that’s it for the introduction to AI!\nYou now have the basic knowledge to start working with AI!."
  },
  {
    "objectID": "lectures/tut_05_01_llm.html",
    "href": "lectures/tut_05_01_llm.html",
    "title": "Tutorial V.I - Programming with AI",
    "section": "",
    "text": "Coding by hand is not the only way to generate code\nMost likely, a lot of you have already used ChatGPT\n\n. . .",
    "crumbs": [
      "05 Randomness",
      "13 - LLM"
    ]
  },
  {
    "objectID": "lectures/tut_05_01_llm.html#using-ai-to-generate-code",
    "href": "lectures/tut_05_01_llm.html#using-ai-to-generate-code",
    "title": "Tutorial V.I - Programming with AI",
    "section": "",
    "text": "Coding by hand is not the only way to generate code\nMost likely, a lot of you have already used ChatGPT\n\n. . .",
    "crumbs": [
      "05 Randomness",
      "13 - LLM"
    ]
  },
  {
    "objectID": "lectures/tut_05_01_llm.html#section",
    "href": "lectures/tut_05_01_llm.html#section",
    "title": "Tutorial V.I - Programming with AI",
    "section": "",
    "text": "How do\nLarge Language\nModels work?\n\n\nPhoto by Taylor Vick on Unsplash",
    "crumbs": [
      "05 Randomness",
      "13 - LLM"
    ]
  },
  {
    "objectID": "lectures/tut_05_01_llm.html#large-language-models-llms",
    "href": "lectures/tut_05_01_llm.html#large-language-models-llms",
    "title": "Tutorial V.I - Programming with AI",
    "section": "Large Language Models (LLMs)",
    "text": "Large Language Models (LLMs)\n\nThink of them like advanced pattern recognition systems\nThey have “read” massive amounts of text\nBooks, websites, articles, code, and more\nText is broken into tokens, parts of words or punctuation\nBased on patterns, they can generate new text",
    "crumbs": [
      "05 Randomness",
      "13 - LLM"
    ]
  },
  {
    "objectID": "lectures/tut_05_01_llm.html#training-llms",
    "href": "lectures/tut_05_01_llm.html#training-llms",
    "title": "Tutorial V.I - Programming with AI",
    "section": "Training LLMs",
    "text": "Training LLMs\n\nImagine learning a language by reading millions of books\nLearns patterns in how words and ideas connect via tokens\nInterconnected nodes with weights representing patterns\nDuring training, these weights are adjusted\nOnce trained, applying them takes much less ressources",
    "crumbs": [
      "05 Randomness",
      "13 - LLM"
    ]
  },
  {
    "objectID": "lectures/tut_05_01_llm.html#pattern-recognition",
    "href": "lectures/tut_05_01_llm.html#pattern-recognition",
    "title": "Tutorial V.I - Programming with AI",
    "section": "Pattern Recognition",
    "text": "Pattern Recognition\n\nNot like a search engine!\nWhen asked, it looks for relevant patterns it learned\nLike having a huge library in its “memory” to draw from\nIt can find patterns between concepts and your question\nKnows only limited text at once (context window)",
    "crumbs": [
      "05 Randomness",
      "13 - LLM"
    ]
  },
  {
    "objectID": "lectures/tut_05_01_llm.html#probability-based-responses",
    "href": "lectures/tut_05_01_llm.html#probability-based-responses",
    "title": "Tutorial V.I - Programming with AI",
    "section": "Probability based responses",
    "text": "Probability based responses\n\nAfter each token, it predicts “what should come next?”\nLike a advanced word prediction on your phone\nChooses the most likely next token based on training\nUses randomness to generate different responses\nBut can’t actually “think” or “understand” like humans",
    "crumbs": [
      "05 Randomness",
      "13 - LLM"
    ]
  },
  {
    "objectID": "lectures/tut_05_01_llm.html#limitations",
    "href": "lectures/tut_05_01_llm.html#limitations",
    "title": "Tutorial V.I - Programming with AI",
    "section": "Limitations",
    "text": "Limitations\n\nNo true understanding of cause and effect\nSometimes makes mistakes or “hallucinates”\nMostly only knows what it was trained on\nCan reflect biases present in training data\nNo emotional understanding (but can simulate responses!)",
    "crumbs": [
      "05 Randomness",
      "13 - LLM"
    ]
  },
  {
    "objectID": "lectures/tut_05_01_llm.html#impact-on-jobs",
    "href": "lectures/tut_05_01_llm.html#impact-on-jobs",
    "title": "Tutorial V.I - Programming with AI",
    "section": "Impact on Jobs",
    "text": "Impact on Jobs\n\n\nQuestion: What do you think about their impact on jobs?\nQuestion: What are the implications for us?\nQuestion: Can we use them to our advantage?",
    "crumbs": [
      "05 Randomness",
      "13 - LLM"
    ]
  },
  {
    "objectID": "lectures/tut_05_01_llm.html#current-choices-for-programmers",
    "href": "lectures/tut_05_01_llm.html#current-choices-for-programmers",
    "title": "Tutorial V.I - Programming with AI",
    "section": "(Current) Choices for Programmers",
    "text": "(Current) Choices for Programmers\n\nGithub Copilot: Integrated into VS Code by Microsoft\nCursor: Fork of VS Code with AI assistance built in\nAider: Chat interface for AI to write code in the terminal\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nCurrently, Cursor is my favorite one. But this might change in the future, as there is a lot of competition in this space.",
    "crumbs": [
      "05 Randomness",
      "13 - LLM"
    ]
  },
  {
    "objectID": "lectures/tut_05_01_llm.html#installing-cursor",
    "href": "lectures/tut_05_01_llm.html#installing-cursor",
    "title": "Tutorial V.I - Programming with AI",
    "section": "Installing Cursor",
    "text": "Installing Cursor\n\nGo to Cursor\nDownload and install Cursor\nYou will need to create an account\nSome free usage per month, after that you need to pay\nFor us, the free plan should be more than enough",
    "crumbs": [
      "05 Randomness",
      "13 - LLM"
    ]
  },
  {
    "objectID": "lectures/tut_05_01_llm.html#using-cursor",
    "href": "lectures/tut_05_01_llm.html#using-cursor",
    "title": "Tutorial V.I - Programming with AI",
    "section": "Using Cursor",
    "text": "Using Cursor\n\nOpen the folder with your tutorial files\nInstead of notebooks, we will use .py files\nCreate a new .py file\nPress Ctrl + L to open the chat",
    "crumbs": [
      "05 Randomness",
      "13 - LLM"
    ]
  },
  {
    "objectID": "lectures/tut_05_01_llm.html#asking-for-help",
    "href": "lectures/tut_05_01_llm.html#asking-for-help",
    "title": "Tutorial V.I - Programming with AI",
    "section": "Asking for help",
    "text": "Asking for help\nTask: Paste the following prompt in to the chat:\nCan you please write me a small random number guessing game in python? It should work for one player in the terminal. The player should guess a number between 1-10 and get hints about whether his guess was too large or too small. After 3 tries, end the game if he didn’t succeed with a nice message.\n. . .\nCopy the generated code and paste it into your file.",
    "crumbs": [
      "05 Randomness",
      "13 - LLM"
    ]
  },
  {
    "objectID": "lectures/tut_05_01_llm.html#more-on-cursor",
    "href": "lectures/tut_05_01_llm.html#more-on-cursor",
    "title": "Tutorial V.I - Programming with AI",
    "section": "More on Cursor",
    "text": "More on Cursor\n\nWhile working with Cursor, it will suggest you code changes\nYou can accept or reject them\nThe rest you will learn by doing!\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nAnd that’s it for the introduction to AI!\nYou now have the basic knowledge to start working with AI!.",
    "crumbs": [
      "05 Randomness",
      "13 - LLM"
    ]
  },
  {
    "objectID": "lectures/lec_05_presentation.html#randomness",
    "href": "lectures/lec_05_presentation.html#randomness",
    "title": "Lecture V - Randomness",
    "section": "Randomness",
    "text": "Randomness\nQuestion: What comes to your mind when you think of randomness?"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#casino",
    "href": "lectures/lec_05_presentation.html#casino",
    "title": "Lecture V - Randomness",
    "section": "Casino",
    "text": "Casino"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#lottery",
    "href": "lectures/lec_05_presentation.html#lottery",
    "title": "Lecture V - Randomness",
    "section": "Lottery",
    "text": "Lottery"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#shuffling-cards",
    "href": "lectures/lec_05_presentation.html#shuffling-cards",
    "title": "Lecture V - Randomness",
    "section": "Shuffling cards",
    "text": "Shuffling cards"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#algorithms",
    "href": "lectures/lec_05_presentation.html#algorithms",
    "title": "Lecture V - Randomness",
    "section": "Algorithms",
    "text": "Algorithms"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#cryptography",
    "href": "lectures/lec_05_presentation.html#cryptography",
    "title": "Lecture V - Randomness",
    "section": "Cryptography",
    "text": "Cryptography"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#genetic-mutations",
    "href": "lectures/lec_05_presentation.html#genetic-mutations",
    "title": "Lecture V - Randomness",
    "section": "Genetic mutations",
    "text": "Genetic mutations"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#why-randomness-matters",
    "href": "lectures/lec_05_presentation.html#why-randomness-matters",
    "title": "Lecture V - Randomness",
    "section": "Why Randomness Matters",
    "text": "Why Randomness Matters\nQuestion: What’s the opposite of randomness?\n\n\nDeterminism\nPredictability\nConsistency\n\n\n\n\nBoredom?"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#discovery-by-randomness",
    "href": "lectures/lec_05_presentation.html#discovery-by-randomness",
    "title": "Lecture V - Randomness",
    "section": "Discovery by Randomness",
    "text": "Discovery by Randomness\nQuestion: How would you test if a pair of dice is fair?\n\n\nSend the dice to a lab to check weight and balance\n\n\n\n\nRoll the dice many times\nCheck if the outcomes are uniformly distributed\nCompare observed frequencies to expected frequencies"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#dice-rolls",
    "href": "lectures/lec_05_presentation.html#dice-rolls",
    "title": "Lecture V - Randomness",
    "section": "Dice Rolls",
    "text": "Dice Rolls"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#using-randomness",
    "href": "lectures/lec_05_presentation.html#using-randomness",
    "title": "Lecture V - Randomness",
    "section": "Using Randomness",
    "text": "Using Randomness\n\nRandomness is a fundamental aspect of the world\nIt can be used for discovery\nRandomness is used to model uncertainty\nIt is used to explore solutions and avoid bias\n\n\n\n\n\n\n\n\nImportant\n\n\nEven in computer science, randomness is not just about generating random numbers!"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#randomness-and-everyday-life",
    "href": "lectures/lec_05_presentation.html#randomness-and-everyday-life",
    "title": "Lecture V - Randomness",
    "section": "Randomness and Everyday Life",
    "text": "Randomness and Everyday Life\nQuestion: Where do you encounter randomness in daily life?"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#social-life",
    "href": "lectures/lec_05_presentation.html#social-life",
    "title": "Lecture V - Randomness",
    "section": "Social Life",
    "text": "Social Life\n\nDating apps use randomized matching within preferences\nRandom encounters that lead to friendships\nRandom opportunities leading to career changes\nBreaking ties through coin tosses"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#entertainment-industry",
    "href": "lectures/lec_05_presentation.html#entertainment-industry",
    "title": "Lecture V - Randomness",
    "section": "Entertainment Industry",
    "text": "Entertainment Industry\n\nPokémon’s “random” encounters are weighted by rarity\nLoot systems: Rare items have controlled drop rates\nChess AI introduces randomness to feel more human-like\nSpotify’s shuffle is deliberately less random to feel natural\nTikTok uses controlled randomization to optimize discovery"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#cryptography-1",
    "href": "lectures/lec_05_presentation.html#cryptography-1",
    "title": "Lecture V - Randomness",
    "section": "Cryptography",
    "text": "Cryptography\n\nCoin miners solve cryptographic puzzles using guesses\nPW generators balance randomness and memorability\ncorrect-horse-battery-staple is secure\nTr0ub4dor&3 is less secure despite looking complex\nModern encryption uses random numbers"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#data-science",
    "href": "lectures/lec_05_presentation.html#data-science",
    "title": "Lecture V - Randomness",
    "section": "Data Science",
    "text": "Data Science\n\nWeather forecasting uses randomness for uncertainty\nStock algorithms add randomness to avoid patterns\nSelf-driving cars add randomness for natural-feeling\nRandom sampling in research for unbiased results\n\n\n\n\n\n\n\n\nNote\n\n\nRandomness is everywhere around us!"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#randomness-in-computer-science",
    "href": "lectures/lec_05_presentation.html#randomness-in-computer-science",
    "title": "Lecture V - Randomness",
    "section": "Randomness in Computer Science",
    "text": "Randomness in Computer Science\n\nFundamental concept in computer science\nHelps solve “hard” problems efficiently\nOften faster than deterministic approaches\nTrade-off: Optimal vs. “Good Enough” solutions\n\n\n\n\n\n\n\n\nImportant\n\n\nSometimes a quick “good enough” solution is better than waiting for the perfect one."
  },
  {
    "objectID": "lectures/lec_05_presentation.html#types-of-randomness",
    "href": "lectures/lec_05_presentation.html#types-of-randomness",
    "title": "Lecture V - Randomness",
    "section": "Types of Randomness",
    "text": "Types of Randomness\nQuestion: Difference between true and pseudo-randomness?\n\n\n\nTrue Randomness\n\nPhysical phenomena\nAtmospheric noise\nRadioactive decay\nQuantum effects\n\n\nPseudo-randomness\n\nDeterministic algorithms\nSeed-based generation\nRepeatable sequences\nGood enough for most uses"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#limits-of-computation",
    "href": "lectures/lec_05_presentation.html#limits-of-computation",
    "title": "Lecture V - Randomness",
    "section": "Limits of Computation",
    "text": "Limits of Computation\nQuestion: How many possible combinations exist in a shuffled deck of cards?\n\nimport math\nprint(math.factorial(52))\n\n\n\n80658175170943878571660636856403766975289505440883277824000000000000\n\n\n\n\n\n\n\n\n\nImportant\n\n\nComputing and evaluating all possible combinations is not feasible!"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#addressing-computational-limits",
    "href": "lectures/lec_05_presentation.html#addressing-computational-limits",
    "title": "Lecture V - Randomness",
    "section": "Addressing Computational Limits",
    "text": "Addressing Computational Limits\nQuestion: Anybody ever heard of “Monte Carlo methods”?\n\n\nDeveloped in the 1940s for nuclear weapons research\nNuclear fission chain reactions were too complex\nHelped to evaluate the probabilities of different outcomes\nNamed after Monaco’s famous casino\n\n\n\nQuestion: How could we estimate π?"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#estimating-π",
    "href": "lectures/lec_05_presentation.html#estimating-π",
    "title": "Lecture V - Randomness",
    "section": "Estimating π",
    "text": "Estimating π"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#travel-itinerary",
    "href": "lectures/lec_05_presentation.html#travel-itinerary",
    "title": "Lecture V - Randomness",
    "section": "Travel Itinerary",
    "text": "Travel Itinerary\nQuestion: How and in which order would you visit 10 cities by plane with minimal total distance?\n\nimport math\nprint(math.factorial(10))\n\n\n\n3628800\n\n\n\nQuestion: What could be a strategy?"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#brute-force",
    "href": "lectures/lec_05_presentation.html#brute-force",
    "title": "Lecture V - Randomness",
    "section": "Brute Force",
    "text": "Brute Force\n\nTry every possibility\nTotal possible routes: 10! = 3,628,800\nGuaranteed to find best solution\nIf each check takes 1ms: 1 hour to check all routes\n\n\nQuestion: What could be the problem with this approach?"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#time-and-space-requirements",
    "href": "lectures/lec_05_presentation.html#time-and-space-requirements",
    "title": "Lecture V - Randomness",
    "section": "Time and Space Requirements",
    "text": "Time and Space Requirements\n\nFor 20 cities: 20! = 2.4 quintillion routes\nWould take 77 billion years at 1ms per check!\nTime complexity grows factorially\nMemory requirements increase with problem size\n\n\n\n\n\n\n\n\nImportant\n\n\nNot feasible for real-world problems!"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#greedy-algorithm",
    "href": "lectures/lec_05_presentation.html#greedy-algorithm",
    "title": "Lecture V - Randomness",
    "section": "Greedy Algorithm",
    "text": "Greedy Algorithm\n\nExample: Always picking shortest next flight\nMake locally optimal choices at each step\nNever backtracks or reconsiders past decisions\nFast execution & simple to implement\nCan perform poorly on complex problems"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#hill-climbing",
    "href": "lectures/lec_05_presentation.html#hill-climbing",
    "title": "Lecture V - Randomness",
    "section": "Hill Climbing",
    "text": "Hill Climbing\n\nIteratively improve solution by making small changes\nLike climbing in fog, can only see immediate surroundings\nDon’t know if higher peaks exist elsewhere\nCan get stuck in local optima\nNo guarantee of finding global best optima\n\n\nQuestion: How would you escape a local optimum?"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#simulated-annealing",
    "href": "lectures/lec_05_presentation.html#simulated-annealing",
    "title": "Lecture V - Randomness",
    "section": "Simulated Annealing",
    "text": "Simulated Annealing\n\nMake random changes and accept improvements\nSometimes accept worse solutions\nGradually become more selective\n\n\nQuestion: Why accept worse solutions sometimes?\n\n\n\nRandomness helps to escape local optima\nBalances exploration vs. exploitation"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#simulated-annealing-animation",
    "href": "lectures/lec_05_presentation.html#simulated-annealing-animation",
    "title": "Lecture V - Randomness",
    "section": "Simulated Annealing Animation",
    "text": "Simulated Annealing Animation"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#traveling-salesman",
    "href": "lectures/lec_05_presentation.html#traveling-salesman",
    "title": "Lecture V - Randomness",
    "section": "Traveling Salesman",
    "text": "Traveling Salesman"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#thought-experiment",
    "href": "lectures/lec_05_presentation.html#thought-experiment",
    "title": "Lecture V - Randomness",
    "section": "Thought Experiment",
    "text": "Thought Experiment\nWhat’s more important for a society?\n\n\n\nFreedom\n\nIndividual choice\nPersonal responsibility\nMarket-driven\n\n\nEquality\n\nShared resources\nSocial safety nets\nRegulated systems\n\n\n\n\nQuestion: Any problem with this question?"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#veil-of-ignorance",
    "href": "lectures/lec_05_presentation.html#veil-of-ignorance",
    "title": "Lecture V - Randomness",
    "section": "Veil of Ignorance",
    "text": "Veil of Ignorance\nYou might randomly be:\n\nAny gender identity and economic status\nAny health condition and intelligence level\nAny cultural background and religious belief\n\n\nQuestion: If you didn’t know who you’d be born as, what kind of society would you design?"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#key-considerations",
    "href": "lectures/lec_05_presentation.html#key-considerations",
    "title": "Lecture V - Randomness",
    "section": "Key Considerations",
    "text": "Key Considerations\n\nIndividual stories: Powerful but potentially misleading\nStatistics: Comprehensive but can miss nuance\nHidden diversity: Important subgroups may be overlooked\nSmall policy changes can have cascading effects\n\n\n\n\n\n\n\n\nImportant\n\n\nBut that’s not all! We also need to measure success and failure!"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#measuring-success",
    "href": "lectures/lec_05_presentation.html#measuring-success",
    "title": "Lecture V - Randomness",
    "section": "Measuring Success",
    "text": "Measuring Success\n\nMean happiness: Average well-being\nTotal happiness: Utilitarian approach\nMedian happiness: Focus on the middle class\nMinimum happiness: Protecting the most vulnerable\n\n\nQuestion: What could be the problem with these measures?"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#idea-random-sampling",
    "href": "lectures/lec_05_presentation.html#idea-random-sampling",
    "title": "Lecture V - Randomness",
    "section": "Idea: Random Sampling",
    "text": "Idea: Random Sampling\n\nRandomly select a subset of the population\nGather diverse perspectives from the sample\nBetter understand needs of population\nReduce selection bias and improve accuracy\n\n\nQuestion: What is a selection bias?"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#selection-bias",
    "href": "lectures/lec_05_presentation.html#selection-bias",
    "title": "Lecture V - Randomness",
    "section": "Selection Bias",
    "text": "Selection Bias\nDefinition: Selection bias occurs when the sample data you’re analyzing isn’t truly representative of the population you’re trying to study.\n\n\n\n\n\n\n\nFamous Example\n\n\nDuring WWII, engineers studied returning planes to determine where to add armor. Initially, they focused on areas with most bullet holes. Abraham Wald pointed out they should instead armor the areas with no bullet holes - those were the critical areas where planes didn’t survive to return!"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#promoting-fairness",
    "href": "lectures/lec_05_presentation.html#promoting-fairness",
    "title": "Lecture V - Randomness",
    "section": "Promoting Fairness",
    "text": "Promoting Fairness\nQuestion: How can randomness promote fairness?\n\n\nRandom allocation of patients in clinical trials\nRandom audits for tax compliance\nRandom assignment of cases to judges\nRandom order of candidates on voting ballots"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#quick-poll",
    "href": "lectures/lec_05_presentation.html#quick-poll",
    "title": "Lecture V - Randomness",
    "section": "Quick Poll",
    "text": "Quick Poll\nQuestion: Which would you prefer?\n\n100% chance of winning 50 EUR\n50% chance of winning 120 EUR\n\n\n\n\n\n\n\n\nTip\n\n\nAnswer depends on your risk aversion!"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#decisions-under-uncertainty",
    "href": "lectures/lec_05_presentation.html#decisions-under-uncertainty",
    "title": "Lecture V - Randomness",
    "section": "Decisions Under Uncertainty",
    "text": "Decisions Under Uncertainty\nQuestion: When should we embrace vs. reduce randomness?\n\n\n\nEmbrace When:\n\nExploring new solutions\nAvoiding bias\nBreaking deadlocks\nTesting systems\n\n\nReduce When:\n\nSafety-critical systems\nFinancial transactions\nMedical procedures\nLegal proceedings"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#good-enough-solutions",
    "href": "lectures/lec_05_presentation.html#good-enough-solutions",
    "title": "Lecture V - Randomness",
    "section": "“Good Enough” Solutions",
    "text": "“Good Enough” Solutions\n\nPerfect is enemy of good\n\nRemember Monte Carlo methods: approximations work\nComplete analysis often impossible\nPerfect information is rare\n\n\n\n\n\n\n\n\n\nTip\n\n\nMany real-world problems benefit from embracing uncertainty rather than fighting it!"
  },
  {
    "objectID": "lectures/lec_05_presentation.html#opportunity-costs",
    "href": "lectures/lec_05_presentation.html#opportunity-costs",
    "title": "Lecture V - Randomness",
    "section": "Opportunity Costs",
    "text": "Opportunity Costs\n\nConsider opportunity costs\n\nQuick approximations enable faster decisions\nBalance accuracy vs. computation time\nRandom sampling vs. complete enumeration\n\n\n\n\n\n\n\n\n\nTip\n\n\nMany problems benefit from fast, good-enough solutions rather than perfect ones."
  },
  {
    "objectID": "lectures/lec_05_presentation.html#the-end",
    "href": "lectures/lec_05_presentation.html#the-end",
    "title": "Lecture V - Randomness",
    "section": "The End",
    "text": "The End\n\n\n\n\n\n\nNote\n\n\nThat’s it for today’s lecture!\nWe’ve covered the basics of randomness and its applications. In the upcoming tutorials, we’ll learn how to use LLMs to generate code with randomness."
  },
  {
    "objectID": "lectures/lec_05_presentation.html#interesting-literature-to-start",
    "href": "lectures/lec_05_presentation.html#interesting-literature-to-start",
    "title": "Lecture V - Randomness",
    "section": "Interesting literature to start",
    "text": "Interesting literature to start\n\nChristian, B., & Griffiths, T. (2016). Algorithms to live by: the computer science of human decisions. First international edition. New York, Henry Holt and Company.1\n\nThe main inspiration for this lecture. Nils and I have read it and discussed it in depth, always wanting to translate it into a course."
  },
  {
    "objectID": "lectures/lec_05_presentation.html#books-on-programming",
    "href": "lectures/lec_05_presentation.html#books-on-programming",
    "title": "Lecture V - Randomness",
    "section": "Books on Programming",
    "text": "Books on Programming\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Here\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n\n\n\n\n\n\n\nNote\n\n\nThink Python is a great book to start with. It’s available online for free. Schrödinger Programmiert Python is a great alternative for German students, as it is a very playful introduction to programming with lots of examples."
  },
  {
    "objectID": "lectures/lec_05_presentation.html#more-literature",
    "href": "lectures/lec_05_presentation.html#more-literature",
    "title": "Lecture V - Randomness",
    "section": "More Literature",
    "text": "More Literature\nFor more interesting literature, take a look at the literature list of this course."
  },
  {
    "objectID": "lectures/lec_05_randomness.html",
    "href": "lectures/lec_05_randomness.html",
    "title": "Lecture V - Randomness",
    "section": "",
    "text": "Question: What comes to your mind when you think of randomness?\n. . .\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuestion: What’s the opposite of randomness?\n. . .\n\nDeterminism\nPredictability\nConsistency\n\n. . .\n\nBoredom?\n\n\n\n\nQuestion: How would you test if a pair of dice is fair?\n. . .\n\nSend the dice to a lab to check weight and balance\n\n. . .\n\nRoll the dice many times\nCheck if the outcomes are uniformly distributed\nCompare observed frequencies to expected frequencies\n\n\n\n\n\n\n\n\n\nRandomness is a fundamental aspect of the world\nIt can be used for discovery\nRandomness is used to model uncertainty\nIt is used to explore solutions and avoid bias\n\n. . .\n\n\n\n\n\n\nImportant\n\n\n\nEven in computer science, randomness is not just about generating random numbers!",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_randomness.html#randomness",
    "href": "lectures/lec_05_randomness.html#randomness",
    "title": "Lecture V - Randomness",
    "section": "",
    "text": "Question: What comes to your mind when you think of randomness?\n. . .",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_randomness.html#why-randomness-matters",
    "href": "lectures/lec_05_randomness.html#why-randomness-matters",
    "title": "Lecture V - Randomness",
    "section": "",
    "text": "Question: What’s the opposite of randomness?\n. . .\n\nDeterminism\nPredictability\nConsistency\n\n. . .\n\nBoredom?",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_randomness.html#discovery-by-randomness",
    "href": "lectures/lec_05_randomness.html#discovery-by-randomness",
    "title": "Lecture V - Randomness",
    "section": "",
    "text": "Question: How would you test if a pair of dice is fair?\n. . .\n\nSend the dice to a lab to check weight and balance\n\n. . .\n\nRoll the dice many times\nCheck if the outcomes are uniformly distributed\nCompare observed frequencies to expected frequencies",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_randomness.html#using-randomness",
    "href": "lectures/lec_05_randomness.html#using-randomness",
    "title": "Lecture V - Randomness",
    "section": "",
    "text": "Randomness is a fundamental aspect of the world\nIt can be used for discovery\nRandomness is used to model uncertainty\nIt is used to explore solutions and avoid bias\n\n. . .\n\n\n\n\n\n\nImportant\n\n\n\nEven in computer science, randomness is not just about generating random numbers!",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_randomness.html#randomness-and-everyday-life",
    "href": "lectures/lec_05_randomness.html#randomness-and-everyday-life",
    "title": "Lecture V - Randomness",
    "section": "Randomness and Everyday Life",
    "text": "Randomness and Everyday Life\nQuestion: Where do you encounter randomness in daily life?",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_randomness.html#social-life",
    "href": "lectures/lec_05_randomness.html#social-life",
    "title": "Lecture V - Randomness",
    "section": "Social Life",
    "text": "Social Life\n\n\nDating apps use randomized matching within preferences\nRandom encounters that lead to friendships\nRandom opportunities leading to career changes\nBreaking ties through coin tosses",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_randomness.html#entertainment-industry",
    "href": "lectures/lec_05_randomness.html#entertainment-industry",
    "title": "Lecture V - Randomness",
    "section": "Entertainment Industry",
    "text": "Entertainment Industry\n\n\nPokémon’s “random” encounters are weighted by rarity\nLoot systems: Rare items have controlled drop rates\nChess AI introduces randomness to feel more human-like\nSpotify’s shuffle is deliberately less random to feel natural\nTikTok uses controlled randomization to optimize discovery",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_randomness.html#cryptography-1",
    "href": "lectures/lec_05_randomness.html#cryptography-1",
    "title": "Lecture V - Randomness",
    "section": "Cryptography",
    "text": "Cryptography\n\n\nCoin miners solve cryptographic puzzles using guesses\nPW generators balance randomness and memorability\ncorrect-horse-battery-staple is secure\nTr0ub4dor&3 is less secure despite looking complex\nModern encryption uses random numbers",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_randomness.html#data-science",
    "href": "lectures/lec_05_randomness.html#data-science",
    "title": "Lecture V - Randomness",
    "section": "Data Science",
    "text": "Data Science\n\n\nWeather forecasting uses randomness for uncertainty\nStock algorithms add randomness to avoid patterns\nSelf-driving cars add randomness for natural-feeling\nRandom sampling in research for unbiased results\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nRandomness is everywhere around us!",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_randomness.html#randomness-in-computer-science",
    "href": "lectures/lec_05_randomness.html#randomness-in-computer-science",
    "title": "Lecture V - Randomness",
    "section": "Randomness in Computer Science",
    "text": "Randomness in Computer Science\n\nFundamental concept in computer science\nHelps solve “hard” problems efficiently\nOften faster than deterministic approaches\nTrade-off: Optimal vs. “Good Enough” solutions\n\n. . .\n\n\n\n\n\n\nImportant\n\n\n\nSometimes a quick “good enough” solution is better than waiting for the perfect one.",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_randomness.html#types-of-randomness",
    "href": "lectures/lec_05_randomness.html#types-of-randomness",
    "title": "Lecture V - Randomness",
    "section": "Types of Randomness",
    "text": "Types of Randomness\nQuestion: Difference between true and pseudo-randomness?\n. . .\n\n\nTrue Randomness\n\nPhysical phenomena\nAtmospheric noise\nRadioactive decay\nQuantum effects\n\n\nPseudo-randomness\n\nDeterministic algorithms\nSeed-based generation\nRepeatable sequences\nGood enough for most uses",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_randomness.html#limits-of-computation",
    "href": "lectures/lec_05_randomness.html#limits-of-computation",
    "title": "Lecture V - Randomness",
    "section": "Limits of Computation",
    "text": "Limits of Computation\nQuestion: How many possible combinations exist in a shuffled deck of cards?\n\nimport math\nprint(math.factorial(52))\n\n80658175170943878571660636856403766975289505440883277824000000000000\n\n\n. . .\n\n\n\n\n\n\nImportant\n\n\n\nComputing and evaluating all possible combinations is not feasible!",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_randomness.html#addressing-computational-limits",
    "href": "lectures/lec_05_randomness.html#addressing-computational-limits",
    "title": "Lecture V - Randomness",
    "section": "Addressing Computational Limits",
    "text": "Addressing Computational Limits\nQuestion: Anybody ever heard of “Monte Carlo methods”?\n. . .\n\nDeveloped in the 1940s for nuclear weapons research\nNuclear fission chain reactions were too complex\nHelped to evaluate the probabilities of different outcomes\nNamed after Monaco’s famous casino\n\n. . .\nQuestion: How could we estimate π?",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_randomness.html#estimating-π",
    "href": "lectures/lec_05_randomness.html#estimating-π",
    "title": "Lecture V - Randomness",
    "section": "Estimating π",
    "text": "Estimating π",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_randomness.html#travel-itinerary",
    "href": "lectures/lec_05_randomness.html#travel-itinerary",
    "title": "Lecture V - Randomness",
    "section": "Travel Itinerary",
    "text": "Travel Itinerary\nQuestion: How and in which order would you visit 10 cities by plane with minimal total distance?\n\nimport math\nprint(math.factorial(10))\n\n3628800\n\n\n. . .\nQuestion: What could be a strategy?",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_randomness.html#brute-force",
    "href": "lectures/lec_05_randomness.html#brute-force",
    "title": "Lecture V - Randomness",
    "section": "Brute Force",
    "text": "Brute Force\n\nTry every possibility\nTotal possible routes: 10! = 3,628,800\nGuaranteed to find best solution\nIf each check takes 1ms: 1 hour to check all routes\n\n. . .\nQuestion: What could be the problem with this approach?",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_randomness.html#time-and-space-requirements",
    "href": "lectures/lec_05_randomness.html#time-and-space-requirements",
    "title": "Lecture V - Randomness",
    "section": "Time and Space Requirements",
    "text": "Time and Space Requirements\n\n\nFor 20 cities: 20! = 2.4 quintillion routes\nWould take 77 billion years at 1ms per check!\nTime complexity grows factorially\nMemory requirements increase with problem size\n\n\n. . .\n\n\n\n\n\n\nImportant\n\n\n\nNot feasible for real-world problems!",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_randomness.html#greedy-algorithm",
    "href": "lectures/lec_05_randomness.html#greedy-algorithm",
    "title": "Lecture V - Randomness",
    "section": "Greedy Algorithm",
    "text": "Greedy Algorithm\n\nExample: Always picking shortest next flight\nMake locally optimal choices at each step\nNever backtracks or reconsiders past decisions\nFast execution & simple to implement\nCan perform poorly on complex problems",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_randomness.html#hill-climbing",
    "href": "lectures/lec_05_randomness.html#hill-climbing",
    "title": "Lecture V - Randomness",
    "section": "Hill Climbing",
    "text": "Hill Climbing\n\nIteratively improve solution by making small changes\nLike climbing in fog, can only see immediate surroundings\nDon’t know if higher peaks exist elsewhere\nCan get stuck in local optima\nNo guarantee of finding global best optima\n\n. . .\nQuestion: How would you escape a local optimum?",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_randomness.html#simulated-annealing",
    "href": "lectures/lec_05_randomness.html#simulated-annealing",
    "title": "Lecture V - Randomness",
    "section": "Simulated Annealing",
    "text": "Simulated Annealing\n\nMake random changes and accept improvements\nSometimes accept worse solutions\nGradually become more selective\n\n. . .\nQuestion: Why accept worse solutions sometimes?\n. . .\n\nRandomness helps to escape local optima\nBalances exploration vs. exploitation",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_randomness.html#simulated-annealing-animation",
    "href": "lectures/lec_05_randomness.html#simulated-annealing-animation",
    "title": "Lecture V - Randomness",
    "section": "Simulated Annealing Animation",
    "text": "Simulated Annealing Animation",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_randomness.html#traveling-salesman",
    "href": "lectures/lec_05_randomness.html#traveling-salesman",
    "title": "Lecture V - Randomness",
    "section": "Traveling Salesman",
    "text": "Traveling Salesman",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_randomness.html#thought-experiment",
    "href": "lectures/lec_05_randomness.html#thought-experiment",
    "title": "Lecture V - Randomness",
    "section": "Thought Experiment",
    "text": "Thought Experiment\nWhat’s more important for a society?\n. . .\n\n\nFreedom\n\nIndividual choice\nPersonal responsibility\nMarket-driven\n\n\nEquality\n\nShared resources\nSocial safety nets\nRegulated systems\n\n\n\n. . .\nQuestion: Any problem with this question?",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_randomness.html#veil-of-ignorance",
    "href": "lectures/lec_05_randomness.html#veil-of-ignorance",
    "title": "Lecture V - Randomness",
    "section": "Veil of Ignorance",
    "text": "Veil of Ignorance\nYou might randomly be:\n\nAny gender identity and economic status\nAny health condition and intelligence level\nAny cultural background and religious belief\n\n. . .\nQuestion: If you didn’t know who you’d be born as, what kind of society would you design?",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_randomness.html#key-considerations",
    "href": "lectures/lec_05_randomness.html#key-considerations",
    "title": "Lecture V - Randomness",
    "section": "Key Considerations",
    "text": "Key Considerations\n\nIndividual stories: Powerful but potentially misleading\nStatistics: Comprehensive but can miss nuance\nHidden diversity: Important subgroups may be overlooked\nSmall policy changes can have cascading effects\n\n. . .\n\n\n\n\n\n\nImportant\n\n\n\nBut that’s not all! We also need to measure success and failure!",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_randomness.html#measuring-success",
    "href": "lectures/lec_05_randomness.html#measuring-success",
    "title": "Lecture V - Randomness",
    "section": "Measuring Success",
    "text": "Measuring Success\n\nMean happiness: Average well-being\nTotal happiness: Utilitarian approach\nMedian happiness: Focus on the middle class\nMinimum happiness: Protecting the most vulnerable\n\n. . .\nQuestion: What could be the problem with these measures?",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_randomness.html#idea-random-sampling",
    "href": "lectures/lec_05_randomness.html#idea-random-sampling",
    "title": "Lecture V - Randomness",
    "section": "Idea: Random Sampling",
    "text": "Idea: Random Sampling\n\nRandomly select a subset of the population\nGather diverse perspectives from the sample\nBetter understand needs of population\nReduce selection bias and improve accuracy\n\n. . .\nQuestion: What is a selection bias?",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_randomness.html#selection-bias",
    "href": "lectures/lec_05_randomness.html#selection-bias",
    "title": "Lecture V - Randomness",
    "section": "Selection Bias",
    "text": "Selection Bias\nDefinition: Selection bias occurs when the sample data you’re analyzing isn’t truly representative of the population you’re trying to study.\n. . .\n\n\n\n\n\n\nWarningFamous Example\n\n\n\nDuring WWII, engineers studied returning planes to determine where to add armor. Initially, they focused on areas with most bullet holes. Abraham Wald pointed out they should instead armor the areas with no bullet holes - those were the critical areas where planes didn’t survive to return!",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_randomness.html#promoting-fairness",
    "href": "lectures/lec_05_randomness.html#promoting-fairness",
    "title": "Lecture V - Randomness",
    "section": "Promoting Fairness",
    "text": "Promoting Fairness\nQuestion: How can randomness promote fairness?\n. . .\n\nRandom allocation of patients in clinical trials\nRandom audits for tax compliance\nRandom assignment of cases to judges\nRandom order of candidates on voting ballots",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_randomness.html#quick-poll",
    "href": "lectures/lec_05_randomness.html#quick-poll",
    "title": "Lecture V - Randomness",
    "section": "Quick Poll",
    "text": "Quick Poll\nQuestion: Which would you prefer?\n\n100% chance of winning 50 EUR\n50% chance of winning 120 EUR\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nAnswer depends on your risk aversion!",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_randomness.html#decisions-under-uncertainty",
    "href": "lectures/lec_05_randomness.html#decisions-under-uncertainty",
    "title": "Lecture V - Randomness",
    "section": "Decisions Under Uncertainty",
    "text": "Decisions Under Uncertainty\nQuestion: When should we embrace vs. reduce randomness?\n. . .\n\n\nEmbrace When:\n\nExploring new solutions\nAvoiding bias\nBreaking deadlocks\nTesting systems\n\n\nReduce When:\n\nSafety-critical systems\nFinancial transactions\nMedical procedures\nLegal proceedings",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_randomness.html#good-enough-solutions",
    "href": "lectures/lec_05_randomness.html#good-enough-solutions",
    "title": "Lecture V - Randomness",
    "section": "“Good Enough” Solutions",
    "text": "“Good Enough” Solutions\n\nPerfect is enemy of good\n\nRemember Monte Carlo methods: approximations work\nComplete analysis often impossible\nPerfect information is rare\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nMany real-world problems benefit from embracing uncertainty rather than fighting it!",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_randomness.html#opportunity-costs",
    "href": "lectures/lec_05_randomness.html#opportunity-costs",
    "title": "Lecture V - Randomness",
    "section": "Opportunity Costs",
    "text": "Opportunity Costs\n\nConsider opportunity costs\n\nQuick approximations enable faster decisions\nBalance accuracy vs. computation time\nRandom sampling vs. complete enumeration\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nMany problems benefit from fast, good-enough solutions rather than perfect ones.",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_randomness.html#the-end",
    "href": "lectures/lec_05_randomness.html#the-end",
    "title": "Lecture V - Randomness",
    "section": "The End",
    "text": "The End\n\n\n\n\n\n\nNote\n\n\n\nThat’s it for today’s lecture!\nWe’ve covered the basics of randomness and its applications. In the upcoming tutorials, we’ll learn how to use LLMs to generate code with randomness.",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_randomness.html#interesting-literature-to-start",
    "href": "lectures/lec_05_randomness.html#interesting-literature-to-start",
    "title": "Lecture V - Randomness",
    "section": "Interesting literature to start",
    "text": "Interesting literature to start\n\nChristian, B., & Griffiths, T. (2016). Algorithms to live by: the computer science of human decisions. First international edition. New York, Henry Holt and Company.1",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_randomness.html#books-on-programming",
    "href": "lectures/lec_05_randomness.html#books-on-programming",
    "title": "Lecture V - Randomness",
    "section": "Books on Programming",
    "text": "Books on Programming\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Here\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nThink Python is a great book to start with. It’s available online for free. Schrödinger Programmiert Python is a great alternative for German students, as it is a very playful introduction to programming with lots of examples.",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_randomness.html#more-literature",
    "href": "lectures/lec_05_randomness.html#more-literature",
    "title": "Lecture V - Randomness",
    "section": "More Literature",
    "text": "More Literature\nFor more interesting literature, take a look at the literature list of this course.",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_05_randomness.html#footnotes",
    "href": "lectures/lec_05_randomness.html#footnotes",
    "title": "Lecture V - Randomness",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThe main inspiration for this lecture. Nils and I have read it and discussed it in depth, always wanting to translate it into a course.↩︎",
    "crumbs": [
      "05 Randomness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_presentation.html#caching-making-the-most-of-limited-resources",
    "href": "lectures/lec_03_presentation.html#caching-making-the-most-of-limited-resources",
    "title": "Lecture III - Caching",
    "section": "Caching: Making the most of limited resources",
    "text": "Caching: Making the most of limited resources\n\n\nIn the practical use of our intellect, forgetting is as important a function as remembering. – [William James]\n\n\n\nToday’s lecture is on caching.\nThe discussed topics are highly relevant for everything that has to do with computers and data.\nOn top of that, caching is another very important concept for our everyday decision-making."
  },
  {
    "objectID": "lectures/lec_03_presentation.html#lets-approach-the-topic-using-an-everyday-decision-making-situation",
    "href": "lectures/lec_03_presentation.html#lets-approach-the-topic-using-an-everyday-decision-making-situation",
    "title": "Lecture III - Caching",
    "section": "Let’s approach the topic using an everyday decision-making situation",
    "text": "Let’s approach the topic using an everyday decision-making situation\n\n\n\n\nWe have a problem: Our cupboard.\nIt’s time to put things in order."
  },
  {
    "objectID": "lectures/lec_03_presentation.html#question-what-could-we-do",
    "href": "lectures/lec_03_presentation.html#question-what-could-we-do",
    "title": "Lecture III - Caching",
    "section": "Question: What could we do?",
    "text": "Question: What could we do?\n\n\n\n\nBetter organization\nClearing out things we no longer need\nNow we have two problems:\n\nStoring?\nClearing out?"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#storing",
    "href": "lectures/lec_03_presentation.html#storing",
    "title": "Lecture III - Caching",
    "section": "Storing",
    "text": "Storing\n\n\n\nHow to bring order to storage?\n\nSubdivide storage\nEfficient sorting\nIncrease capacity"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#subdivide-storage-and-efficient-sorting-outcome",
    "href": "lectures/lec_03_presentation.html#subdivide-storage-and-efficient-sorting-outcome",
    "title": "Lecture III - Caching",
    "section": "Subdivide storage and efficient sorting outcome",
    "text": "Subdivide storage and efficient sorting outcome\n\n\n\n\nTime investment can improve storing.\nThat is a difficult trade-off in itself.\nNontheless: Each storage has a limited capacity."
  },
  {
    "objectID": "lectures/lec_03_presentation.html#question-what-do-we-do-when-the-storage-is-full",
    "href": "lectures/lec_03_presentation.html#question-what-do-we-do-when-the-storage-is-full",
    "title": "Lecture III - Caching",
    "section": "Question: What do we do, when the storage is full?",
    "text": "Question: What do we do, when the storage is full?\n\n\nWe could increase the capacity"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#but",
    "href": "lectures/lec_03_presentation.html#but",
    "title": "Lecture III - Caching",
    "section": "But…",
    "text": "But…\n\n\n\n\nIncrease capacity is costly.\nThere is a trade-off between size and speed.\nSooner or later, every storage will fill up if not cleared out."
  },
  {
    "objectID": "lectures/lec_03_presentation.html#question-what-types-of-storages-can-you-imagine-that-are-affected-by-this",
    "href": "lectures/lec_03_presentation.html#question-what-types-of-storages-can-you-imagine-that-are-affected-by-this",
    "title": "Lecture III - Caching",
    "section": "Question: What types of storages can you imagine that are affected by this?",
    "text": "Question: What types of storages can you imagine that are affected by this?\n\nOur cupboard\nOur computer (hard drive, RAM, cache, …)\nOur brain?!"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#question-what-is-the-impact-of-a-full-storage",
    "href": "lectures/lec_03_presentation.html#question-what-is-the-impact-of-a-full-storage",
    "title": "Lecture III - Caching",
    "section": "Question: What is the impact of a full storage?",
    "text": "Question: What is the impact of a full storage?\n\n\n\n\nAccess speed drops significantly\nProcessing time increases\nOverall performance decreases"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#now-we-see-why-clearing-out-is-so-important",
    "href": "lectures/lec_03_presentation.html#now-we-see-why-clearing-out-is-so-important",
    "title": "Lecture III - Caching",
    "section": "Now we see, why clearing out is so important",
    "text": "Now we see, why clearing out is so important\n\nAnd that goes for our cupboard as well as for computers and other storages…\nBut what stays and what goes?"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#question-what-replacementeviction-policies-can-you-imagine",
    "href": "lectures/lec_03_presentation.html#question-what-replacementeviction-policies-can-you-imagine",
    "title": "Lecture III - Caching",
    "section": "Question: What replacement/eviction policies can you imagine?",
    "text": "Question: What replacement/eviction policies can you imagine?\n\nRandom Eviction\nFirst-In, First-Out (FIFO)\nLeast Recently Used (LRU)"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#once-again-we-can-learn-a-lot-from-the-computer-sciences.",
    "href": "lectures/lec_03_presentation.html#once-again-we-can-learn-a-lot-from-the-computer-sciences.",
    "title": "Lecture III - Caching",
    "section": "Once again, we can learn a lot from the computer sciences.",
    "text": "Once again, we can learn a lot from the computer sciences.\n\nThe evolution of computer memory\n\n\nIn the 1950s, computer science faced the same question…\n…and has faced it repeatedly since then.\nProcessors have become faster and faster (Moore’s Law).\nThe demands on memory also grew."
  },
  {
    "objectID": "lectures/lec_03_presentation.html#cpu",
    "href": "lectures/lec_03_presentation.html#cpu",
    "title": "Lecture III - Caching",
    "section": "CPU",
    "text": "CPU\n\nThe processor (CPU, Central Processing Unit) is central to a computer and is often referred to as the “brain” of the system.\nIt executes instructions and performs calculations, to process data and run programs."
  },
  {
    "objectID": "lectures/lec_03_presentation.html#problem-access-time",
    "href": "lectures/lec_03_presentation.html#problem-access-time",
    "title": "Lecture III - Caching",
    "section": "Problem: Access Time",
    "text": "Problem: Access Time\nProblem: No matter how much faster the processor gets, if input data isn’t available fast enough or can’t be stored quickly enough, the system won’t become faster overall.\nQuestion: What is the solution?"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#cache-1",
    "href": "lectures/lec_03_presentation.html#cache-1",
    "title": "Lecture III - Caching",
    "section": "Cache",
    "text": "Cache\n\nHierarchical memory pyramid for efficient data management\n\n\nL1 Cache, directly on CPU, very fast access time.\nL2 Cache, between L1 and main memory.\nRAM memory.\nMass Storage (hard drive).\nThe whole memory system works like a library.\nFind an explanation here."
  },
  {
    "objectID": "lectures/lec_03_presentation.html#cache---size-and-speed-trade-off",
    "href": "lectures/lec_03_presentation.html#cache---size-and-speed-trade-off",
    "title": "Lecture III - Caching",
    "section": "Cache - Size and Speed trade-off",
    "text": "Cache - Size and Speed trade-off\n\n\nRegisters are 10 million times faster than the hard drive!"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#library-principle",
    "href": "lectures/lec_03_presentation.html#library-principle",
    "title": "Lecture III - Caching",
    "section": "Library Principle",
    "text": "Library Principle\n\n\n\n\nLibrary storage (5 million books, Mass Storage)\nSubject locations (100K books, RAM)\nDesk (5 borrowed books, L2)\nShort-term memory (L1)"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#library-principle-1",
    "href": "lectures/lec_03_presentation.html#library-principle-1",
    "title": "Lecture III - Caching",
    "section": "Library Principle",
    "text": "Library Principle\n\n\n\n\nL1 and L2 cache only contain most necessary data.\nThe same should apply to your desk.\nTherefore, both must be cleared regularly."
  },
  {
    "objectID": "lectures/lec_03_presentation.html#how-to-clear-up",
    "href": "lectures/lec_03_presentation.html#how-to-clear-up",
    "title": "Lecture III - Caching",
    "section": "How to clear up?",
    "text": "How to clear up?\n\nOptimal: Clairvoyance\n\nStore everything in the cache that will be needed\nDelete everything from the cache that won’t be needed\n\nQuestion: What is the problem with this strategy?\nOptimal strategy not achievable in reality"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#realisable-strategies",
    "href": "lectures/lec_03_presentation.html#realisable-strategies",
    "title": "Lecture III - Caching",
    "section": "Realisable strategies?",
    "text": "Realisable strategies?\n\nLeast recently used is the dominant strategy.\nEvicts the least recently accessed item from the cache when space is needed.\nLeads to much better performance on average than, for example, random eviction.\nQuestion: Why do you think least recently used is the better strategy?"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#managerial-and-personal-insights",
    "href": "lectures/lec_03_presentation.html#managerial-and-personal-insights",
    "title": "Lecture III - Caching",
    "section": "Managerial and personal insights:",
    "text": "Managerial and personal insights:\n\nLet go of things you haven’t used in ages\nKeep things where they are used\nBoth have been proven to contribute to a significant increase in productivity"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#keeping-things-where-they-are-used",
    "href": "lectures/lec_03_presentation.html#keeping-things-where-they-are-used",
    "title": "Lecture III - Caching",
    "section": "Keeping things where they are used…",
    "text": "Keeping things where they are used…\n\n\nMight be optimal, in a mathematical sense"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#the-strong-limitations-of-caches-make-them-a-security-risk.",
    "href": "lectures/lec_03_presentation.html#the-strong-limitations-of-caches-make-them-a-security-risk.",
    "title": "Lecture III - Caching",
    "section": "The strong limitations of caches make them a “security risk”.",
    "text": "The strong limitations of caches make them a “security risk”.\n\nDenial-of-Service Attacks (DoS) attacks.\n\nCache Flooding\nCache Poisoning\n\nOverload a system with excessive requests or data.\nCausing it to slow down or crash.\nThe system is forced to evict important data."
  },
  {
    "objectID": "lectures/lec_03_presentation.html#question-why-are-the-findings-about-cache-so-important-for-humans",
    "href": "lectures/lec_03_presentation.html#question-why-are-the-findings-about-cache-so-important-for-humans",
    "title": "Lecture III - Caching",
    "section": "Question: Why are the findings about cache so important for humans?",
    "text": "Question: Why are the findings about cache so important for humans?\n\n\nYour Brain is a Cache, Not a Database -[Joe Chrysler]"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#our-brain-has-similar-weaknesses",
    "href": "lectures/lec_03_presentation.html#our-brain-has-similar-weaknesses",
    "title": "Lecture III - Caching",
    "section": "Our brain has similar weaknesses",
    "text": "Our brain has similar weaknesses\n\nProductivity and creativity are negatively affected by:\n\n\nOverload (too much)\nExhaustion (too long)\nContext switching (interruption of “flow”, 23 minutes to get back on track)\nDistraction (Cache Flooding)\nFake News (Cache Poisoning)\n\n\nThis can lead to burnout."
  },
  {
    "objectID": "lectures/lec_03_presentation.html#question-what-do-you-think-should-we-do-about-it",
    "href": "lectures/lec_03_presentation.html#question-what-do-you-think-should-we-do-about-it",
    "title": "Lecture III - Caching",
    "section": "Question: What do you think should we do about it?",
    "text": "Question: What do you think should we do about it?"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#stolen-focus-why-you-cant-pay-attention---key-insights-i",
    "href": "lectures/lec_03_presentation.html#stolen-focus-why-you-cant-pay-attention---key-insights-i",
    "title": "Lecture III - Caching",
    "section": "Stolen Focus: Why You Can’t Pay Attention - Key Insights I",
    "text": "Stolen Focus: Why You Can’t Pay Attention - Key Insights I\n\nMain Idea:\n\n\nModern life is eroding our ability to concentrate and engage deeply, with societal factors affecting personal focus.\nThe reason for that has much to do with the way our brain works and how we interact with technology."
  },
  {
    "objectID": "lectures/lec_03_presentation.html#stolen-focus-why-you-cant-pay-attention---key-insights-ii",
    "href": "lectures/lec_03_presentation.html#stolen-focus-why-you-cant-pay-attention---key-insights-ii",
    "title": "Lecture III - Caching",
    "section": "Stolen Focus: Why You Can’t Pay Attention - Key Insights II",
    "text": "Stolen Focus: Why You Can’t Pay Attention - Key Insights II\n\nKey Causes of Attention Loss:\n\n\nTechnology & Social Media: Designed to capture and keep attention, leading to fragmented focus.\nConstant Interruptions: Notifications and multitasking disrupt deep work and concentration.\nEnvironmental & Lifestyle Factors: Poor sleep, stress, and diet impact cognitive function."
  },
  {
    "objectID": "lectures/lec_03_presentation.html#stolen-focus-why-you-cant-pay-attention---key-insights-iii",
    "href": "lectures/lec_03_presentation.html#stolen-focus-why-you-cant-pay-attention---key-insights-iii",
    "title": "Lecture III - Caching",
    "section": "Stolen Focus: Why You Can’t Pay Attention - Key Insights III",
    "text": "Stolen Focus: Why You Can’t Pay Attention - Key Insights III\n\nConsequences:\n\n\nReduced ability to think critically and creatively.\nDifficulty sustaining attention on meaningful tasks."
  },
  {
    "objectID": "lectures/lec_03_presentation.html#stolen-focus-why-you-cant-pay-attention---key-insights-iv",
    "href": "lectures/lec_03_presentation.html#stolen-focus-why-you-cant-pay-attention---key-insights-iv",
    "title": "Lecture III - Caching",
    "section": "Stolen Focus: Why You Can’t Pay Attention - Key Insights IV",
    "text": "Stolen Focus: Why You Can’t Pay Attention - Key Insights IV\n\nSolutions Suggested:\n\n\nLimit screen time and practice “monotasking.”\nPrioritize sleep, nutrition, and mindful habits."
  },
  {
    "objectID": "lectures/lec_03_presentation.html#stolen-focus-why-you-cant-pay-attention---key-insights-v",
    "href": "lectures/lec_03_presentation.html#stolen-focus-why-you-cant-pay-attention---key-insights-v",
    "title": "Lecture III - Caching",
    "section": "Stolen Focus: Why You Can’t Pay Attention - Key Insights V",
    "text": "Stolen Focus: Why You Can’t Pay Attention - Key Insights V\n\n\n\nBut even better: read the book!"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#stolen-focus-why-you-cant-pay-attention---book",
    "href": "lectures/lec_03_presentation.html#stolen-focus-why-you-cant-pay-attention---book",
    "title": "Lecture III - Caching",
    "section": "Stolen Focus: Why You Can’t Pay Attention - Book",
    "text": "Stolen Focus: Why You Can’t Pay Attention - Book"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#mitigation-1",
    "href": "lectures/lec_03_presentation.html#mitigation-1",
    "title": "Lecture III - Caching",
    "section": "Mitigation",
    "text": "Mitigation\n\nDistraction can hardly be avoided in today’s world but can be mitigated.\nThis is particularly important for managers.\nThis lecture is designed to raise your awareness of what you can do to keep your brain working efficiently."
  },
  {
    "objectID": "lectures/lec_03_presentation.html#awareness-i",
    "href": "lectures/lec_03_presentation.html#awareness-i",
    "title": "Lecture III - Caching",
    "section": "Awareness I",
    "text": "Awareness I\n\nTrain awareness\n\n\nSpotlight – immediate goals – Focus\nStarlight – medium-term goals – Wishes\nDaylight – long-term goals – Values"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#awareness-ii",
    "href": "lectures/lec_03_presentation.html#awareness-ii",
    "title": "Lecture III - Caching",
    "section": "Awareness II",
    "text": "Awareness II\n\nPrioritization\n\n\nPrioritization\nStructure (Schedule)\nBreaks\nEnable flow (dedicated workspace, manage notifications, clear communication)\nMeditation & exercise"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#key-takeaways-1",
    "href": "lectures/lec_03_presentation.html#key-takeaways-1",
    "title": "Lecture III - Caching",
    "section": "Key Takeaways",
    "text": "Key Takeaways\n\nCaching is a universal concept that applies to computers, organizations, and human cognition\nEfficient cache management requires strategic decisions about what to keep and what to remove\nLRU (Least Recently Used) is often the most practical replacement strategy\nOur brain’s limitations are similar to computer caches\nManaging our attention and focus requires understanding these limitations"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#summary-quiz",
    "href": "lectures/lec_03_presentation.html#summary-quiz",
    "title": "Lecture III - Caching",
    "section": "Summary Quiz",
    "text": "Summary Quiz\nQuestion: Take a moment to reflect:\n\nWhat are the three main types of cache replacement strategies?\nHow does the library principle relate to computer memory hierarchy?\nWhat are two ways you can apply caching principles to improve your productivity?\nHow can understanding cache flooding help protect against information overload?"
  },
  {
    "objectID": "lectures/lec_03_presentation.html#interesting-literature-to-start",
    "href": "lectures/lec_03_presentation.html#interesting-literature-to-start",
    "title": "Lecture III - Caching",
    "section": "Interesting literature to start",
    "text": "Interesting literature to start\n\nChristian, B., & Griffiths, T. (2016). Algorithms to live by: the computer science of human decisions. First international edition. New York, Henry Holt and Company.1\nFerguson, T.S. (1989) ‘Who solved the secretary problem?’, Statistical Science, 4(3). doi:10.1214/ss/1177012493.\n\nThe main inspiration for this lecture. Nils and I have read it and discussed it in depth, always wanting to translate it into a course."
  },
  {
    "objectID": "lectures/lec_03_presentation.html#books-on-programming",
    "href": "lectures/lec_03_presentation.html#books-on-programming",
    "title": "Lecture III - Caching",
    "section": "Books on Programming",
    "text": "Books on Programming\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Here\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n\n\n\n\n\n\n\nNote\n\n\nThink Python is a great book to start with. It’s available online for free. Schrödinger Programmiert Python is a great alternative for German students, as it is a very playful introduction to programming with lots of examples."
  },
  {
    "objectID": "lectures/lec_03_presentation.html#more-literature",
    "href": "lectures/lec_03_presentation.html#more-literature",
    "title": "Lecture III - Caching",
    "section": "More Literature",
    "text": "More Literature\nFor more interesting literature, take a look at the literature list of this course."
  },
  {
    "objectID": "lectures/lec_03_caching.html",
    "href": "lectures/lec_03_caching.html",
    "title": "Lecture III - Caching",
    "section": "",
    "text": "By the end of this lecture, you will be able to:\n\n\n\nExplain the fundamental concepts of caching and its importance\nCompare different cache replacement strategies\nIdentify caching principles in everyday life\nApply caching concepts to personal productivity\nUnderstand the relationship between caching and attention management",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#caching-making-the-most-of-limited-resources",
    "href": "lectures/lec_03_caching.html#caching-making-the-most-of-limited-resources",
    "title": "Lecture III - Caching",
    "section": "Caching: Making the most of limited resources",
    "text": "Caching: Making the most of limited resources\n\n\nIn the practical use of our intellect, forgetting is as important a function as remembering. – [William James]\n\n\n\n\nToday’s lecture is on caching.\nThe discussed topics are highly relevant for everything that has to do with computers and data.\nOn top of that, caching is another very important concept for our everyday decision-making.",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#lets-approach-the-topic-using-an-everyday-decision-making-situation",
    "href": "lectures/lec_03_caching.html#lets-approach-the-topic-using-an-everyday-decision-making-situation",
    "title": "Lecture III - Caching",
    "section": "Let’s approach the topic using an everyday decision-making situation",
    "text": "Let’s approach the topic using an everyday decision-making situation\n\n\n\n\n\nWe have a problem: Our cupboard.\nIt’s time to put things in order.",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#question-what-could-we-do",
    "href": "lectures/lec_03_caching.html#question-what-could-we-do",
    "title": "Lecture III - Caching",
    "section": "Question: What could we do?",
    "text": "Question: What could we do?\n\n\n\n\n\nBetter organization\nClearing out things we no longer need\nNow we have two problems:\n\nStoring?\nClearing out?",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#storing",
    "href": "lectures/lec_03_caching.html#storing",
    "title": "Lecture III - Caching",
    "section": "Storing",
    "text": "Storing\n\n\n\n\nHow to bring order to storage?\n\nSubdivide storage\nEfficient sorting\nIncrease capacity",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#subdivide-storage-and-efficient-sorting-outcome",
    "href": "lectures/lec_03_caching.html#subdivide-storage-and-efficient-sorting-outcome",
    "title": "Lecture III - Caching",
    "section": "Subdivide storage and efficient sorting outcome",
    "text": "Subdivide storage and efficient sorting outcome\n\n\n\n\n\nTime investment can improve storing.\nThat is a difficult trade-off in itself.\nNontheless: Each storage has a limited capacity.",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#question-what-do-we-do-when-the-storage-is-full",
    "href": "lectures/lec_03_caching.html#question-what-do-we-do-when-the-storage-is-full",
    "title": "Lecture III - Caching",
    "section": "Question: What do we do, when the storage is full?",
    "text": "Question: What do we do, when the storage is full?\n\n\nWe could increase the capacity",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#but",
    "href": "lectures/lec_03_caching.html#but",
    "title": "Lecture III - Caching",
    "section": "But…",
    "text": "But…\n\n\n\n\n\nIncrease capacity is costly.\nThere is a trade-off between size and speed.\nSooner or later, every storage will fill up if not cleared out.",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#question-what-types-of-storages-can-you-imagine-that-are-affected-by-this",
    "href": "lectures/lec_03_caching.html#question-what-types-of-storages-can-you-imagine-that-are-affected-by-this",
    "title": "Lecture III - Caching",
    "section": "Question: What types of storages can you imagine that are affected by this?",
    "text": "Question: What types of storages can you imagine that are affected by this?\n\n\nOur cupboard\nOur computer (hard drive, RAM, cache, …)\nOur brain?!",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#question-what-is-the-impact-of-a-full-storage",
    "href": "lectures/lec_03_caching.html#question-what-is-the-impact-of-a-full-storage",
    "title": "Lecture III - Caching",
    "section": "Question: What is the impact of a full storage?",
    "text": "Question: What is the impact of a full storage?\n\n\n\n\n\nAccess speed drops significantly\nProcessing time increases\nOverall performance decreases",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#now-we-see-why-clearing-out-is-so-important",
    "href": "lectures/lec_03_caching.html#now-we-see-why-clearing-out-is-so-important",
    "title": "Lecture III - Caching",
    "section": "Now we see, why clearing out is so important",
    "text": "Now we see, why clearing out is so important\n\n\nAnd that goes for our cupboard as well as for computers and other storages…\nBut what stays and what goes?",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#question-what-replacementeviction-policies-can-you-imagine",
    "href": "lectures/lec_03_caching.html#question-what-replacementeviction-policies-can-you-imagine",
    "title": "Lecture III - Caching",
    "section": "Question: What replacement/eviction policies can you imagine?",
    "text": "Question: What replacement/eviction policies can you imagine?\n\n\nRandom Eviction\nFirst-In, First-Out (FIFO)\nLeast Recently Used (LRU)",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#once-again-we-can-learn-a-lot-from-the-computer-sciences.",
    "href": "lectures/lec_03_caching.html#once-again-we-can-learn-a-lot-from-the-computer-sciences.",
    "title": "Lecture III - Caching",
    "section": "Once again, we can learn a lot from the computer sciences.",
    "text": "Once again, we can learn a lot from the computer sciences.\n\nThe evolution of computer memory\n\n\n\nIn the 1950s, computer science faced the same question…\n…and has faced it repeatedly since then.\nProcessors have become faster and faster (Moore’s Law).\nThe demands on memory also grew.",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#cpu",
    "href": "lectures/lec_03_caching.html#cpu",
    "title": "Lecture III - Caching",
    "section": "CPU",
    "text": "CPU\n\n\nThe processor (CPU, Central Processing Unit) is central to a computer and is often referred to as the “brain” of the system.\nIt executes instructions and performs calculations, to process data and run programs.",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#problem-access-time",
    "href": "lectures/lec_03_caching.html#problem-access-time",
    "title": "Lecture III - Caching",
    "section": "Problem: Access Time",
    "text": "Problem: Access Time\n\nProblem: No matter how much faster the processor gets, if input data isn’t available fast enough or can’t be stored quickly enough, the system won’t become faster overall.\nQuestion: What is the solution?",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#cache-1",
    "href": "lectures/lec_03_caching.html#cache-1",
    "title": "Lecture III - Caching",
    "section": "Cache",
    "text": "Cache\n\nHierarchical memory pyramid for efficient data management\n\n\n\nL1 Cache, directly on CPU, very fast access time.\nL2 Cache, between L1 and main memory.\nRAM memory.\nMass Storage (hard drive).\nThe whole memory system works like a library.\nFind an explanation here.",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#cache---size-and-speed-trade-off",
    "href": "lectures/lec_03_caching.html#cache---size-and-speed-trade-off",
    "title": "Lecture III - Caching",
    "section": "Cache - Size and Speed trade-off",
    "text": "Cache - Size and Speed trade-off\n\n\nRegisters are 10 million times faster than the hard drive!",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#library-principle",
    "href": "lectures/lec_03_caching.html#library-principle",
    "title": "Lecture III - Caching",
    "section": "Library Principle",
    "text": "Library Principle\n\n\n\n\n\nLibrary storage (5 million books, Mass Storage)\nSubject locations (100K books, RAM)\nDesk (5 borrowed books, L2)\nShort-term memory (L1)",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#library-principle-1",
    "href": "lectures/lec_03_caching.html#library-principle-1",
    "title": "Lecture III - Caching",
    "section": "Library Principle",
    "text": "Library Principle\n\n\n\n\n\nL1 and L2 cache only contain most necessary data.\nThe same should apply to your desk.\nTherefore, both must be cleared regularly.",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#how-to-clear-up",
    "href": "lectures/lec_03_caching.html#how-to-clear-up",
    "title": "Lecture III - Caching",
    "section": "How to clear up?",
    "text": "How to clear up?\n\n\nOptimal: Clairvoyance\n\nStore everything in the cache that will be needed\nDelete everything from the cache that won’t be needed\n\nQuestion: What is the problem with this strategy?\nOptimal strategy not achievable in reality",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#realisable-strategies",
    "href": "lectures/lec_03_caching.html#realisable-strategies",
    "title": "Lecture III - Caching",
    "section": "Realisable strategies?",
    "text": "Realisable strategies?\n\n\nLeast recently used is the dominant strategy.\nEvicts the least recently accessed item from the cache when space is needed.\nLeads to much better performance on average than, for example, random eviction.\nQuestion: Why do you think least recently used is the better strategy?",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#managerial-and-personal-insights",
    "href": "lectures/lec_03_caching.html#managerial-and-personal-insights",
    "title": "Lecture III - Caching",
    "section": "Managerial and personal insights:",
    "text": "Managerial and personal insights:\n\n\nLet go of things you haven’t used in ages\nKeep things where they are used\nBoth have been proven to contribute to a significant increase in productivity",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#keeping-things-where-they-are-used",
    "href": "lectures/lec_03_caching.html#keeping-things-where-they-are-used",
    "title": "Lecture III - Caching",
    "section": "Keeping things where they are used…",
    "text": "Keeping things where they are used…\n\n\nMight be optimal, in a mathematical sense",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#the-strong-limitations-of-caches-make-them-a-security-risk.",
    "href": "lectures/lec_03_caching.html#the-strong-limitations-of-caches-make-them-a-security-risk.",
    "title": "Lecture III - Caching",
    "section": "The strong limitations of caches make them a “security risk”.",
    "text": "The strong limitations of caches make them a “security risk”.\n\n\nDenial-of-Service Attacks (DoS) attacks.\n\nCache Flooding\nCache Poisoning\n\nOverload a system with excessive requests or data.\nCausing it to slow down or crash.\nThe system is forced to evict important data.",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#question-why-are-the-findings-about-cache-so-important-for-humans",
    "href": "lectures/lec_03_caching.html#question-why-are-the-findings-about-cache-so-important-for-humans",
    "title": "Lecture III - Caching",
    "section": "Question: Why are the findings about cache so important for humans?",
    "text": "Question: Why are the findings about cache so important for humans?\n\n\nYour Brain is a Cache, Not a Database -[Joe Chrysler]",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#our-brain-has-similar-weaknesses",
    "href": "lectures/lec_03_caching.html#our-brain-has-similar-weaknesses",
    "title": "Lecture III - Caching",
    "section": "Our brain has similar weaknesses",
    "text": "Our brain has similar weaknesses\n\nProductivity and creativity are negatively affected by:\n\n\n\nOverload (too much)\nExhaustion (too long)\nContext switching (interruption of “flow”, 23 minutes to get back on track)\nDistraction (Cache Flooding)\nFake News (Cache Poisoning)\n\n\n\nThis can lead to burnout.",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#question-what-do-you-think-should-we-do-about-it",
    "href": "lectures/lec_03_caching.html#question-what-do-you-think-should-we-do-about-it",
    "title": "Lecture III - Caching",
    "section": "Question: What do you think should we do about it?",
    "text": "Question: What do you think should we do about it?",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#stolen-focus-why-you-cant-pay-attention---key-insights-i",
    "href": "lectures/lec_03_caching.html#stolen-focus-why-you-cant-pay-attention---key-insights-i",
    "title": "Lecture III - Caching",
    "section": "Stolen Focus: Why You Can’t Pay Attention - Key Insights I",
    "text": "Stolen Focus: Why You Can’t Pay Attention - Key Insights I\n\nMain Idea:\n\n\n\nModern life is eroding our ability to concentrate and engage deeply, with societal factors affecting personal focus.\nThe reason for that has much to do with the way our brain works and how we interact with technology.",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#stolen-focus-why-you-cant-pay-attention---key-insights-ii",
    "href": "lectures/lec_03_caching.html#stolen-focus-why-you-cant-pay-attention---key-insights-ii",
    "title": "Lecture III - Caching",
    "section": "Stolen Focus: Why You Can’t Pay Attention - Key Insights II",
    "text": "Stolen Focus: Why You Can’t Pay Attention - Key Insights II\n\nKey Causes of Attention Loss:\n\n\n\nTechnology & Social Media: Designed to capture and keep attention, leading to fragmented focus.\nConstant Interruptions: Notifications and multitasking disrupt deep work and concentration.\nEnvironmental & Lifestyle Factors: Poor sleep, stress, and diet impact cognitive function.",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#stolen-focus-why-you-cant-pay-attention---key-insights-iii",
    "href": "lectures/lec_03_caching.html#stolen-focus-why-you-cant-pay-attention---key-insights-iii",
    "title": "Lecture III - Caching",
    "section": "Stolen Focus: Why You Can’t Pay Attention - Key Insights III",
    "text": "Stolen Focus: Why You Can’t Pay Attention - Key Insights III\n\nConsequences:\n\n\n\nReduced ability to think critically and creatively.\nDifficulty sustaining attention on meaningful tasks.",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#stolen-focus-why-you-cant-pay-attention---key-insights-iv",
    "href": "lectures/lec_03_caching.html#stolen-focus-why-you-cant-pay-attention---key-insights-iv",
    "title": "Lecture III - Caching",
    "section": "Stolen Focus: Why You Can’t Pay Attention - Key Insights IV",
    "text": "Stolen Focus: Why You Can’t Pay Attention - Key Insights IV\n\nSolutions Suggested:\n\n\n\nLimit screen time and practice “monotasking.”\nPrioritize sleep, nutrition, and mindful habits.",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#stolen-focus-why-you-cant-pay-attention---key-insights-v",
    "href": "lectures/lec_03_caching.html#stolen-focus-why-you-cant-pay-attention---key-insights-v",
    "title": "Lecture III - Caching",
    "section": "Stolen Focus: Why You Can’t Pay Attention - Key Insights V",
    "text": "Stolen Focus: Why You Can’t Pay Attention - Key Insights V\n\n\n\nBut even better: read the book!",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#stolen-focus-why-you-cant-pay-attention---book",
    "href": "lectures/lec_03_caching.html#stolen-focus-why-you-cant-pay-attention---book",
    "title": "Lecture III - Caching",
    "section": "Stolen Focus: Why You Can’t Pay Attention - Book",
    "text": "Stolen Focus: Why You Can’t Pay Attention - Book",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#mitigation-1",
    "href": "lectures/lec_03_caching.html#mitigation-1",
    "title": "Lecture III - Caching",
    "section": "Mitigation",
    "text": "Mitigation\n\n\nDistraction can hardly be avoided in today’s world but can be mitigated.\nThis is particularly important for managers.\nThis lecture is designed to raise your awareness of what you can do to keep your brain working efficiently.",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#awareness-i",
    "href": "lectures/lec_03_caching.html#awareness-i",
    "title": "Lecture III - Caching",
    "section": "Awareness I",
    "text": "Awareness I\n\nTrain awareness\n\n\n\nSpotlight – immediate goals – Focus\nStarlight – medium-term goals – Wishes\nDaylight – long-term goals – Values",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#awareness-ii",
    "href": "lectures/lec_03_caching.html#awareness-ii",
    "title": "Lecture III - Caching",
    "section": "Awareness II",
    "text": "Awareness II\n\nPrioritization\n\n\n\nPrioritization\nStructure (Schedule)\nBreaks\nEnable flow (dedicated workspace, manage notifications, clear communication)\nMeditation & exercise",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#key-takeaways-1",
    "href": "lectures/lec_03_caching.html#key-takeaways-1",
    "title": "Lecture III - Caching",
    "section": "Key Takeaways",
    "text": "Key Takeaways\n\n\nCaching is a universal concept that applies to computers, organizations, and human cognition\nEfficient cache management requires strategic decisions about what to keep and what to remove\nLRU (Least Recently Used) is often the most practical replacement strategy\nOur brain’s limitations are similar to computer caches\nManaging our attention and focus requires understanding these limitations",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#summary-quiz",
    "href": "lectures/lec_03_caching.html#summary-quiz",
    "title": "Lecture III - Caching",
    "section": "Summary Quiz",
    "text": "Summary Quiz\nQuestion: Take a moment to reflect:\n\n\nWhat are the three main types of cache replacement strategies?\nHow does the library principle relate to computer memory hierarchy?\nWhat are two ways you can apply caching principles to improve your productivity?\nHow can understanding cache flooding help protect against information overload?",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#interesting-literature-to-start",
    "href": "lectures/lec_03_caching.html#interesting-literature-to-start",
    "title": "Lecture III - Caching",
    "section": "Interesting literature to start",
    "text": "Interesting literature to start\n\nChristian, B., & Griffiths, T. (2016). Algorithms to live by: the computer science of human decisions. First international edition. New York, Henry Holt and Company.1\nFerguson, T.S. (1989) ‘Who solved the secretary problem?’, Statistical Science, 4(3). doi:10.1214/ss/1177012493.",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#books-on-programming",
    "href": "lectures/lec_03_caching.html#books-on-programming",
    "title": "Lecture III - Caching",
    "section": "Books on Programming",
    "text": "Books on Programming\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Here\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nThink Python is a great book to start with. It’s available online for free. Schrödinger Programmiert Python is a great alternative for German students, as it is a very playful introduction to programming with lots of examples.",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#more-literature",
    "href": "lectures/lec_03_caching.html#more-literature",
    "title": "Lecture III - Caching",
    "section": "More Literature",
    "text": "More Literature\nFor more interesting literature, take a look at the literature list of this course.",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_03_caching.html#footnotes",
    "href": "lectures/lec_03_caching.html#footnotes",
    "title": "Lecture III - Caching",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThe main inspiration for this lecture. Nils and I have read it and discussed it in depth, always wanting to translate it into a course.↩︎",
    "crumbs": [
      "03 Caching",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_presentation.html#what-is-optimal-stopping",
    "href": "lectures/lec_01_presentation.html#what-is-optimal-stopping",
    "title": "Lecture I - Optimal Stopping",
    "section": "What is Optimal Stopping?",
    "text": "What is Optimal Stopping?\nQuestion: Anybody know what optimal stopping is?\n\nOptimal stopping is the problem of:\n\nchoosing the best option\nfrom a sequence of options\nwhere the options are revealed one by one"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#section",
    "href": "lectures/lec_01_presentation.html#section",
    "title": "Lecture I - Optimal Stopping",
    "section": "",
    "text": "Anybody an\nexample of\noptimal stopping?"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#flat-hunting",
    "href": "lectures/lec_01_presentation.html#flat-hunting",
    "title": "Lecture I - Optimal Stopping",
    "section": "Flat Hunting",
    "text": "Flat Hunting\n\nPhoto by Aditya Ghosh on Unsplash"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#hiring-applicants",
    "href": "lectures/lec_01_presentation.html#hiring-applicants",
    "title": "Lecture I - Optimal Stopping",
    "section": "Hiring applicants",
    "text": "Hiring applicants\n\nPhoto by Scott Graham on Unsplash"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#dating",
    "href": "lectures/lec_01_presentation.html#dating",
    "title": "Lecture I - Optimal Stopping",
    "section": "Dating",
    "text": "Dating\n\nPhoto by Shelby Deeter on Unsplash"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#searching-for-a-parking-spot",
    "href": "lectures/lec_01_presentation.html#searching-for-a-parking-spot",
    "title": "Lecture I - Optimal Stopping",
    "section": "Searching for a parking spot",
    "text": "Searching for a parking spot\n\nPhoto by Joseph Pearson on Unsplash"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#the-secretary-problem",
    "href": "lectures/lec_01_presentation.html#the-secretary-problem",
    "title": "Lecture I - Optimal Stopping",
    "section": "The Secretary Problem",
    "text": "The Secretary Problem\n\nImagine you’re hiring a secretary\nYou must interview candidates one by one\nNow, you must decide: hire or continue searching\nOnce you reject a candidate, you cannot go back\nHow to maximize chance of selecting the best candidate?\n\n\n\n\n\n\n\n\nNote\n\n\nThe name is a bit misleading, as the problem is not about hiring a secretary, but about finding the best candidate. It comes from the 1960s and thus a little outdated."
  },
  {
    "objectID": "lectures/lec_01_presentation.html#basic-setup",
    "href": "lectures/lec_01_presentation.html#basic-setup",
    "title": "Lecture I - Optimal Stopping",
    "section": "Basic Setup",
    "text": "Basic Setup\n\nWe have n candidates\nWe interview them one by one\nWe must decide to hire or continue searching\nOrdinal ranking of candidates\n\n\nQuestion: Anybody know what ordinal ranking is?"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#ways-to-fail",
    "href": "lectures/lec_01_presentation.html#ways-to-fail",
    "title": "Lecture I - Optimal Stopping",
    "section": "Ways to fail",
    "text": "Ways to fail\nQuestion: Anybody an idea how we can fail?\n\n\nReject all candidates and never hire - stopping too late\nYou hire someone too early - stopping too early"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#section-1",
    "href": "lectures/lec_01_presentation.html#section-1",
    "title": "Lecture I - Optimal Stopping",
    "section": "",
    "text": "Ideas?"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#look-and-leap-strategy",
    "href": "lectures/lec_01_presentation.html#look-and-leap-strategy",
    "title": "Lecture I - Optimal Stopping",
    "section": "Look-and-Leap Strategy",
    "text": "Look-and-Leap Strategy\nThe optimal strategy is to:\n\nLook at the first 37 % of options\nRemember the best one seen so far\nChoose the next option that’s better than the best seen\nChance of selecting the best candidate is 37 %1\nThus, we can fail with 63 %!\n\nLarge number of candidates! With a small number of candidates, we can do even better."
  },
  {
    "objectID": "lectures/lec_01_presentation.html#step-by-step-approximation",
    "href": "lectures/lec_01_presentation.html#step-by-step-approximation",
    "title": "Lecture I - Optimal Stopping",
    "section": "Step-by-step Approximation",
    "text": "Step-by-step Approximation\n\nWith each additional candidate, the chance of getting a new best candidate decreases\n\n1 candidate: 100%\n2 candidates: 50%\n3 candidates: 33%\n4 candidates: 25%\n5 candidates: 20%\n\n\n\nQuestion: Anybody see a pattern?"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#why-37",
    "href": "lectures/lec_01_presentation.html#why-37",
    "title": "Lecture I - Optimal Stopping",
    "section": "Why 37%?",
    "text": "Why 37%?\n\nThis is based on the geometric distribution\nThe optimal stopping point is at n/e1\ne is the base of the natural logarithm (≈ 2.718)\nThis comes from maximizing the probability of success\n\nThis is a bit more advanced. We will not go into the details of the math here and focus more on the insights. For more details see Ferguson, T.S. (1989) ‘Who solved the secretary problem?’, Statistical Science, 4(3). doi:10.1214/ss/1177012493."
  },
  {
    "objectID": "lectures/lec_01_presentation.html#computing-the-number",
    "href": "lectures/lec_01_presentation.html#computing-the-number",
    "title": "Lecture I - Optimal Stopping",
    "section": "Computing the number",
    "text": "Computing the number\n\nimport math\n\npercentage = 1/math.e\nprint(f\"Percentage of options to look at: {percentage:.3f}%\")\n\ncandidates = 20\nlookout_phase = candidates/math.e\nprint(f\"Look at first {lookout_phase:.3f} candidates\")\n\n\n\nPercentage of options to look at: 0.368%\nLook at first 7.358 candidates\n\n\n\n\n\n\n\n\n\nNote\n\n\nNo worries if you don’t understand the code! We are essentialy just using the formula to calculate the percentage of candidates to look at."
  },
  {
    "objectID": "lectures/lec_01_presentation.html#geometric-distribution",
    "href": "lectures/lec_01_presentation.html#geometric-distribution",
    "title": "Lecture I - Optimal Stopping",
    "section": "Geometric Distribution",
    "text": "Geometric Distribution\nLet’s visualize the success of a simulation with 20 candidates:"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#rejection",
    "href": "lectures/lec_01_presentation.html#rejection",
    "title": "Lecture I - Optimal Stopping",
    "section": "Rejection",
    "text": "Rejection\nQuestion: Imagine a dating scenario, where the other person can also reject you. Optimal stopping point?\n\nThe optimal stopping point is now lower\nBecause we can now fail more often\nWith 50 % chance of rejection, we start leaping at 25 %\nFormula: \\(q^{\\frac{1}{1-q}}\\) with \\(q\\) being the chance of rejection"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#the-role-of-time",
    "href": "lectures/lec_01_presentation.html#the-role-of-time",
    "title": "Lecture I - Optimal Stopping",
    "section": "The role of time",
    "text": "The role of time\nWhat if we don’t have a fixed number of candidates, but rather a fixed amount of time?\n\n\nImagine we have one year to find a new flat\nWe want the best flat, but don’t know what a good flat is\n\n\n\nQuestion: How should we behave?\n\n\n\nSame, but now we decide when to stop searching!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#other-versions",
    "href": "lectures/lec_01_presentation.html#other-versions",
    "title": "Lecture I - Optimal Stopping",
    "section": "Other versions",
    "text": "Other versions\n\nSelling a house for the best price (“Threshold Rule”)\nStealing with a success probability (“Burglar’s Problem”)\nFinding a parking spot (“Parking Lot Problem”) [^2]\n\n\n\n\n\n\n\n\nNote\n\n\nSide note for drivers: An increase in occupancy from 90 to 95% doubles the search time for all drivers!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#the-gamblers-fallacy",
    "href": "lectures/lec_01_presentation.html#the-gamblers-fallacy",
    "title": "Lecture I - Optimal Stopping",
    "section": "The Gambler’s Fallacy",
    "text": "The Gambler’s Fallacy\nQuestion: Can you imagine a scenario where it would be unwise to use optimal stopping?\n\n\nImagine a game with a 50 % chance of winning\nIf you win, your payoff is a triple of your bet\nIf you lose, you have to pay your bet"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#section-2",
    "href": "lectures/lec_01_presentation.html#section-2",
    "title": "Lecture I - Optimal Stopping",
    "section": "",
    "text": "Questions?"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#the-end",
    "href": "lectures/lec_01_presentation.html#the-end",
    "title": "Lecture I - Optimal Stopping",
    "section": "The End",
    "text": "The End\n\n\n\n\n\n\nNote\n\n\nThat’s it for todays lecture!\nWe now have covered a brief introduction into optimal stopping and seen how to set up Python. Now we can start with the tutorials!"
  },
  {
    "objectID": "lectures/lec_01_presentation.html#interesting-literature-to-start",
    "href": "lectures/lec_01_presentation.html#interesting-literature-to-start",
    "title": "Lecture I - Optimal Stopping",
    "section": "Interesting literature to start",
    "text": "Interesting literature to start\n\nChristian, B., & Griffiths, T. (2016). Algorithms to live by: the computer science of human decisions. First international edition. New York, Henry Holt and Company.1\nFerguson, T.S. (1989) ‘Who solved the secretary problem?’, Statistical Science, 4(3). doi:10.1214/ss/1177012493.\n\nThe main inspiration for this lecture. Nils and I have read it and discussed it in depth, always wanting to translate it into a course."
  },
  {
    "objectID": "lectures/lec_01_presentation.html#books-on-programming",
    "href": "lectures/lec_01_presentation.html#books-on-programming",
    "title": "Lecture I - Optimal Stopping",
    "section": "Books on Programming",
    "text": "Books on Programming\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Here\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n\n\n\n\n\n\n\nNote\n\n\nThink Python is a great book to start with. It’s available online for free. Schrödinger Programmiert Python is a great alternative for German students, as it is a very playful introduction to programming with lots of examples."
  },
  {
    "objectID": "lectures/lec_01_presentation.html#more-literature",
    "href": "lectures/lec_01_presentation.html#more-literature",
    "title": "Lecture I - Optimal Stopping",
    "section": "More Literature",
    "text": "More Literature\nFor more interesting literature, take a look at the literature list of this course."
  },
  {
    "objectID": "lectures/lec_01_optimal_stopping.html",
    "href": "lectures/lec_01_optimal_stopping.html",
    "title": "Lecture I - Optimal Stopping",
    "section": "",
    "text": "Question: Anybody know what optimal stopping is?\n\n\nOptimal stopping is the problem of:\n\nchoosing the best option\nfrom a sequence of options\nwhere the options are revealed one by one\n\n\n\n\n\n\n\nAnybody an\nexample of\noptimal stopping?\n\n\n\n\n\nPhoto by Aditya Ghosh on Unsplash\n\n\n\n\n\nPhoto by Scott Graham on Unsplash\n\n\n\n\n\nPhoto by Shelby Deeter on Unsplash\n\n\n\n\n\nPhoto by Joseph Pearson on Unsplash",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_optimal_stopping.html#what-is-optimal-stopping",
    "href": "lectures/lec_01_optimal_stopping.html#what-is-optimal-stopping",
    "title": "Lecture I - Optimal Stopping",
    "section": "",
    "text": "Question: Anybody know what optimal stopping is?\n\n\nOptimal stopping is the problem of:\n\nchoosing the best option\nfrom a sequence of options\nwhere the options are revealed one by one",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_optimal_stopping.html#section",
    "href": "lectures/lec_01_optimal_stopping.html#section",
    "title": "Lecture I - Optimal Stopping",
    "section": "",
    "text": "Anybody an\nexample of\noptimal stopping?",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_optimal_stopping.html#flat-hunting",
    "href": "lectures/lec_01_optimal_stopping.html#flat-hunting",
    "title": "Lecture I - Optimal Stopping",
    "section": "",
    "text": "Photo by Aditya Ghosh on Unsplash",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_optimal_stopping.html#hiring-applicants",
    "href": "lectures/lec_01_optimal_stopping.html#hiring-applicants",
    "title": "Lecture I - Optimal Stopping",
    "section": "",
    "text": "Photo by Scott Graham on Unsplash",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_optimal_stopping.html#dating",
    "href": "lectures/lec_01_optimal_stopping.html#dating",
    "title": "Lecture I - Optimal Stopping",
    "section": "",
    "text": "Photo by Shelby Deeter on Unsplash",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_optimal_stopping.html#searching-for-a-parking-spot",
    "href": "lectures/lec_01_optimal_stopping.html#searching-for-a-parking-spot",
    "title": "Lecture I - Optimal Stopping",
    "section": "",
    "text": "Photo by Joseph Pearson on Unsplash",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_optimal_stopping.html#the-secretary-problem",
    "href": "lectures/lec_01_optimal_stopping.html#the-secretary-problem",
    "title": "Lecture I - Optimal Stopping",
    "section": "The Secretary Problem",
    "text": "The Secretary Problem\n\n\nImagine you’re hiring a secretary\nYou must interview candidates one by one\nNow, you must decide: hire or continue searching\nOnce you reject a candidate, you cannot go back\nHow to maximize chance of selecting the best candidate?\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nThe name is a bit misleading, as the problem is not about hiring a secretary, but about finding the best candidate. It comes from the 1960s and thus a little outdated.",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_optimal_stopping.html#basic-setup",
    "href": "lectures/lec_01_optimal_stopping.html#basic-setup",
    "title": "Lecture I - Optimal Stopping",
    "section": "Basic Setup",
    "text": "Basic Setup\n\nWe have n candidates\nWe interview them one by one\nWe must decide to hire or continue searching\nOrdinal ranking of candidates\n\n. . .\nQuestion: Anybody know what ordinal ranking is?",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_optimal_stopping.html#ways-to-fail",
    "href": "lectures/lec_01_optimal_stopping.html#ways-to-fail",
    "title": "Lecture I - Optimal Stopping",
    "section": "Ways to fail",
    "text": "Ways to fail\nQuestion: Anybody an idea how we can fail?\n. . .\n\nReject all candidates and never hire - stopping too late\nYou hire someone too early - stopping too early",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_optimal_stopping.html#section-1",
    "href": "lectures/lec_01_optimal_stopping.html#section-1",
    "title": "Lecture I - Optimal Stopping",
    "section": "",
    "text": "Ideas?",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_optimal_stopping.html#look-and-leap-strategy",
    "href": "lectures/lec_01_optimal_stopping.html#look-and-leap-strategy",
    "title": "Lecture I - Optimal Stopping",
    "section": "Look-and-Leap Strategy",
    "text": "Look-and-Leap Strategy\nThe optimal strategy is to:\n\n\nLook at the first 37 % of options\nRemember the best one seen so far\nChoose the next option that’s better than the best seen\nChance of selecting the best candidate is 37 %1\nThus, we can fail with 63 %!",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_optimal_stopping.html#step-by-step-approximation",
    "href": "lectures/lec_01_optimal_stopping.html#step-by-step-approximation",
    "title": "Lecture I - Optimal Stopping",
    "section": "Step-by-step Approximation",
    "text": "Step-by-step Approximation\n\nWith each additional candidate, the chance of getting a new best candidate decreases\n\n1 candidate: 100%\n2 candidates: 50%\n3 candidates: 33%\n4 candidates: 25%\n5 candidates: 20%\n\n\n. . .\nQuestion: Anybody see a pattern?",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_optimal_stopping.html#why-37",
    "href": "lectures/lec_01_optimal_stopping.html#why-37",
    "title": "Lecture I - Optimal Stopping",
    "section": "Why 37%?",
    "text": "Why 37%?\n\nThis is based on the geometric distribution\nThe optimal stopping point is at n/e2\ne is the base of the natural logarithm (≈ 2.718)\nThis comes from maximizing the probability of success\n\n. . .",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_optimal_stopping.html#computing-the-number",
    "href": "lectures/lec_01_optimal_stopping.html#computing-the-number",
    "title": "Lecture I - Optimal Stopping",
    "section": "Computing the number",
    "text": "Computing the number\n\nimport math\n\npercentage = 1/math.e\nprint(f\"Percentage of options to look at: {percentage:.3f}%\")\n\ncandidates = 20\nlookout_phase = candidates/math.e\nprint(f\"Look at first {lookout_phase:.3f} candidates\")\n\nPercentage of options to look at: 0.368%\nLook at first 7.358 candidates\n\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nNo worries if you don’t understand the code! We are essentialy just using the formula to calculate the percentage of candidates to look at.",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_optimal_stopping.html#geometric-distribution",
    "href": "lectures/lec_01_optimal_stopping.html#geometric-distribution",
    "title": "Lecture I - Optimal Stopping",
    "section": "Geometric Distribution",
    "text": "Geometric Distribution\nLet’s visualize the success of a simulation with 20 candidates:",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_optimal_stopping.html#rejection",
    "href": "lectures/lec_01_optimal_stopping.html#rejection",
    "title": "Lecture I - Optimal Stopping",
    "section": "Rejection",
    "text": "Rejection\nQuestion: Imagine a dating scenario, where the other person can also reject you. Optimal stopping point?\n\n\nThe optimal stopping point is now lower\nBecause we can now fail more often\nWith 50 % chance of rejection, we start leaping at 25 %\nFormula: \\(q^{\\frac{1}{1-q}}\\) with \\(q\\) being the chance of rejection",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_optimal_stopping.html#the-role-of-time",
    "href": "lectures/lec_01_optimal_stopping.html#the-role-of-time",
    "title": "Lecture I - Optimal Stopping",
    "section": "The role of time",
    "text": "The role of time\nWhat if we don’t have a fixed number of candidates, but rather a fixed amount of time?\n. . .\n\nImagine we have one year to find a new flat\nWe want the best flat, but don’t know what a good flat is\n\n. . .\nQuestion: How should we behave?\n. . .\n\nSame, but now we decide when to stop searching!",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_optimal_stopping.html#other-versions",
    "href": "lectures/lec_01_optimal_stopping.html#other-versions",
    "title": "Lecture I - Optimal Stopping",
    "section": "Other versions",
    "text": "Other versions\n\nSelling a house for the best price (“Threshold Rule”)\nStealing with a success probability (“Burglar’s Problem”)\nFinding a parking spot (“Parking Lot Problem”) [^2]\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nSide note for drivers: An increase in occupancy from 90 to 95% doubles the search time for all drivers!",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_optimal_stopping.html#the-gamblers-fallacy",
    "href": "lectures/lec_01_optimal_stopping.html#the-gamblers-fallacy",
    "title": "Lecture I - Optimal Stopping",
    "section": "The Gambler’s Fallacy",
    "text": "The Gambler’s Fallacy\nQuestion: Can you imagine a scenario where it would be unwise to use optimal stopping?\n. . .\n\nImagine a game with a 50 % chance of winning\nIf you win, your payoff is a triple of your bet\nIf you lose, you have to pay your bet",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_optimal_stopping.html#section-2",
    "href": "lectures/lec_01_optimal_stopping.html#section-2",
    "title": "Lecture I - Optimal Stopping",
    "section": "",
    "text": "Questions?",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_optimal_stopping.html#the-end",
    "href": "lectures/lec_01_optimal_stopping.html#the-end",
    "title": "Lecture I - Optimal Stopping",
    "section": "The End",
    "text": "The End\n\n\n\n\n\n\nNote\n\n\n\nThat’s it for todays lecture!\nWe now have covered a brief introduction into optimal stopping and seen how to set up Python. Now we can start with the tutorials!",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_optimal_stopping.html#interesting-literature-to-start",
    "href": "lectures/lec_01_optimal_stopping.html#interesting-literature-to-start",
    "title": "Lecture I - Optimal Stopping",
    "section": "Interesting literature to start",
    "text": "Interesting literature to start\n\nChristian, B., & Griffiths, T. (2016). Algorithms to live by: the computer science of human decisions. First international edition. New York, Henry Holt and Company.3\nFerguson, T.S. (1989) ‘Who solved the secretary problem?’, Statistical Science, 4(3). doi:10.1214/ss/1177012493.",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_optimal_stopping.html#books-on-programming",
    "href": "lectures/lec_01_optimal_stopping.html#books-on-programming",
    "title": "Lecture I - Optimal Stopping",
    "section": "Books on Programming",
    "text": "Books on Programming\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Here\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nThink Python is a great book to start with. It’s available online for free. Schrödinger Programmiert Python is a great alternative for German students, as it is a very playful introduction to programming with lots of examples.",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_optimal_stopping.html#more-literature",
    "href": "lectures/lec_01_optimal_stopping.html#more-literature",
    "title": "Lecture I - Optimal Stopping",
    "section": "More Literature",
    "text": "More Literature\nFor more interesting literature, take a look at the literature list of this course.",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_01_optimal_stopping.html#footnotes",
    "href": "lectures/lec_01_optimal_stopping.html#footnotes",
    "title": "Lecture I - Optimal Stopping",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nLarge number of candidates! With a small number of candidates, we can do even better.↩︎\nThis is a bit more advanced. We will not go into the details of the math here and focus more on the insights. For more details see Ferguson, T.S. (1989) ‘Who solved the secretary problem?’, Statistical Science, 4(3). doi:10.1214/ss/1177012493.↩︎\nThe main inspiration for this lecture. Nils and I have read it and discussed it in depth, always wanting to translate it into a course.↩︎",
    "crumbs": [
      "01 Optimal Stopping",
      "Lecture"
    ]
  },
  {
    "objectID": "general/uv.html",
    "href": "general/uv.html",
    "title": "Installing Python",
    "section": "",
    "text": "uv is a new (and very fast) Python tool written in Rust. It: - Installs Python for you (no manual downloads). - Creates isolated virtual environments (safe sandboxes per project). - Installs and updates packages quickly.\n\n\n\n\n\n\nNote\n\n\n\nWHAT is a virtual environment? Think of each project as its own coffee shop with its own supplies. One shop changing its menu does not affect the others. WHY it matters: You avoid random breakage when different projects need different versions of the same package.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "general/uv.html#why-we-use-uv-for-this-course",
    "href": "general/uv.html#why-we-use-uv-for-this-course",
    "title": "Installing Python",
    "section": "",
    "text": "uv is a new (and very fast) Python tool written in Rust. It: - Installs Python for you (no manual downloads). - Creates isolated virtual environments (safe sandboxes per project). - Installs and updates packages quickly.\n\n\n\n\n\n\nNote\n\n\n\nWHAT is a virtual environment? Think of each project as its own coffee shop with its own supplies. One shop changing its menu does not affect the others. WHY it matters: You avoid random breakage when different projects need different versions of the same package.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "general/uv.html#install-uv",
    "href": "general/uv.html#install-uv",
    "title": "Installing Python",
    "section": "Install uv",
    "text": "Install uv\nChoose the instructions for your operating system.\n\nmacOS or Linux (Terminal)\ncurl -LsSf https://astral.sh/uv/install.sh | sh\nIf curl is missing:\nwget -qO- https://astral.sh/uv/install.sh | sh\nAfter installation: close and reopen your terminal (so your PATH updates).\n\n\nWindows (PowerShell)\nOpen PowerShell and run:\npowershell -ExecutionPolicy Bypass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\nIf you see a script execution warning, you can alternatively first run:\nSet-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process\nThen re-run the install line.\n\n\nVerify installation\nRun (macOS / Linux / Windows):\nuv --version\nIf you see a version number: great!\n\n\n\n\n\n\nWarning\n\n\n\nIf you get “command not found” or “‘uv’ is not recognized”:\n\nClose and reopen the terminal (important).\nOn Windows: make sure you used PowerShell (not Command Prompt).\nStill broken? Ask for help, no need of guessing the error.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "general/uv.html#install-and-pin-python",
    "href": "general/uv.html#install-and-pin-python",
    "title": "Installing Python",
    "section": "Install (and pin) Python",
    "text": "Install (and pin) Python\nWe want everyone on the same Python version for consistency. Thus, we’ll use Python 3.12 for the course this year.\nInstall (you only need to do this once):\nuv python install 3.12\nCheck the installation:\nuv run python --version\nExpected output starts with:\nPython 3.12.\n\n\n\n\n\n\nNote\n\n\n\nWhy pin a version? If the latest Python version moves forward mid‑semester, subtle bugs can appear that might break working code (unlikely, but possible). Pinning keeps everyone in the course aligned.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "general/uv.html#create-your-first-project",
    "href": "general/uv.html#create-your-first-project",
    "title": "Installing Python",
    "section": "Create your first project",
    "text": "Create your first project\nPick a folder where you keep course work. If you do not have one, make sure to create one! Open the course folder in your IDE and then run the following from the terminal:\nuv init my-first-project\ncd my-first-project\nThe first line creates a new folder named my-first-project (you can name it anything). The second line moves you into that folder. Alternatively, you can create the folder manually before, open it in your IDE and run uv init . inside it.\nuv init creates: - main.py (starter script) - pyproject.toml (project + dependencies config) - .python-version (records the Python version we chose) - .gitignore (useful if you ever use Git) - README.md (you can jot notes here) - (A .venv folder will appear later once packages are added or synced.)\nYou do not need to edit any of these (except maybe README.md for your notes and main.py if you want to run something different).",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "general/uv.html#run-the-starter-script",
    "href": "general/uv.html#run-the-starter-script",
    "title": "Installing Python",
    "section": "Run the starter script",
    "text": "Run the starter script\nInside the project folder:\nuv run python main.py\nYou should see something like:\nHello World!\n(If you want, you can open main.py and change the message, then re-run.)\n\nWhat does that code mean?\ndef main():\n    print(\"Hello, World!\")\n\nif __name__ == \"__main__\":\n    main()\n\ndef main(): defines a function (a reusable block of code).\nprint(...) shows text in the terminal.\nThe line if __name__ == \"__main__\": ensures this only auto-runs when the file is executed directly.\n\nDon’t worry about this yet, we’ll gradually build up to it.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "general/uv.html#adding-packages-later-in-the-course",
    "href": "general/uv.html#adding-packages-later-in-the-course",
    "title": "Installing Python",
    "section": "Adding packages (later in the course)",
    "text": "Adding packages (later in the course)\nIf/when you need a package (example: pandas):\nuv add pandas\nIf you added the wrong one:\nuv remove pandas\nIf your pyproject.toml changed (e.g. you pulled code from someone else):\nuv sync\n\n\n\n\n\n\nTip\n\n\n\nIf something seems “off”, just close the terminal and reopen in the project folder. Fresh starts fix many early mistakes.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "general/uv.html#updating-uv",
    "href": "general/uv.html#updating-uv",
    "title": "Installing Python",
    "section": "Updating uv",
    "text": "Updating uv\nOccasionally:\nuv self update\n(If it ever errors, you can just reinstall using the same one-liner from earlier.)",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "general/uv.html#best-practices-for-this-course",
    "href": "general/uv.html#best-practices-for-this-course",
    "title": "Installing Python",
    "section": "Best practices for this course",
    "text": "Best practices for this course\n\nOne project folder per session or assignment keeps everything tidy.\nNever install packages “globally” outside a project.\nPrefer uv run python &lt;file&gt; instead of environment activation.\nKeep a short personal log in each project’s README.md (What did I do? What still confuses me?).\nAsk early for help, guessing usually takes much more time than asking.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "general/uv.html#where-to-go-next",
    "href": "general/uv.html#where-to-go-next",
    "title": "Installing Python",
    "section": "10. Where to go next",
    "text": "10. Where to go next\nExplore the official docs later if you’re curious: https://docs.astral.sh/uv/\nYou can always see available commands:\nuv --help",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "general/uv.html#recap",
    "href": "general/uv.html#recap",
    "title": "Installing Python",
    "section": "Recap",
    "text": "Recap\nYou can now: 1. Install uv. 2. Create a project. 3. Run a script. 4. Add/remove/sync packages.\nNow, you’re set for the rest of the course.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "general/privacy.html",
    "href": "general/privacy.html",
    "title": "Privacy Policy",
    "section": "",
    "text": "Welcome! This Privacy Policy explains how we collect, use, shares, and protects information in relation to our AI Chatbot service (the “Chatbot”) provided on this website. All other services do not use data that is covered by this policy!\nWe are committed to protecting your privacy. This policy outlines our practices concerning the data processed when you interact with our Chatbot. By using the Chatbot, you agree to the collection and use of information in accordance with this policy."
  },
  {
    "objectID": "general/privacy.html#introduction",
    "href": "general/privacy.html#introduction",
    "title": "Privacy Policy",
    "section": "",
    "text": "Welcome! This Privacy Policy explains how we collect, use, shares, and protects information in relation to our AI Chatbot service (the “Chatbot”) provided on this website. All other services do not use data that is covered by this policy!\nWe are committed to protecting your privacy. This policy outlines our practices concerning the data processed when you interact with our Chatbot. By using the Chatbot, you agree to the collection and use of information in accordance with this policy."
  },
  {
    "objectID": "general/privacy.html#data-controller",
    "href": "general/privacy.html#data-controller",
    "title": "Privacy Policy",
    "section": "2. Data Controller",
    "text": "2. Data Controller\nThe data controller responsible for your personal data is:\nBeyond Simulations GmbH\nAm Eich 9d\n22113 Oststeinbek\nGermany\nEmail: info@beyond-simulations.com"
  },
  {
    "objectID": "general/privacy.html#information-we-collect",
    "href": "general/privacy.html#information-we-collect",
    "title": "Privacy Policy",
    "section": "3. Information We Collect",
    "text": "3. Information We Collect\nWhen you interact with our Chatbot, we collect and process the following types of information:\n\nChat Interactions: This includes the questions, prompts, and text you submit to the Chatbot (“Prompts”) and the responses generated by the Chatbot (“Responses”). We do not store any personal data and all prompts are anonymized.\nTechnical Data: We may automatically collect technical information associated with your interaction, such as timestamps, session identifiers for service functionality. This data is processed on our self-hosted server at Hetzner in Germany.\nUsage Data: We may collect aggregated and anonymized data about how the Chatbot is used to monitor performance and improve the service."
  },
  {
    "objectID": "general/privacy.html#how-we-use-your-information",
    "href": "general/privacy.html#how-we-use-your-information",
    "title": "Privacy Policy",
    "section": "4. How We Use Your Information",
    "text": "4. How We Use Your Information\nWe use the collected information for the following purposes:\n\nTo Provide and Operate the Chatbot: To receive your Prompts, process them using AI models, and deliver Responses back to you.\nTo Route Requests: To manage communication between our Chatbot interface and the underlying AI models via intermediary services.\nFor Safety and Content Moderation: To analyze Prompts and/or potential Responses for harmful, inappropriate, or policy-violating content using designated services by Mistral AI acting as guardrails, aiming to ensure safer interactions.\nFor Service Improvement: To analyze usage patterns to understand user needs, troubleshoot issues, and enhance the Chatbot’s performance and capabilities.\nFor Security and Monitoring: To maintain the security of our service, prevent fraud, and monitor for potential misuse.\nTo Comply with Legal Obligations: To meet any applicable legal or regulatory requirements."
  },
  {
    "objectID": "general/privacy.html#legal-basis-for-processing",
    "href": "general/privacy.html#legal-basis-for-processing",
    "title": "Privacy Policy",
    "section": "5. Legal Basis for Processing",
    "text": "5. Legal Basis for Processing\nWe process your personal data based on the following legal grounds:\n\nLegitimate Interests: Processing is necessary for our legitimate interests in operating and improving the Chatbot service and maintaining its security, provided these interests are not overridden by your data protection rights.\nConsent: In some cases, we might ask for your explicit consent for specific processing activities (e.g., using conversation data for fine-tuning models beyond basic service provision).\nLegal Obligation: Processing is necessary to comply with a legal obligation to which we are subject."
  },
  {
    "objectID": "general/privacy.html#data-sharing-and-third-parties",
    "href": "general/privacy.html#data-sharing-and-third-parties",
    "title": "Privacy Policy",
    "section": "6. Data Sharing and Third Parties",
    "text": "6. Data Sharing and Third Parties\nTo provide the Chatbot service, your Prompts are processed by and shared with the following third-party services and infrastructure providers:\n\nChatbot Interface: The user interface for the Chatbot runs directly in your web browser.\nRAG-Backend: The RAG backend runs on a self-hosted server on Hetzner in Germany.\nLLM Observation (Langfuse): We use Langfuse to observe the usage of the LLM models we use. Your Prompts (and generated responses) pass through Langfuse to reach the selected LLM provider or guardrail service. The data is stored on our self-hosted server at Hetzner in Germany.\nHosting Provider (Hetzner): Our instance of Langfuse is self-hosted on servers provided by Hetzner Online GmbH. Hetzner acts as a data processor providing the infrastructure. We store application data and interaction logs on these servers, located within Germany.\nMistral AI: We use Mistral AI for two primary purposes: (1) as one of the LLM options to generate Responses to your Prompts, and (2) as a guardrail service to check Prompts and/or potential Responses (which may have been generated by Mistral AI itself) for safety, appropriateness, and compliance with content policies before a final response is delivered to you. When Mistral is used for either generation or guardrail checking, your data (relevant Prompts and/or potential Responses) is processed according to Mistral’s terms and privacy policy. The data ist not used or saved for training purposes by the model providers.\n\nImportant Note on Third-Party Processing: These LLM and guardrail providers process your data to generate Responses or perform safety checks. They may use data according to their own policies, potentially including service improvement, subject to their terms. We encourage you to review their respective privacy policies. We do not explicitly share personal identifiers like your name or email through the Chatbot interaction unless you voluntarily include such information in your Prompts."
  },
  {
    "objectID": "general/privacy.html#data-storage-security-and-retention",
    "href": "general/privacy.html#data-storage-security-and-retention",
    "title": "Privacy Policy",
    "section": "7. Data Storage, Security, and Retention",
    "text": "7. Data Storage, Security, and Retention\n\nStorage: Chat interaction data (Prompts, Responses) and technical logs may be stored temporarily or persistently (depending on configuration) on our Langfuse instance hosted on Hetzner servers in Germany.\nSecurity: We implement reasonable technical and organizational measures to protect your data from unauthorized access, disclosure, alteration, or destruction. This includes using HTTPS encryption for data transmitted between your browser, our server, and the LLM providers. Access to the backend systems is restricted.\nRetention: We retain chat interaction data and technical logs only for as long as necessary to fulfill the purposes outlined in this policy, for troubleshooting, security logging, service improvement, or as required by law. Retention periods vary depending on the type of data and our operational needs."
  },
  {
    "objectID": "general/privacy.html#your-data-protection-rights",
    "href": "general/privacy.html#your-data-protection-rights",
    "title": "Privacy Policy",
    "section": "8. Your Data Protection Rights",
    "text": "8. Your Data Protection Rights\nDepending on your location and applicable data protection laws, you may have the following rights regarding your personal data:\n\nRight to Access: You can request copies of your personal data that we hold.\nRight to Rectification: You can request correction of inaccurate or incomplete data.\nRight to Erasure (‘Right to be Forgotten’): You can request the deletion of your personal data under certain conditions.\nRight to Restrict Processing: You can request the limitation of how we process your data under certain conditions.\nRight to Data Portability: You can request that we transfer the data we have collected to another organization, or directly to you, under certain conditions.\nRight to Object: You can object to our processing of your personal data based on legitimate interests.\nRight to Withdraw Consent: If processing is based on consent, you can withdraw it at any time.\n\nTo exercise any of these rights, please contact us using the details provided in Section 2 (Data Controller). We may need to verify your identity before processing your request."
  },
  {
    "objectID": "general/privacy.html#changes-to-this-privacy-policy",
    "href": "general/privacy.html#changes-to-this-privacy-policy",
    "title": "Privacy Policy",
    "section": "9. Changes to This Privacy Policy",
    "text": "9. Changes to This Privacy Policy\nWe may update this Privacy Policy from time to time. We will notify you of any significant changes by posting the new policy on this page and updating the “Last Updated” date at the top. We encourage you to review this policy periodically for any changes."
  },
  {
    "objectID": "general/faq.html",
    "href": "general/faq.html",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "If you have a question that is not answered here, please let me know by sending me an e-mail to vlcek@beyondsimulations.com or by creating an issue on GitHub.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#unanswered-questions",
    "href": "general/faq.html#unanswered-questions",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "If you have a question that is not answered here, please let me know by sending me an e-mail to vlcek@beyondsimulations.com or by creating an issue on GitHub.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#contribution-and-mistakes",
    "href": "general/faq.html#contribution-and-mistakes",
    "title": "Frequently Asked Questions",
    "section": "Contribution and Mistakes",
    "text": "Contribution and Mistakes\nIf you have found a mistake in the course material or if you have any suggestion on how to improve the course, please let me know by sending me an e-mail to vlcek@beyondsimulations.com or by creating an issue on GitHub.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "general/faq.html#faqs",
    "href": "general/faq.html#faqs",
    "title": "Frequently Asked Questions",
    "section": "FAQs",
    "text": "FAQs\n\nHow can I download PDF slides from the lecture?\n\nFirst, open the lecture you want to download the slides from.\nThen, click on the RevealJS button in the top right corner.\nNow, click on the three stacked bars in the lower left corner.\nThen, click on Tools in the upper left corner.\nNow you can select PDF Export Mode and then save the slides as a PDF.",
    "crumbs": [
      "FAQs"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Programming: Everyday Decision-Making Algorithms",
    "section": "",
    "text": "This course explores the intersection of computer science and everyday life by examining how algorithms can be applied to improve decision-making in various contexts. Based on the book “Algorithms to Live By” by Brian Christian and Tom Griffiths, the course will cover topics such as optimal stopping, scheduling, caching, and game theory, providing both theoretical foundations and practical programming exercises. The course consists of lectures and exercises.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#ai-policy",
    "href": "index.html#ai-policy",
    "title": "Programming: Everyday Decision-Making Algorithms",
    "section": "AI Policy",
    "text": "AI Policy\nLevel 1: Pause – Use of AI defined by the educator\nA course chatbot is available on the learning website for exploratory study. It is designed to guide your problem-solving process rather than provide answers directly. Use it as a learning tool, not a solution generator.\nYou may also use external AI tools (e.g., ChatGPT, Claude, Mistral, Gemini). However:\n\nPlease be careful and try to understand the code generated.\nRelying on AI to solve tasks for you weakens your own learning.\nAI should ideally support understanding — not replace practice.\nUsing AI without understand the code can lead to security risks.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "general/cheatsheet.html",
    "href": "general/cheatsheet.html",
    "title": "Cheatsheet",
    "section": "",
    "text": "Definition: Containers for storing information.\nExample: x = 10\n\n\n\n\n\nIntegers (int): Whole numbers (e.g., count of dates).\nFloats (float): Decimal numbers (e.g., compatibility score).\nBooleans (bool): True/False values (e.g., availability).\nStrings (str): Text values (e.g., names).\n\n  name = \"Alexander\"  # String variable\n  flags = 0           # Integer variable\n  butterflies = True  # Boolean variable\n\n\n\n\nChecking: Use type() to check the type of a variable.\nConversion:\n\nint(): Converts to integer.\nfloat(): Converts to float.\nstr(): Converts to string.\nbool(): Converts to boolean.\n\n\n\n\n\n\nConcatenation: Combine strings using +.\nFormatting: Use f\"...\" for formatted strings.\n\n\nname = \"Alexander\"\nprint(f\"Hello, {name}!\")\n\nHello, Alexander!",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#variables",
    "href": "general/cheatsheet.html#variables",
    "title": "Cheatsheet",
    "section": "",
    "text": "Definition: Containers for storing information.\nExample: x = 10",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#data-types",
    "href": "general/cheatsheet.html#data-types",
    "title": "Cheatsheet",
    "section": "",
    "text": "Integers (int): Whole numbers (e.g., count of dates).\nFloats (float): Decimal numbers (e.g., compatibility score).\nBooleans (bool): True/False values (e.g., availability).\nStrings (str): Text values (e.g., names).\n\n  name = \"Alexander\"  # String variable\n  flags = 0           # Integer variable\n  butterflies = True  # Boolean variable",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#type-conversion",
    "href": "general/cheatsheet.html#type-conversion",
    "title": "Cheatsheet",
    "section": "",
    "text": "Checking: Use type() to check the type of a variable.\nConversion:\n\nint(): Converts to integer.\nfloat(): Converts to float.\nstr(): Converts to string.\nbool(): Converts to boolean.",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#string-formatting",
    "href": "general/cheatsheet.html#string-formatting",
    "title": "Cheatsheet",
    "section": "",
    "text": "Concatenation: Combine strings using +.\nFormatting: Use f\"...\" for formatted strings.\n\n\nname = \"Alexander\"\nprint(f\"Hello, {name}!\")\n\nHello, Alexander!",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#comparison-operators",
    "href": "general/cheatsheet.html#comparison-operators",
    "title": "Cheatsheet",
    "section": "Comparison Operators",
    "text": "Comparison Operators\n\n\n\n\n\n\n\n\nSymbol\nMeaning\nExample\n\n\n\n\n==\nEqual to\nscore == 100\n\n\n!=\nNot equal to\ndegree != “Computer Science”\n\n\n&lt;\nLess than\nsalary &lt; 80000\n\n\n&gt;\nGreater than\nexperience &gt; 5\n\n\n&lt;=\nLess than or equal to\nage &lt;= 65\n\n\n&gt;=\nGreater than or equal to\ntest_score &gt;= 80",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#logical-operators",
    "href": "general/cheatsheet.html#logical-operators",
    "title": "Cheatsheet",
    "section": "Logical Operators",
    "text": "Logical Operators\n\n\n\n\n\n\n\n\nSymbol\nMeaning\nExample\n\n\n\n\nand\nBoth conditions must be true\nscore &gt; 80 and experience &gt; 5\n\n\nor\nAt least one condition must be true\nscore &gt; 80 or experience &gt; 5\n\n\nnot\nCondition must be false\nnot (score &gt; 80)",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#if-statements",
    "href": "general/cheatsheet.html#if-statements",
    "title": "Cheatsheet",
    "section": "if Statements",
    "text": "if Statements\n\nStructure:\n\nif condition:\n    # code to execute if condition is True\n\nExample:\n\n\nflat_rating = 8\nif flat_rating &gt;= 7:\n    print(\"This is a good apartment!\")\n\nThis is a good apartment!",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#if-else-statements",
    "href": "general/cheatsheet.html#if-else-statements",
    "title": "Cheatsheet",
    "section": "if-else Statements",
    "text": "if-else Statements\n\nStructure:\n\nif condition:\n    # code to execute if condition is True\nelse:\n    # code to execute if condition is False\n\nExample:\n\n\nflat_rating = 4\nif flat_rating &gt;= 7:\n    print(\"Apply for this flat!\")\nelse:\n    print(\"Keep searching!\")\n\nKeep searching!",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#if-elif-else-statements",
    "href": "general/cheatsheet.html#if-elif-else-statements",
    "title": "Cheatsheet",
    "section": "if-elif-else Statements",
    "text": "if-elif-else Statements\n\nStructure:\n\nif condition:\n    # code to execute if condition is True\nelif condition:\n    # code to execute if condition is False\nelse:\n    # code to execute if condition is False\n\nExample:\n\n\nflat_rating = 8\nif flat_rating &gt;= 9:\n    print(\"Amazing flat - apply immediately!\")\nelif flat_rating &gt;= 7:\n    print(\"Good flat - consider applying\")\nelse:\n    print(\"Keep looking\")\n\nGood flat - consider applying",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#complex-conditions",
    "href": "general/cheatsheet.html#complex-conditions",
    "title": "Cheatsheet",
    "section": "Complex Conditions",
    "text": "Complex Conditions\n\nNested if Statements: Use if statements inside other if statements.\nLogical Operators: Combine conditions using and, or, not.\nStructure:\n\nif (condition1) and (condition2):\n    # code if both conditions are True\nelif (condition1) or (condition2):\n    # code if at least one condition is True\nelse:\n    # code if none of the conditions are True\n\nExample:\n\n\nflat_rating = 9\nprice = 900\nif (flat_rating &gt;= 9) and (price &lt; 1000):\n    print(\"Amazing flat - apply immediately!\")\n\nAmazing flat - apply immediately!",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#accessing-elements",
    "href": "general/cheatsheet.html#accessing-elements",
    "title": "Cheatsheet",
    "section": "Accessing Elements",
    "text": "Accessing Elements\n\nIndexing: Use [index] to access elements.\n\n\nprint(restaurants[0])  # Access the first element\n\nMagic Place\n\n\n\nNegative Indexing: Use [-1] to access the last element.\n\n\nprint(restaurants[-1])  # Access the last element\n\nCoffee Shop\n\n\n\nSlicing: Use [start:end] to access a range of elements.\n\n\nprint(restaurants[0:2])  # Access the first two elements\n\n['Magic Place', 'Sushi Bar']",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#adding-elements",
    "href": "general/cheatsheet.html#adding-elements",
    "title": "Cheatsheet",
    "section": "Adding Elements",
    "text": "Adding Elements\n\nAppending: Use append() to add an element to the end of the list.\n\n\nrestaurants.append(\"Pasta Place\")\n\n\nInserting: Use insert() to add an element at a specific index.\n\n\nrestaurants.insert(0, \"Pasta Magic\")",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#removing-elements",
    "href": "general/cheatsheet.html#removing-elements",
    "title": "Cheatsheet",
    "section": "Removing Elements",
    "text": "Removing Elements\n\nRemoving: Use remove() to remove an element by value.\n\n\nrestaurants.remove(\"Pasta Place\")\n\n\nRemoving by Index: Use pop() to remove an element by index.\n\n\nrestaurants.pop(0)\n\n'Pasta Magic'",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#nested-lists",
    "href": "general/cheatsheet.html#nested-lists",
    "title": "Cheatsheet",
    "section": "Nested Lists",
    "text": "Nested Lists\n\nDefinition: Lists containing other lists or tuples.\nAccessing: Use nested indexing.\n\n\nrestaurant_data = [\n    [\"Pasta Place\", 4.5, 3],\n    [\"Sushi Bar\", 4.2, 1]\n]\nprint(restaurants[0][1])  # Access the second element of the first list\n\na",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#tuples",
    "href": "general/cheatsheet.html#tuples",
    "title": "Cheatsheet",
    "section": "Tuples",
    "text": "Tuples\n\nDefinition: Ordered, immutable collections of items.\nCreation: Use parentheses ().\nImmutability: Once created, cannot be changed.\nMemory Efficiency: Use less memory than lists.\nUse Cases: Ideal for fixed data (e.g., restaurant location).\n\n\nratings = (4.5, 3.8, 4.2)\nrestaurant_info = (\"Pasta Place\", \"Italian\", 2020)",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#for-loops",
    "href": "general/cheatsheet.html#for-loops",
    "title": "Cheatsheet",
    "section": "for Loops",
    "text": "for Loops\n\nDefinition: Iterate over a sequence of items.\nStructure:\n\nfor item in sequence:\n    # code to execute for each item\n\nExample:\n\n\ntreatments = [\"Standard Drug\", \"New Drug A\", \"New Drug B\"]\nfor treatment in treatments:\n    print(f\"Evaluating efficacy of {treatment}\")\n\nEvaluating efficacy of Standard Drug\nEvaluating efficacy of New Drug A\nEvaluating efficacy of New Drug B",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#range-in-for-loops",
    "href": "general/cheatsheet.html#range-in-for-loops",
    "title": "Cheatsheet",
    "section": "Range in for Loops",
    "text": "Range in for Loops\n\nDefinition: Generate a sequence of numbers.\nStructure:\n\nrange(start, stop, step)\n\nExample:\n\n\nfor phase in range(5):  # 0 to 4\n    print(f\"Starting Phase {phase + 1}\")\n\nStarting Phase 1\nStarting Phase 2\nStarting Phase 3\nStarting Phase 4\nStarting Phase 5\n\n\n\nfor phase in range(1, 5):  # 1 to 4\n    print(f\"Starting Phase {phase}\")\n\nStarting Phase 1\nStarting Phase 2\nStarting Phase 3\nStarting Phase 4\n\n\n\nfor phase in range(1, 5, 2):  # 1 to 4, step 2\n    print(f\"Starting Phase {phase}\")\n\nStarting Phase 1\nStarting Phase 3",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#break-and-continue",
    "href": "general/cheatsheet.html#break-and-continue",
    "title": "Cheatsheet",
    "section": "break and continue",
    "text": "break and continue\n\nbreak: Exit the loop.\ncontinue: Skip the current iteration and continue with the next.\n\n\nefficacy_scores = [45, 60, 75, 85, 90]\nfor score in efficacy_scores:\n    if score &lt; 50:\n        continue\n        print(f\"Treatment efficacy: {score}%\")\n    if score &gt;= 85:\n        break",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#tuple-unpacking",
    "href": "general/cheatsheet.html#tuple-unpacking",
    "title": "Cheatsheet",
    "section": "Tuple unpacking",
    "text": "Tuple unpacking\n\nDefinition: Assign elements of a tuple to variables.\nStructure:\nExample:\n\n\nrestaurant_info = (\"Pasta Place\", \"Italian\", 2020)\nname, cuisine, year = restaurant_info\nprint(name)\nprint(cuisine)\nprint(year)\n\nPasta Place\nItalian\n2020",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#while-loops",
    "href": "general/cheatsheet.html#while-loops",
    "title": "Cheatsheet",
    "section": "while Loops",
    "text": "while Loops\n\nDefinition: Execute code repeatedly as long as a condition is true.\nStructure:\n\nwhile condition:\n    # code to execute while condition is True\n\nExample:\n\n\nphase = 1\nwhile phase &lt;= 5:\n    print(f\"Starting Phase {phase}\")\n    phase += 1\n\nStarting Phase 1\nStarting Phase 2\nStarting Phase 3\nStarting Phase 4\nStarting Phase 5",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#basic-function",
    "href": "general/cheatsheet.html#basic-function",
    "title": "Cheatsheet",
    "section": "Basic Function",
    "text": "Basic Function\n\nDefinition: Use the def keyword.\nStructure:\n\ndef function_name(parameters):\n    # code to execute (function body)\n    return value  # Optional\n\nExample:\n\n\ndef greet_visitor(name):\n    return f\"Welcome to the library, {name}!\"\n\ngreet_visitor(\"Student\")\n\n'Welcome to the library, Student!'",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#return-value",
    "href": "general/cheatsheet.html#return-value",
    "title": "Cheatsheet",
    "section": "Return Value",
    "text": "Return Value\n\nDefinition: The value returned by a function.\nExample:\n\n\ndef multiply_by_two(number):\n    return number * 2\n\nresult = multiply_by_two(5)\nprint(result)\n\n10\n\n\n\nNote: If a function does not return a value, it implicitly returns None.",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#default-parameters",
    "href": "general/cheatsheet.html#default-parameters",
    "title": "Cheatsheet",
    "section": "Default Parameters",
    "text": "Default Parameters\n\nDefinition: Provide default values for function parameters.\nStructure:\n\ndef greet_visitor(name=\"People\"):\n    return f\"Welcome to the library, {name}!\"\n\nprint(greet_visitor()) # Calls the function with the default parameter\nprint(greet_visitor(\"Tobias\")) # Calls the function with a custom parameter",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#multiple-parameters",
    "href": "general/cheatsheet.html#multiple-parameters",
    "title": "Cheatsheet",
    "section": "Multiple Parameters",
    "text": "Multiple Parameters\n\nDefinition: Functions can have multiple parameters.\nStructure:\n\ndef greet_visitor(name, age):\n    return f\"Welcome to the library, {name}! You are {age} years old.\"\n\nprint(greet_visitor(\"Tobias\", 30))",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#standard-libraries",
    "href": "general/cheatsheet.html#standard-libraries",
    "title": "Cheatsheet",
    "section": "Standard Libraries",
    "text": "Standard Libraries\n\nDefinition: Libraries that are part of the Python standard library.\nAccess: Import them using import.\n\n\nimport math\nimport random\n\n\nFor long package names, you can use the as keyword to create an alias.\n\n\nimport random as rd\n\n\nTo call a function from an imported package, use the package name as a prefix.\n\n\nrandom_number = rd.random()\nprint(random_number)\n\n0.8605658645803722",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/cheatsheet.html#installing-packages",
    "href": "general/cheatsheet.html#installing-packages",
    "title": "Cheatsheet",
    "section": "Installing Packages",
    "text": "Installing Packages\n\nDefinition: Install packages using uv.\n\nuv add package_name\n\nIf you are using Miniconda, you can use conda instead.\n\nconda install package_name",
    "crumbs": [
      "Cheatsheet"
    ]
  },
  {
    "objectID": "general/literature.html",
    "href": "general/literature.html",
    "title": "Literature and Resources",
    "section": "",
    "text": "This section provides a curated list of books and resources to enhance your understanding of algorithmic thinking and programming. Each recommendation includes a brief description to help you choose the most suitable resources for you.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#books",
    "href": "general/literature.html#books",
    "title": "Literature and Resources",
    "section": "Books",
    "text": "Books\n\nChristian, B., & Griffiths, T. (2016). Algorithms to live by: the computer science of human decisions. First international edition. New York, Henry Holt and Company.\n\nA book that inspired this lecture and will give you a good intuition for the principles of algorithmic thinking and how they can be applied to solve problems in everyday life.\n\nZingaro, D. (2024) Algorithmic thinking, 2nd edition: Unlock your programming potential. AU: No Starch Press.\n\nA book that introduces you to different algorithms and their reasoning. Written without any pseudocode, but with a lot of examples and explanations.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#books-1",
    "href": "general/literature.html#books-1",
    "title": "Literature and Resources",
    "section": "Books",
    "text": "Books\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly.\n\nA great book to start with if you have no experience with programming.\nLink to free online book\n\nVanderPlas, J. (2016). A whirlwind tour of Python (August 2016, First edition). O’Reilly Media Inc.\n\nA very good and short book to get a quick overview of the most important features of Python if you already have some experience with programming.\nLink to the free online version\n\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\nA book that is unfortunately only available in German, but a very good and comedic start for beginners with lots of illustrations, examples and exercises. It is only available in print.\n\nMatthes, E. (2023). Python crash course: A hands-on, project-based introduction to programming (3rd edition). No Starch Press.\n\nA great book to learn Python with a hands-on approach. Highly recommended even for beginners but only available to buy.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#resources",
    "href": "general/literature.html#resources",
    "title": "Literature and Resources",
    "section": "Resources",
    "text": "Resources\n\nDaily Dose of Data Science\n\nA website and a newsletter with lots of easy-to-digest resources to improve your skills in Data Science.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#books-2",
    "href": "general/literature.html#books-2",
    "title": "Literature and Resources",
    "section": "Books",
    "text": "Books\n\nWilke, C. (2019). Fundamentals of data visualization: A primer on making informative and compelling figures (First edition). O’Reilly Media.\n\nA book that is highly recommended to understand the principles of data visualization and how to create effective visualizations.\nLink to the free book website\n\nThomas, D., & Hunt, A. (2019). The pragmatic programmer, 20th anniversary edition: Journey to mastery (Second edition). Addison-Wesley.\n\nA fantasticbook to understand the principles of software development and how to create effective software.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/literature.html#resources-1",
    "href": "general/literature.html#resources-1",
    "title": "Literature and Resources",
    "section": "Resources",
    "text": "Resources\n\nQuarto\n\nA static website generator that is very powerful and flexible. Used to create the slides and the website for the course.\n\nCursor\n\nA code editor based on VS Code that is very powerful and flexible. It uses AI to help you write code.\n\nZed\n\nA young and lightweight code editor that is very fast and lightweight with built-in collaboration and AI features.\n\nJupyter\n\nA web application that allows you to create and share documents that contain code, equations, visualizations and text. It is very popular in the field of data science and academia and also part of Quarto.\n\nAdvent of Code\n\nA wonderful website with daily challenges during the christmas time. Highly recommended to playfully improve your skills.\n\nTiny Python Projects\n\nInteresting and fun projects to programm in order to improve your programming skills.\n\nGithub\n\nThe largest provider for git repositories owned by Microsoft. A lot of open source projects are hosted here and you can read the code.\n\nCodewars\n\nA platform to improve your coding skills by solving challenges. You can compete with others, see how other people solved the challenges and read and learn from the code.\n\nCheat-Sheets\n\nFantastic resource with cheat sheets for the book “Python Crash Course” by Eric Matthes. You can use these to quickly look up syntax and functions.",
    "crumbs": [
      "Literature"
    ]
  },
  {
    "objectID": "general/syllabus.html",
    "href": "general/syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Lectures\nIn our lectures, we mostly refrain from showing you any code. Instead, we will focus on explaining the concepts and how they can be used to solve problems. The tutorials will then show you step-by-step how to implement the concepts in Python.\nWe were rather ambitious in the design of the course in the course module, thus we will not be able to cover all topics there. However, we have chosen the most important topics from our perspective that will lay a good foundation for interested students to continue learning on their own.\nWelcome and Optimal Stopping (I)\n\nOverview of the course and its objectives\nIntroduction to algorithmic thinking\nOptimal Stopping\nProgramming: First Steps in Python\n\nExplore & Exploit (II)\n\nMulti-armed Bandit Problem\nBalancing exploration and exploitation\nProgramming: Simulating the Multi-armed Bandit Problem\n\nCaching (III)\n\nPrinciples of caching and memory management\nLeast Recently Used (LRU) and other caching strategies\nProgramming: Implementing an LRU cache\n\nScheduling (IV)\n\nTask scheduling algorithms\nTrade-offs between efficiency and fairness\nProgramming: Implementing scheduling algorithms\n\nRandomness (V)\n\nRole of randomness in algorithms\nMonte Carlo methods and their applications\nProgramming: Monte Carlo simulation\n\nComputational Kindness (VI)\n\nAlgorithms for social good\nEthical considerations in algorithm design\nQuick review of key concepts\nBrief student presentations\nOpen discussion and Q&A",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "lectures/lec_00_introduction.html",
    "href": "lectures/lec_00_introduction.html",
    "title": "Introduction - Programming",
    "section": "",
    "text": "Dr. Tobias Vlcek\n\n\n\n\n\n\n\nDr. Nils Roemer\n\n\n\n\n\n\n\n\n\n\nField: Optimizing and simulating complex systems\nLanguages: of choice: Julia, Python and Rust\nInterest: Modelling, Simulations, Machine Learning\nTeaching: OR, Algorithms, and Programming\nContact: vlcek@beyondsimulations.com\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nWe really appreciate active participation and interaction!\n\n\n\n\n\n\nI: Optimal Stopping\nII: Explore & Exploit\nIII: Caching\nIV: Scheduling\nV: Randomness\nVI: Computational Kindness\n\n\n\n\n\nTry actively participating in this course\nYou will find it much (!) easier and more fun\nLecture based on the book Algorithms to live by1\nMaterial and slides are hosted online: beyondsimulations.github.io/Programming-Everyday-Decisions\n\n\n\n\n\nLecture: Presentation and discussion of algorithms related to everyday decision-making\nTutorial: Step-by-step assignments to be solved and discussed together in groups\nDifficulty: Strongly depends on your background and programming experience\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nNo worries, we will help you out if you have any questions!\n\n\n\n\n\n\nPass/fail course without exams\n75% attendance required for passing the course\nHand in the assignments of at least two lectures\nShort presentation and discussion at the end\nYou work together in groups of three students\n\n\n\n\n\nEach student group submits one solution\nProvide us all working notebooks of the lecture\nHand in is due at the beginning of the next lecture\nAt least 50 % have to be correct to pass\nYou have to pass at least twice\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nThis is just in order to provide you with working solutions after each deadline.\n\n\n\n\n\nWe will mostly not cover Python during the lectures!\n. . .\nQuestion: Anybody know why?\n. . .\n\nIn our experience, the best way to learn is by doing!\nHere, we will focus on decision-making algorithms\nYou will learn Python by doing the tutorials\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nDon’t worry, we will help you out if you have any questions!\n\n\n\n\n\n\nAt first it might be a little bit overwhelming\nProgramming is similar to learning a new language\nFirst, you have to get used to it and learn words\nLater, you’ll be able to apply it and see results\nImportant: Practice, practice, practice!\n\n\n\n\n\nLearn the basics of programming\nLearn about algorithmic thinking\nBe able to apply methods and concepts\nSolve practical problems with algorithms\n\n\n\n\n\n\n\nTip\n\n\n\nWe are convinced that this course will be quite interesting and teach you more for your daily life than most other courses!\n\n\n\n\n\n\nOrigins: Conceived in late 1980s as a teaching and scripting language\nSimple Syntax: Python’s syntax is mostly straightforward and very easy to learn\nVersatility: Used in web development, data analysis, artificial intelligence, and more\nCommunity Support: A large community of users worldwide and extensive documentation\n\n\n\n\n\nYou are allowed to use AI in the course, we use it as well (e.g., Claude, ChatGPT, LLama3 …)\nThese tools are great for learning Python!\nCan help you a lot to get started with programming\n\n. . .\n\n\n\n\n\n\nWarning\n\n\n\nBut you should not simply use them to replace your learning.",
    "crumbs": [
      "01 Optimal Stopping",
      "Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_00_introduction.html#teaching-team",
    "href": "lectures/lec_00_introduction.html#teaching-team",
    "title": "Introduction - Programming",
    "section": "",
    "text": "Dr. Tobias Vlcek\n\n\n\n\n\n\n\nDr. Nils Roemer",
    "crumbs": [
      "01 Optimal Stopping",
      "Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_00_introduction.html#about-me",
    "href": "lectures/lec_00_introduction.html#about-me",
    "title": "Introduction - Programming",
    "section": "",
    "text": "Field: Optimizing and simulating complex systems\nLanguages: of choice: Julia, Python and Rust\nInterest: Modelling, Simulations, Machine Learning\nTeaching: OR, Algorithms, and Programming\nContact: vlcek@beyondsimulations.com\n\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nWe really appreciate active participation and interaction!",
    "crumbs": [
      "01 Optimal Stopping",
      "Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_00_introduction.html#course-outline",
    "href": "lectures/lec_00_introduction.html#course-outline",
    "title": "Introduction - Programming",
    "section": "",
    "text": "I: Optimal Stopping\nII: Explore & Exploit\nIII: Caching\nIV: Scheduling\nV: Randomness\nVI: Computational Kindness",
    "crumbs": [
      "01 Optimal Stopping",
      "Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_00_introduction.html#participation",
    "href": "lectures/lec_00_introduction.html#participation",
    "title": "Introduction - Programming",
    "section": "",
    "text": "Try actively participating in this course\nYou will find it much (!) easier and more fun\nLecture based on the book Algorithms to live by1\nMaterial and slides are hosted online: beyondsimulations.github.io/Programming-Everyday-Decisions",
    "crumbs": [
      "01 Optimal Stopping",
      "Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_00_introduction.html#teaching",
    "href": "lectures/lec_00_introduction.html#teaching",
    "title": "Introduction - Programming",
    "section": "",
    "text": "Lecture: Presentation and discussion of algorithms related to everyday decision-making\nTutorial: Step-by-step assignments to be solved and discussed together in groups\nDifficulty: Strongly depends on your background and programming experience\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nNo worries, we will help you out if you have any questions!",
    "crumbs": [
      "01 Optimal Stopping",
      "Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_00_introduction.html#passing-the-course",
    "href": "lectures/lec_00_introduction.html#passing-the-course",
    "title": "Introduction - Programming",
    "section": "",
    "text": "Pass/fail course without exams\n75% attendance required for passing the course\nHand in the assignments of at least two lectures\nShort presentation and discussion at the end\nYou work together in groups of three students",
    "crumbs": [
      "01 Optimal Stopping",
      "Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_00_introduction.html#handing-in-assignments",
    "href": "lectures/lec_00_introduction.html#handing-in-assignments",
    "title": "Introduction - Programming",
    "section": "",
    "text": "Each student group submits one solution\nProvide us all working notebooks of the lecture\nHand in is due at the beginning of the next lecture\nAt least 50 % have to be correct to pass\nYou have to pass at least twice\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nThis is just in order to provide you with working solutions after each deadline.",
    "crumbs": [
      "01 Optimal Stopping",
      "Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_00_introduction.html#learning-python",
    "href": "lectures/lec_00_introduction.html#learning-python",
    "title": "Introduction - Programming",
    "section": "",
    "text": "We will mostly not cover Python during the lectures!\n. . .\nQuestion: Anybody know why?\n. . .\n\nIn our experience, the best way to learn is by doing!\nHere, we will focus on decision-making algorithms\nYou will learn Python by doing the tutorials\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nDon’t worry, we will help you out if you have any questions!",
    "crumbs": [
      "01 Optimal Stopping",
      "Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_00_introduction.html#difficulty-of-the-course",
    "href": "lectures/lec_00_introduction.html#difficulty-of-the-course",
    "title": "Introduction - Programming",
    "section": "",
    "text": "At first it might be a little bit overwhelming\nProgramming is similar to learning a new language\nFirst, you have to get used to it and learn words\nLater, you’ll be able to apply it and see results\nImportant: Practice, practice, practice!",
    "crumbs": [
      "01 Optimal Stopping",
      "Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_00_introduction.html#goals-of-the-course",
    "href": "lectures/lec_00_introduction.html#goals-of-the-course",
    "title": "Introduction - Programming",
    "section": "",
    "text": "Learn the basics of programming\nLearn about algorithmic thinking\nBe able to apply methods and concepts\nSolve practical problems with algorithms\n\n\n\n\n\n\n\nTip\n\n\n\nWe are convinced that this course will be quite interesting and teach you more for your daily life than most other courses!",
    "crumbs": [
      "01 Optimal Stopping",
      "Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_00_introduction.html#why-python",
    "href": "lectures/lec_00_introduction.html#why-python",
    "title": "Introduction - Programming",
    "section": "",
    "text": "Origins: Conceived in late 1980s as a teaching and scripting language\nSimple Syntax: Python’s syntax is mostly straightforward and very easy to learn\nVersatility: Used in web development, data analysis, artificial intelligence, and more\nCommunity Support: A large community of users worldwide and extensive documentation",
    "crumbs": [
      "01 Optimal Stopping",
      "Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_00_introduction.html#help-from-ai",
    "href": "lectures/lec_00_introduction.html#help-from-ai",
    "title": "Introduction - Programming",
    "section": "",
    "text": "You are allowed to use AI in the course, we use it as well (e.g., Claude, ChatGPT, LLama3 …)\nThese tools are great for learning Python!\nCan help you a lot to get started with programming\n\n. . .\n\n\n\n\n\n\nWarning\n\n\n\nBut you should not simply use them to replace your learning.",
    "crumbs": [
      "01 Optimal Stopping",
      "Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_00_introduction.html#our-recommendation",
    "href": "lectures/lec_00_introduction.html#our-recommendation",
    "title": "Introduction - Programming",
    "section": "Our Recommendation",
    "text": "Our Recommendation\n\nBe present: Attend the lecture and solve the tutorials\nPut in some work: Repeat code and try to understand it\nDo coding: Run code, play around, modify, and solve\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nGreat resources to start are books and small challenges. You can find a list of book recommendations at the end of the lecture. Small challenges to solve can for example be found on Codewars.",
    "crumbs": [
      "01 Optimal Stopping",
      "Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_00_introduction.html#dont-give-up",
    "href": "lectures/lec_00_introduction.html#dont-give-up",
    "title": "Introduction - Programming",
    "section": "Don’t give up!",
    "text": "Don’t give up!\n\nProgramming is problem solving, don’t get frustrated!\nExpect to stretch your comfort zone",
    "crumbs": [
      "01 Optimal Stopping",
      "Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_00_introduction.html#the-setup",
    "href": "lectures/lec_00_introduction.html#the-setup",
    "title": "Introduction - Programming",
    "section": "The Setup",
    "text": "The Setup\n\nWe will use Jupyter Notebooks for the tutorials\nAllow to combine code and text in one document\nWe will use Visual Studio Code as an IDE\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nIDE = Integrated Development Environment",
    "crumbs": [
      "01 Optimal Stopping",
      "Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_00_introduction.html#installing-python-with-uv",
    "href": "lectures/lec_00_introduction.html#installing-python-with-uv",
    "title": "Introduction - Programming",
    "section": "Installing Python with uv",
    "text": "Installing Python with uv\n\nWe will use uv to install and manage Python versions\nIt works on Windows, Mac and Linux\nIt helps us to manage packages and virtual environments\nNow, we all go here and install uv and Python\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nIf the installation does not work, let us know!",
    "crumbs": [
      "01 Optimal Stopping",
      "Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_00_introduction.html#install-vs-code",
    "href": "lectures/lec_00_introduction.html#install-vs-code",
    "title": "Introduction - Programming",
    "section": "Install VS Code",
    "text": "Install VS Code\n\nDownload and install from the website\nBuilt for Windows, Linux and Mac\nInstall the Python and Jupyter extension\nNow you are ready to go!\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nUnsure on how to work with VS Code and notebooks? Take a look at the tutorial from VS Code and/or ask us! We are happy to help you out!",
    "crumbs": [
      "01 Optimal Stopping",
      "Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_00_introduction.html#python-on-ipads",
    "href": "lectures/lec_00_introduction.html#python-on-ipads",
    "title": "Introduction - Programming",
    "section": "Python on iPads",
    "text": "Python on iPads\n\nYou can run Python scripts on your iPad\nBut it is not recommended for the course\nHowever, you could use Juno if you want to\nIt works locally on your iPad and can run notebooks\n\n. . .\n\n\n\n\n\n\nCaution\n\n\n\nNot all packages available in Python are available here, thus you might need a computer to solve certain problems. For our course, this should not be a problem.",
    "crumbs": [
      "01 Optimal Stopping",
      "Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_00_introduction.html#hello-world",
    "href": "lectures/lec_00_introduction.html#hello-world",
    "title": "Introduction - Programming",
    "section": "Hello, World!",
    "text": "Hello, World!\nTask: Create a directory for the course and create a new file called hello_world.py with the following code:\n\n# This is a comment in Python\nprint(\"Hello, World!\")\n\nHello, World!\n\n\n. . .\nRun it with the green ‘run’ button or by pressing F5!\n. . .\n\n\n\n\n\n\nNote\n\n\n\n“Hello world” is a classic example to start with. Often used as a test to check if your computer is working properly and that you have installed the necessary software.",
    "crumbs": [
      "01 Optimal Stopping",
      "Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_00_introduction.html#section",
    "href": "lectures/lec_00_introduction.html#section",
    "title": "Introduction - Programming",
    "section": "",
    "text": "Any questions\nso far?",
    "crumbs": [
      "01 Optimal Stopping",
      "Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_00_introduction.html#the-end",
    "href": "lectures/lec_00_introduction.html#the-end",
    "title": "Introduction - Programming",
    "section": "The End",
    "text": "The End\n\n\n\n\n\n\nNote\n\n\n\nThat’s it for our introduction!\nLet’s have a short break and then continue with our first topic.",
    "crumbs": [
      "01 Optimal Stopping",
      "Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_00_introduction.html#interesting-literature-to-start",
    "href": "lectures/lec_00_introduction.html#interesting-literature-to-start",
    "title": "Introduction - Programming",
    "section": "Interesting literature to start",
    "text": "Interesting literature to start\n\nChristian, B., & Griffiths, T. (2016). Algorithms to live by: the computer science of human decisions. First international edition. New York, Henry Holt and Company.2\nFerguson, T.S. (1989) ‘Who solved the secretary problem?’, Statistical Science, 4(3). doi:10.1214/ss/1177012493.",
    "crumbs": [
      "01 Optimal Stopping",
      "Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_00_introduction.html#books-on-programming",
    "href": "lectures/lec_00_introduction.html#books-on-programming",
    "title": "Introduction - Programming",
    "section": "Books on Programming",
    "text": "Books on Programming\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Here\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nThink Python is a great book to start with. It’s available online for free. Schrödinger Programmiert Python is a great alternative for German students, as it is a very playful introduction to programming with lots of examples.",
    "crumbs": [
      "01 Optimal Stopping",
      "Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_00_introduction.html#more-literature",
    "href": "lectures/lec_00_introduction.html#more-literature",
    "title": "Introduction - Programming",
    "section": "More Literature",
    "text": "More Literature\nFor more interesting literature, take a look at the literature list of this course.",
    "crumbs": [
      "01 Optimal Stopping",
      "Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_00_introduction.html#footnotes",
    "href": "lectures/lec_00_introduction.html#footnotes",
    "title": "Introduction - Programming",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nChristian, B., & Griffiths, T. (2016). Algorithms to live by: the computer science of human decisions. First international edition. New York, Henry Holt and Company.↩︎\nThe main inspiration for this lecture. Nils and I have read it and discussed it in depth, always wanting to translate it into a course.↩︎",
    "crumbs": [
      "01 Optimal Stopping",
      "Introduction"
    ]
  },
  {
    "objectID": "lectures/lec_00_presentation.html#teaching-team",
    "href": "lectures/lec_00_presentation.html#teaching-team",
    "title": "Introduction - Programming",
    "section": "Teaching Team",
    "text": "Teaching Team\n\n\n\n\n\n\nDr. Tobias Vlcek\n\n\n\n\n\n\n\nDr. Nils Roemer"
  },
  {
    "objectID": "lectures/lec_00_presentation.html#about-me",
    "href": "lectures/lec_00_presentation.html#about-me",
    "title": "Introduction - Programming",
    "section": "About me",
    "text": "About me\n\nField: Optimizing and simulating complex systems\nLanguages: of choice: Julia, Python and Rust\nInterest: Modelling, Simulations, Machine Learning\nTeaching: OR, Algorithms, and Programming\nContact: vlcek@beyondsimulations.com\n\n\n\n\n\n\n\n\nTip\n\n\nWe really appreciate active participation and interaction!"
  },
  {
    "objectID": "lectures/lec_00_presentation.html#course-outline",
    "href": "lectures/lec_00_presentation.html#course-outline",
    "title": "Introduction - Programming",
    "section": "Course Outline",
    "text": "Course Outline\n\nI: Optimal Stopping\nII: Explore & Exploit\nIII: Caching\nIV: Scheduling\nV: Randomness\nVI: Computational Kindness"
  },
  {
    "objectID": "lectures/lec_00_presentation.html#participation",
    "href": "lectures/lec_00_presentation.html#participation",
    "title": "Introduction - Programming",
    "section": "Participation",
    "text": "Participation\n\nTry actively participating in this course\nYou will find it much (!) easier and more fun\nLecture based on the book Algorithms to live by1\nMaterial and slides are hosted online: beyondsimulations.github.io/Programming-Everyday-Decisions\n\nChristian, B., & Griffiths, T. (2016). Algorithms to live by: the computer science of human decisions. First international edition. New York, Henry Holt and Company."
  },
  {
    "objectID": "lectures/lec_00_presentation.html#teaching",
    "href": "lectures/lec_00_presentation.html#teaching",
    "title": "Introduction - Programming",
    "section": "Teaching",
    "text": "Teaching\n\nLecture: Presentation and discussion of algorithms related to everyday decision-making\nTutorial: Step-by-step assignments to be solved and discussed together in groups\nDifficulty: Strongly depends on your background and programming experience\n\n\n\n\n\n\n\n\nTip\n\n\nNo worries, we will help you out if you have any questions!"
  },
  {
    "objectID": "lectures/lec_00_presentation.html#passing-the-course",
    "href": "lectures/lec_00_presentation.html#passing-the-course",
    "title": "Introduction - Programming",
    "section": "Passing the Course",
    "text": "Passing the Course\n\nPass/fail course without exams\n75% attendance required for passing the course\nHand in the assignments of at least two lectures\nShort presentation and discussion at the end\nYou work together in groups of three students"
  },
  {
    "objectID": "lectures/lec_00_presentation.html#handing-in-assignments",
    "href": "lectures/lec_00_presentation.html#handing-in-assignments",
    "title": "Introduction - Programming",
    "section": "Handing in Assignments",
    "text": "Handing in Assignments\n\nEach student group submits one solution\nProvide us all working notebooks of the lecture\nHand in is due at the beginning of the next lecture\nAt least 50 % have to be correct to pass\nYou have to pass at least twice\n\n\n\n\n\n\n\n\nTip\n\n\nThis is just in order to provide you with working solutions after each deadline."
  },
  {
    "objectID": "lectures/lec_00_presentation.html#learning-python",
    "href": "lectures/lec_00_presentation.html#learning-python",
    "title": "Introduction - Programming",
    "section": "Learning Python",
    "text": "Learning Python\nWe will mostly not cover Python during the lectures!\n\nQuestion: Anybody know why?\n\n\n\nIn our experience, the best way to learn is by doing!\nHere, we will focus on decision-making algorithms\nYou will learn Python by doing the tutorials\n\n\n\n\n\n\n\n\n\nTip\n\n\nDon’t worry, we will help you out if you have any questions!"
  },
  {
    "objectID": "lectures/lec_00_presentation.html#difficulty-of-the-course",
    "href": "lectures/lec_00_presentation.html#difficulty-of-the-course",
    "title": "Introduction - Programming",
    "section": "Difficulty of the Course",
    "text": "Difficulty of the Course\n\nAt first it might be a little bit overwhelming\nProgramming is similar to learning a new language\nFirst, you have to get used to it and learn words\nLater, you’ll be able to apply it and see results\nImportant: Practice, practice, practice!"
  },
  {
    "objectID": "lectures/lec_00_presentation.html#goals-of-the-course",
    "href": "lectures/lec_00_presentation.html#goals-of-the-course",
    "title": "Introduction - Programming",
    "section": "Goals of the Course",
    "text": "Goals of the Course\n\nLearn the basics of programming\nLearn about algorithmic thinking\nBe able to apply methods and concepts\nSolve practical problems with algorithms\n\n\n\n\n\n\n\nTip\n\n\nWe are convinced that this course will be quite interesting and teach you more for your daily life than most other courses!"
  },
  {
    "objectID": "lectures/lec_00_presentation.html#why-python",
    "href": "lectures/lec_00_presentation.html#why-python",
    "title": "Introduction - Programming",
    "section": "Why Python?",
    "text": "Why Python?\n\nOrigins: Conceived in late 1980s as a teaching and scripting language\nSimple Syntax: Python’s syntax is mostly straightforward and very easy to learn\nVersatility: Used in web development, data analysis, artificial intelligence, and more\nCommunity Support: A large community of users worldwide and extensive documentation"
  },
  {
    "objectID": "lectures/lec_00_presentation.html#help-from-ai",
    "href": "lectures/lec_00_presentation.html#help-from-ai",
    "title": "Introduction - Programming",
    "section": "Help from AI",
    "text": "Help from AI\n\nYou are allowed to use AI in the course, we use it as well (e.g., Claude, ChatGPT, LLama3 …)\nThese tools are great for learning Python!\nCan help you a lot to get started with programming\n\n\n\n\n\n\n\n\nWarning\n\n\nBut you should not simply use them to replace your learning."
  },
  {
    "objectID": "lectures/lec_00_presentation.html#our-recommendation",
    "href": "lectures/lec_00_presentation.html#our-recommendation",
    "title": "Introduction - Programming",
    "section": "Our Recommendation",
    "text": "Our Recommendation\n\nBe present: Attend the lecture and solve the tutorials\nPut in some work: Repeat code and try to understand it\nDo coding: Run code, play around, modify, and solve\n\n\n\n\n\n\n\n\nTip\n\n\nGreat resources to start are books and small challenges. You can find a list of book recommendations at the end of the lecture. Small challenges to solve can for example be found on Codewars."
  },
  {
    "objectID": "lectures/lec_00_presentation.html#dont-give-up",
    "href": "lectures/lec_00_presentation.html#dont-give-up",
    "title": "Introduction - Programming",
    "section": "Don’t give up!",
    "text": "Don’t give up!\n\nProgramming is problem solving, don’t get frustrated!\nExpect to stretch your comfort zone"
  },
  {
    "objectID": "lectures/lec_00_presentation.html#the-setup",
    "href": "lectures/lec_00_presentation.html#the-setup",
    "title": "Introduction - Programming",
    "section": "The Setup",
    "text": "The Setup\n\nWe will use Jupyter Notebooks for the tutorials\nAllow to combine code and text in one document\nWe will use Visual Studio Code as an IDE\n\n\n\n\n\n\n\n\nTip\n\n\nIDE = Integrated Development Environment"
  },
  {
    "objectID": "lectures/lec_00_presentation.html#installing-python-with-uv",
    "href": "lectures/lec_00_presentation.html#installing-python-with-uv",
    "title": "Introduction - Programming",
    "section": "Installing Python with uv",
    "text": "Installing Python with uv\n\nWe will use uv to install and manage Python versions\nIt works on Windows, Mac and Linux\nIt helps us to manage packages and virtual environments\nNow, we all go here and install uv and Python\n\n\n\n\n\n\n\n\nTip\n\n\nIf the installation does not work, let us know!"
  },
  {
    "objectID": "lectures/lec_00_presentation.html#install-vs-code",
    "href": "lectures/lec_00_presentation.html#install-vs-code",
    "title": "Introduction - Programming",
    "section": "Install VS Code",
    "text": "Install VS Code\n\nDownload and install from the website\nBuilt for Windows, Linux and Mac\nInstall the Python and Jupyter extension\nNow you are ready to go!\n\n\n\n\n\n\n\n\nTip\n\n\nUnsure on how to work with VS Code and notebooks? Take a look at the tutorial from VS Code and/or ask us! We are happy to help you out!"
  },
  {
    "objectID": "lectures/lec_00_presentation.html#python-on-ipads",
    "href": "lectures/lec_00_presentation.html#python-on-ipads",
    "title": "Introduction - Programming",
    "section": "Python on iPads",
    "text": "Python on iPads\n\nYou can run Python scripts on your iPad\nBut it is not recommended for the course\nHowever, you could use Juno if you want to\nIt works locally on your iPad and can run notebooks\n\n\n\n\n\n\n\n\nCaution\n\n\nNot all packages available in Python are available here, thus you might need a computer to solve certain problems. For our course, this should not be a problem."
  },
  {
    "objectID": "lectures/lec_00_presentation.html#hello-world",
    "href": "lectures/lec_00_presentation.html#hello-world",
    "title": "Introduction - Programming",
    "section": "Hello, World!",
    "text": "Hello, World!\nTask: Create a directory for the course and create a new file called hello_world.py with the following code:\n\n# This is a comment in Python\nprint(\"Hello, World!\")\n\n\n\nHello, World!\n\n\n\nRun it with the green ‘run’ button or by pressing F5!\n\n\n\n\n\n\n\n\nNote\n\n\n“Hello world” is a classic example to start with. Often used as a test to check if your computer is working properly and that you have installed the necessary software."
  },
  {
    "objectID": "lectures/lec_00_presentation.html#section",
    "href": "lectures/lec_00_presentation.html#section",
    "title": "Introduction - Programming",
    "section": "",
    "text": "Any questions\nso far?"
  },
  {
    "objectID": "lectures/lec_00_presentation.html#the-end",
    "href": "lectures/lec_00_presentation.html#the-end",
    "title": "Introduction - Programming",
    "section": "The End",
    "text": "The End\n\n\n\n\n\n\nNote\n\n\nThat’s it for our introduction!\nLet’s have a short break and then continue with our first topic."
  },
  {
    "objectID": "lectures/lec_00_presentation.html#interesting-literature-to-start",
    "href": "lectures/lec_00_presentation.html#interesting-literature-to-start",
    "title": "Introduction - Programming",
    "section": "Interesting literature to start",
    "text": "Interesting literature to start\n\nChristian, B., & Griffiths, T. (2016). Algorithms to live by: the computer science of human decisions. First international edition. New York, Henry Holt and Company.1\nFerguson, T.S. (1989) ‘Who solved the secretary problem?’, Statistical Science, 4(3). doi:10.1214/ss/1177012493.\n\nThe main inspiration for this lecture. Nils and I have read it and discussed it in depth, always wanting to translate it into a course."
  },
  {
    "objectID": "lectures/lec_00_presentation.html#books-on-programming",
    "href": "lectures/lec_00_presentation.html#books-on-programming",
    "title": "Introduction - Programming",
    "section": "Books on Programming",
    "text": "Books on Programming\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Here\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n\n\n\n\n\n\n\nNote\n\n\nThink Python is a great book to start with. It’s available online for free. Schrödinger Programmiert Python is a great alternative for German students, as it is a very playful introduction to programming with lots of examples."
  },
  {
    "objectID": "lectures/lec_00_presentation.html#more-literature",
    "href": "lectures/lec_00_presentation.html#more-literature",
    "title": "Introduction - Programming",
    "section": "More Literature",
    "text": "More Literature\nFor more interesting literature, take a look at the literature list of this course."
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html",
    "href": "lectures/lec_02_explore_exploit.html",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "",
    "text": "Question: What does “explore” mean?\n\nExplore is the gathering of new information.\n\nQuestion: What does “exploit” mean?\n\nExploit is the utilization of already known information to obtain a known result.\n\nQuestion: what is the relationship between both?\n\nExplore and exploit are opposing alternatives.\n\n\n\n\n\n\n\n\nClinical trials:\n\nExplore: Test new drugs.\nExploit: Use existing drugs.\n\nA/B testing:\n\nExplore: Test new website designs.\nExploit: Use existing website designs.\n\n\n\n\n\n\n\n\nDating:\n\nExplore: Go on a date with someone new.\nExploit: Go on a date with someone you already know.\n\nSocial interactions:\n\nExplore: Meet new people.\nExploit: Spend time with known people.\n\n\n\n\n\n\n\n\nExplore: Do we try new things?\nExploit: Do we stick to our favorite ones?\nLife is a trade-off, a balance:\n\nbetween novelty and tradition.\nbetween the latest and the greatest.\nbetween explore and exploit.\n\nQuestion: What is the optimal balance?\nScientists have been working on this for over 50 years.\n\n\n\n\n\n\n\n\n\nExploitation is not always the best strategy.\nEspecially when you have very limited information.\nWhen you stop exploring, you might miss better options.\nImagine you are not able to gather new information and could only choose known alternatives.\n\n\n\n\n\n\n\n\n\n\nExploration is not always the best strategy.\nEspecially when you are limited in using new information.\nWhen you constantly explore, you might never enjoy the fruits of your exploration.\nImagine you could only eat each meal only once, hear each song only once, talk to each person only once…",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#some-definitions",
    "href": "lectures/lec_02_explore_exploit.html#some-definitions",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "",
    "text": "Question: What does “explore” mean?\n\nExplore is the gathering of new information.\n\nQuestion: What does “exploit” mean?\n\nExploit is the utilization of already known information to obtain a known result.\n\nQuestion: what is the relationship between both?\n\nExplore and exploit are opposing alternatives.",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#some-examples-i",
    "href": "lectures/lec_02_explore_exploit.html#some-examples-i",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "",
    "text": "Clinical trials:\n\nExplore: Test new drugs.\nExploit: Use existing drugs.\n\nA/B testing:\n\nExplore: Test new website designs.\nExploit: Use existing website designs.",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#some-examples-ii",
    "href": "lectures/lec_02_explore_exploit.html#some-examples-ii",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "",
    "text": "Dating:\n\nExplore: Go on a date with someone new.\nExploit: Go on a date with someone you already know.\n\nSocial interactions:\n\nExplore: Meet new people.\nExploit: Spend time with known people.",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#everyday-decision-making",
    "href": "lectures/lec_02_explore_exploit.html#everyday-decision-making",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "",
    "text": "Explore: Do we try new things?\nExploit: Do we stick to our favorite ones?\nLife is a trade-off, a balance:\n\nbetween novelty and tradition.\nbetween the latest and the greatest.\nbetween explore and exploit.\n\nQuestion: What is the optimal balance?\nScientists have been working on this for over 50 years.",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#the-problem-with-exploitation",
    "href": "lectures/lec_02_explore_exploit.html#the-problem-with-exploitation",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "",
    "text": "Exploitation is not always the best strategy.\nEspecially when you have very limited information.\nWhen you stop exploring, you might miss better options.\nImagine you are not able to gather new information and could only choose known alternatives.",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#the-problem-with-exploration",
    "href": "lectures/lec_02_explore_exploit.html#the-problem-with-exploration",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "",
    "text": "Exploration is not always the best strategy.\nEspecially when you are limited in using new information.\nWhen you constantly explore, you might never enjoy the fruits of your exploration.\nImagine you could only eat each meal only once, hear each song only once, talk to each person only once…",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#decision-support",
    "href": "lectures/lec_02_explore_exploit.html#decision-support",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Decision Support",
    "text": "Decision Support\n\n\nTo provide support, computer scientists formulated the explore-exploit trade-off.\nIt is known as the multi-armed bandit problem.\nQuestion: What is a one-armed bandit?",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#one-armed-bandit",
    "href": "lectures/lec_02_explore_exploit.html#one-armed-bandit",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "One Armed Bandit",
    "text": "One Armed Bandit\n\nPhoto by Kabir M on Unsplash",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#the-multi-armed-bandit-problem-i",
    "href": "lectures/lec_02_explore_exploit.html#the-multi-armed-bandit-problem-i",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "The multi-armed bandit problem I",
    "text": "The multi-armed bandit problem I\n\n\nA gambler is faced with a room of slot machines (one-armed bandits).\nEach slot machine has a different probability of winning.\nQuestion: What does the scenario have to do with explore vs exploit?",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#the-multi-armed-bandit-problem-ii",
    "href": "lectures/lec_02_explore_exploit.html#the-multi-armed-bandit-problem-ii",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "The multi-armed bandit problem II",
    "text": "The multi-armed bandit problem II\n\n\nBy playing a slot machine, the gambler can gather information about the probability of winning.\nBut each pull of a lever comes with a certain cost.\nIt’s the aim of the gambler to maximize his winnings.",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#the-multi-armed-bandit-problem-iii",
    "href": "lectures/lec_02_explore_exploit.html#the-multi-armed-bandit-problem-iii",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "The multi-armed bandit problem III",
    "text": "The multi-armed bandit problem III\n\n\nConsider the following scenario:\n\nYou already pulled the lever of two machines.\nMachine A: 15 pulls, 9 wins.\nMachine B: 2 pulls, 1 win.\n\nQuestion: Which machine should you play next?",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#expected-value-as-a-decision-criterion",
    "href": "lectures/lec_02_explore_exploit.html#expected-value-as-a-decision-criterion",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Expected value as a decision criterion",
    "text": "Expected value as a decision criterion\n\n\nThe expected value of a slot machine is the average number of wins per pull.\nExpected value of machine A = E(A) = 9/15 = 0.6\nExpected value of machine B = E(B) = 1/2 = 0.5\nMachine A has the higher expected value.\nBut 2 and even 15 pulls are not a large number (considering standard deviation).",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#the-multi-armed-bandit-problem-iv",
    "href": "lectures/lec_02_explore_exploit.html#the-multi-armed-bandit-problem-iv",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "The multi-armed bandit problem IV",
    "text": "The multi-armed bandit problem IV\n\n\nThe multi-armed bandit problem represents a lot of different real-world decisions.\nIt shows us, that there might be a difference between the optimal long-term average performance and the optimal immediate performance.\nWhich lever to pull next depends completely on something we haven’t discussed yet:",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#the-multi-armed-bandit-problem-v",
    "href": "lectures/lec_02_explore_exploit.html#the-multi-armed-bandit-problem-v",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "The multi-armed bandit problem V",
    "text": "The multi-armed bandit problem V\n\n\nHow long you plan to be in the casino?\nQuestion: Why is this important?\nQuestion: How does this influence our decision on taking machine A or machine B?\n\n\n. . .\n\n“I’m more likely to try a new restaurant when I move to a city than when I’m leaving it” (Chris Stucchio)",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#the-influence-of-the-interval",
    "href": "lectures/lec_02_explore_exploit.html#the-influence-of-the-interval",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "The influence of the interval",
    "text": "The influence of the interval\n\n\nLet’s call the time you plan to be in the casino “the interval”.\nThe longer the interval, the more (in general) you should explore, since you will have more opportunities to exploit the gathered information.\nThe shorter the interval, the more you should exploit your current knowledge.\nThe optimal strategy depends on the length of the interval.",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#interval-and-exploration",
    "href": "lectures/lec_02_explore_exploit.html#interval-and-exploration",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Interval and Exploration",
    "text": "Interval and Exploration\n\nExplore when you have the time to use the resulting knowledge.\n\n. . .\n\n“I moved to Pune, India, and I just […] eat everywhere that didn’t look like it was gonna kill me” (Chris Stucchio)",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#interval-and-exploitation",
    "href": "lectures/lec_02_explore_exploit.html#interval-and-exploitation",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Interval and Exploitation",
    "text": "Interval and Exploitation\n\nExploit when you are ready to cash in.\n\n. . .\n\n“And as I was leaving the city I went back to all my old favorites, rather than trying out new stuff […]. Even if I find a slightly better place, I’m only going to go there once or twice, so why take the risk?” (Chris Stucchio)",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#exploration",
    "href": "lectures/lec_02_explore_exploit.html#exploration",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Exploration",
    "text": "Exploration\n\nPhoto by Colin Maynard on Unsplash",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#exploitation",
    "href": "lectures/lec_02_explore_exploit.html#exploitation",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Exploitation",
    "text": "Exploitation\n\nPhoto by Cristina Gottardi on Unsplash",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#reverse-engineering",
    "href": "lectures/lec_02_explore_exploit.html#reverse-engineering",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Reverse Engineering",
    "text": "Reverse Engineering\n\n\nDerivation of the interval by observing the strategy\nAmong the the ten highest-grossing movies, how many were sequels?\n\n1981: 2\n1991: 3\n2001: 5\n2011: 8\n\nQuestion: Do you have an explanation for the trend?",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#sequels",
    "href": "lectures/lec_02_explore_exploit.html#sequels",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Sequels…",
    "text": "Sequels…\n\nPhoto by Universal Pictures on Wikipedia",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#reverse-engineering-a-possible-explanation",
    "href": "lectures/lec_02_explore_exploit.html#reverse-engineering-a-possible-explanation",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Reverse Engineering: A possible explanation",
    "text": "Reverse Engineering: A possible explanation\n\n\nMaking a brand new movie is risky but has the potential to create a new fan base. (explore)\nFrom a Studio’s perspective, a sequel is a movie with a guaranteed fan base, a cash cow, a sure thing, an exploit.\nOne possible explanation for the numbers is that the studios think they are approaching the end of their interval.\nThey are pulling the arms of the best machines they’ve got before the casino turns them out.",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#the-multi-armed-bandit-problem-vi",
    "href": "lectures/lec_02_explore_exploit.html#the-multi-armed-bandit-problem-vi",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "The multi-armed bandit problem VI",
    "text": "The multi-armed bandit problem VI\n\n\nWhile the so far provided anecdotes are helping us to understand the explore-exploit trade-off, they are far away from beeing a satisfying “optimal” solution.\nActually, finding an algorithm that tells us exactly how to to handle the trade-off is a very hard problem.\nOn the way there were many interesting approaches…",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#win-stay-lose-shift1",
    "href": "lectures/lec_02_explore_exploit.html#win-stay-lose-shift1",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Win-Stay Lose-Shift1",
    "text": "Win-Stay Lose-Shift1\n\n\nQuestion: What do you think, what the win-stay lose-shift strategy does?\nThe win-stay lose-shift strategy is a simple strategy that is often used in multi-armed bandit problems.\nIt is based on the idea that if you have won, you should stay with the same machine.\nIf you have lost, you should switch to a different machine.\nThis strategy is not always the best strategy, but it is simple and proven better than choose an arm at random.",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#win-stay-is-a-no-brainer",
    "href": "lectures/lec_02_explore_exploit.html#win-stay-is-a-no-brainer",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Win-Stay is a no brainer",
    "text": "Win-Stay is a no brainer\n\n\nQuestion: What do you think about win-stay?\nIf you decide to pull an arm and you win, you should pull the same arm again.\nNothing changes, except the attractiveness of the arm you just pulled is higher.",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#lose-shift-is-another-story",
    "href": "lectures/lec_02_explore_exploit.html#lose-shift-is-another-story",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Lose-Shift is another story",
    "text": "Lose-Shift is another story\n\n\nQuestion: What do you think about lose-shift?\nChanging arms each time you lose might be a prety rush move.\nImagine you’re eating at your favorite restaurant for the tenth time in a row.\nYou have always been very satisfied (win), but today you are disappointed (loose).\nShould you turn your back on the restaurant?",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#like-most-of-the-time-easy-answers-comes-with-problems",
    "href": "lectures/lec_02_explore_exploit.html#like-most-of-the-time-easy-answers-comes-with-problems",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Like most of the time, easy answers comes with problems",
    "text": "Like most of the time, easy answers comes with problems\n\n\nThe win-stay lose-shift strategy penalizes losses too much.\nThe strategy does not take into account the interval.\nBut the strategy was good start to develop better approaches.",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#the-bellman-approach-i",
    "href": "lectures/lec_02_explore_exploit.html#the-bellman-approach-i",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "The Bellman approach I",
    "text": "The Bellman approach I\n\n\nFew years later, Richard Bellman, found an exact solution to the problem for all cases with finite and known intervals.\nBellman found that under the given assumptions, exploit vs explore can be formulated as an optimal stopping problem.\nWhere the question is, when to stop exploring and start exploiting.\nThe solution is based on dynamic programming and backward calculation starting from the final pull (analogous to the secretary problem with full information).",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#the-bellman-approach-ii",
    "href": "lectures/lec_02_explore_exploit.html#the-bellman-approach-ii",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "The Bellman approach II",
    "text": "The Bellman approach II\n\n\nBellman found that the following equation provides the optimal strategy (when the assumptions hold):\n\n\n\\[\\mathbb{E}[B] = \\frac{w + 1}{w + l + 2}\\]\n\n\nwhere w is the number of wins and l is the number of loses.",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#question-time",
    "href": "lectures/lec_02_explore_exploit.html#question-time",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Question time",
    "text": "Question time\n\n\n\\[\\mathbb{E}[B] = \\frac{w + 1}{w + l + 2}\\]\n\n\nQuestion: What is E[B]?\nQuestion: What is E[A]?\nQuestion: What machine shall we play according to the Bellman approach?",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#the-bellman-approach-iii",
    "href": "lectures/lec_02_explore_exploit.html#the-bellman-approach-iii",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "The Bellman approach III",
    "text": "The Bellman approach III\nThe following table shows the expected value for different win-lose scenarios.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLoses/Wins\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n\n1\n0.50\n0.60\n0.67\n0.71\n0.75\n0.78\n0.80\n0.82\n0.83\n0.85\n\n\n2\n0.40\n0.50\n0.57\n0.63\n0.67\n0.70\n0.73\n0.75\n0.77\n0.79\n\n\n3\n0.33\n0.43\n0.50\n0.56\n0.60\n0.64\n0.67\n0.69\n0.71\n0.73\n\n\n4\n0.29\n0.38\n0.44\n0.50\n0.55\n0.58\n0.62\n0.64\n0.67\n0.69\n\n\n5\n0.25\n0.33\n0.40\n0.45\n0.50\n0.54\n0.57\n0.60\n0.63\n0.65\n\n\n6\n0.22\n0.30\n0.36\n0.42\n0.46\n0.50\n0.53\n0.56\n0.59\n0.61\n\n\n7\n0.20\n0.27\n0.33\n0.38\n0.43\n0.47\n0.50\n0.53\n0.56\n0.58\n\n\n8\n0.18\n0.25\n0.31\n0.36\n0.40\n0.44\n0.47\n0.50\n0.53\n0.55\n\n\n9\n0.17\n0.23\n0.29\n0.33\n0.38\n0.41\n0.44\n0.47\n0.50\n0.52\n\n\n10\n0.15\n0.21\n0.27\n0.31\n0.35\n0.39\n0.42\n0.45\n0.48\n0.50",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#the-bellman-approach-iv",
    "href": "lectures/lec_02_explore_exploit.html#the-bellman-approach-iv",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "The Bellman approach IV",
    "text": "The Bellman approach IV\n\n\nThe calculation of the optimal strategy is very extensive when there are many arms and a long interval.\nAnd yet the approach does not help us in many scenarios because we do not know the exact length of the interval (time in the casino).\nAt this point, it looked like the multi-armed bandit problem would remain a problem without a solution.",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#the-gittins-index-i2",
    "href": "lectures/lec_02_explore_exploit.html#the-gittins-index-i2",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "The Gittins Index I2",
    "text": "The Gittins Index I2\n\n\nIn the 1970s Unilever asked a young mathematician, John Gittins, to help optimize their drug trials.\nGiven different compounds, what is the quickest way to determine which is likely to be effective?\nGittins found an optimal strategy and abstracted the problem to a general level.\nHe found the solution to the multi-armed bandit problem.",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#the-gittins-index-ii",
    "href": "lectures/lec_02_explore_exploit.html#the-gittins-index-ii",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "The Gittins Index II",
    "text": "The Gittins Index II\n\n\nA major problem with the multi-armed banded problem is that previous solutions made very critical assumptions about the underlying interval.\nFor example, that the length of the interval is known at the beginning of the analysis.\nGittins developed a charming solution to this problem. In his approach, future wins (e.g., cash flows) are discounted so that any interval length (including infinity) can be considered3.",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#reality-check-discounting-i",
    "href": "lectures/lec_02_explore_exploit.html#reality-check-discounting-i",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Reality check: Discounting I",
    "text": "Reality check: Discounting I\n\n\nDoes discounting future wins make sense?\nQuestion: Does discounting money wins make sense?\nRegarding monetary wins, it does. For example, due to interest rates and opportunity costs.",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#reality-check-discounting-ii",
    "href": "lectures/lec_02_explore_exploit.html#reality-check-discounting-ii",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Reality check: Discounting II",
    "text": "Reality check: Discounting II\n\n\nDoes discounting future wins make sense?\nQuestion: Does discounting non-monetary wins make sense?\nRegarding non-monetary wins, it is more difficult to justify.\nBut its not counterintuitive.\nWhat is more important to you today, tonight’s dinner, or ceteris paribus the dinner in a week’s time?",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#the-gittins-index-iii",
    "href": "lectures/lec_02_explore_exploit.html#the-gittins-index-iii",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "The Gittins Index III",
    "text": "The Gittins Index III\n\n\nThe Gittins index can be used for any problems of the form of the multi-armed bandit problem.\nThat means it solves the explore-exploit trade-off.\nLet’s consider our machine A and B example one last time.\n\nMachine A: 15 pulls, 9 wins, 6 loses.\nMachine B: 2 pulls, 1 win, 1 lose.",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#the-gittins-index-iv",
    "href": "lectures/lec_02_explore_exploit.html#the-gittins-index-iv",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "The Gittins Index IV",
    "text": "The Gittins Index IV\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLoses/Wins\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n\n0\n.7029\n.8001\n.8452\n.8723\n.8905\n.9039\n.9141\n.9221\n.9287\n.9342\n\n\n1\n.5001\n.6346\n.7072\n.7539\n.7869\n.8115\n.8307\n.8461\n.8588\n.8695\n\n\n2\n.3796\n.5163\n.6010\n.6579\n.6996\n.7318\n.7573\n.7782\n.7956\n.8103\n\n\n3\n.3021\n.4342\n.5184\n.5809\n.6276\n.6642\n.6940\n.7187\n.7396\n.7573\n\n\n4\n.2488\n.3720\n.4561\n.5179\n.5676\n.6071\n.6395\n.6666\n.6899\n.7101\n\n\n5\n.2103\n.3245\n.4058\n.4677\n.5168\n.5581\n.5923\n.6212\n.6461\n.6677\n\n\n6\n.1815\n.2871\n.3647\n.4257\n.4748\n.5156\n.5510\n.5811\n.6071\n.6300\n\n\n7\n.1591\n.2569\n.3308\n.3900\n.4387\n.4795\n.5144\n.5454\n.5723\n.5960\n\n\n8\n.1413\n.2323\n.3025\n.3595\n.4073\n.4479\n.4828\n.5134\n.5409\n.5652\n\n\n9\n.1269\n.2116\n.2784\n.3332\n.3799\n.4200\n.4548\n.4853\n.5125\n.5373",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#question-choose-machine-a-or-b-according-to-the-gittins-index",
    "href": "lectures/lec_02_explore_exploit.html#question-choose-machine-a-or-b-according-to-the-gittins-index",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Question: Choose machine A or B according to the Gittins index?",
    "text": "Question: Choose machine A or B according to the Gittins index?\n\n\nThe index for machine B (0.6346) is higher than for machine A (0.6300).\nThe index shows a clear win-stay pattern.\nThere is a relaxed lose-shift pattern.\nAt the (0,0) point we see the exploration bonus (premium).\nThe index converges to 1/2 for a 50/50 chance game.",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#the-gittins-index-v",
    "href": "lectures/lec_02_explore_exploit.html#the-gittins-index-v",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "The Gittins Index V",
    "text": "The Gittins Index V\n\n\nThe problem with the Gittins index is that it is very difficult to calculate.\nSee the following equation: \\[G_i(s_i, f_i) := \\sup_{\\tau \\geq 1} \\frac{\\mathbb{E}\\left[\\sum_{t=0}^{\\tau-1} \\beta^t \\cdot r_i^t \\middle| s_i, f_i\\right]}{\\mathbb{E}\\left[\\sum_{t=0}^{\\tau-1} \\beta^t\\right]}\\]\nWhere \\(G_i(s_i, f_i)\\) is the Gittins index for machine \\(i\\), \\(s_i\\) is the number of wins, \\(f_i\\) is the number of losses, \\(\\beta\\) is the discount factor, and \\(r_i^t\\) is the reward for machine \\(i\\) at time \\(t\\).",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#explore-vs-exploit-summary-1",
    "href": "lectures/lec_02_explore_exploit.html#explore-vs-exploit-summary-1",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Explore vs Exploit: Summary",
    "text": "Explore vs Exploit: Summary\n\n\nConsider an explore vs exploit decision situation.\nAs you learned exploiting comes with a known (expected) outcome for example E(A) = 0.6\nExploring comes with an unknown outcome E(B) = ?\nWhat should you do according to decision science?",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#explore-vs-exploit-anecdotally",
    "href": "lectures/lec_02_explore_exploit.html#explore-vs-exploit-anecdotally",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Explore vs Exploit: Anecdotally",
    "text": "Explore vs Exploit: Anecdotally\n\n\nIf you have a long interval, you should explore, choose B untill you are sure about E(B).\nIf you have a short interval, you should exploit, choose A.",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#explore-vs-exploit-mathematically",
    "href": "lectures/lec_02_explore_exploit.html#explore-vs-exploit-mathematically",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Explore vs Exploit: Mathematically",
    "text": "Explore vs Exploit: Mathematically\n\n\nIf E(A) and E(B) are known, choose higher expected value.\nIf E(B) is unknown, but you know the length of the interval, the Bellman-approach provides the optimal strategy.\nIf E(B) is unknown, and you do not know the length of the interval, the Gittins index provides the optimal strategy.",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#explore-vs-exploit-key-takeaways",
    "href": "lectures/lec_02_explore_exploit.html#explore-vs-exploit-key-takeaways",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Explore vs Exploit: Key Takeaways",
    "text": "Explore vs Exploit: Key Takeaways\n\n“The grass is always greener on the other side of the fence.”\n\n\n\nThe math tells us why:\nExploration in it self has a value, since trying new things increases our chance of finding the best.\nYour todays takeaway from the lecture should be: Be sensitive to how much time you have left in the casino and explore, explore, explore…",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#interesting-literature-to-start",
    "href": "lectures/lec_02_explore_exploit.html#interesting-literature-to-start",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Interesting literature to start",
    "text": "Interesting literature to start\n\nChristian, B., & Griffiths, T. (2016). Algorithms to live by: the computer science of human decisions. First international edition. New York, Henry Holt and Company.4\nFerguson, T.S. (1989) ‘Who solved the secretary problem?’, Statistical Science, 4(3). doi:10.1214/ss/1177012493.",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#books-on-programming",
    "href": "lectures/lec_02_explore_exploit.html#books-on-programming",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Books on Programming",
    "text": "Books on Programming\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Here\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nThink Python is a great book to start with. It’s available online for free. Schrödinger Programmiert Python is a great alternative for German students, as it is a very playful introduction to programming with lots of examples.",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#more-literature",
    "href": "lectures/lec_02_explore_exploit.html#more-literature",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "More Literature",
    "text": "More Literature\nFor more interesting literature, take a look at the literature list of this course.",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_explore_exploit.html#footnotes",
    "href": "lectures/lec_02_explore_exploit.html#footnotes",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nFor more details see Robbins, H. (1952) ‘Some aspects of the sequential design of experiments’, Bulletin of the American Mathematical Society, 58.↩︎\nGittins, J. (1979) ‘Bandit Processes and Dynamic Allocation Indices’, Journal of the Royal Statistical Society. Series B (Methodological).↩︎\nGittins makes a geometric discounting assumption, but the approach can be extended to other discounting assumptions.↩︎\nThe main inspiration for this lecture. Nils and I have read it and discussed it in depth, always wanting to translate it into a course.↩︎",
    "crumbs": [
      "02 Explore/Exploit",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_02_presentation.html#some-definitions",
    "href": "lectures/lec_02_presentation.html#some-definitions",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Some definitions…",
    "text": "Some definitions…\n\nQuestion: What does “explore” mean?\n\nExplore is the gathering of new information.\n\nQuestion: What does “exploit” mean?\n\nExploit is the utilization of already known information to obtain a known result.\n\nQuestion: what is the relationship between both?\n\nExplore and exploit are opposing alternatives."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#some-examples-i",
    "href": "lectures/lec_02_presentation.html#some-examples-i",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Some examples I",
    "text": "Some examples I\n\nClinical trials:\n\nExplore: Test new drugs.\nExploit: Use existing drugs.\n\nA/B testing:\n\nExplore: Test new website designs.\nExploit: Use existing website designs."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#some-examples-ii",
    "href": "lectures/lec_02_presentation.html#some-examples-ii",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Some examples II",
    "text": "Some examples II\n\nDating:\n\nExplore: Go on a date with someone new.\nExploit: Go on a date with someone you already know.\n\nSocial interactions:\n\nExplore: Meet new people.\nExploit: Spend time with known people."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#everyday-decision-making",
    "href": "lectures/lec_02_presentation.html#everyday-decision-making",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Everyday decision-making",
    "text": "Everyday decision-making\n\nExplore: Do we try new things?\nExploit: Do we stick to our favorite ones?\nLife is a trade-off, a balance:\n\nbetween novelty and tradition.\nbetween the latest and the greatest.\nbetween explore and exploit.\n\nQuestion: What is the optimal balance?\nScientists have been working on this for over 50 years."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#the-problem-with-exploitation",
    "href": "lectures/lec_02_presentation.html#the-problem-with-exploitation",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "The problem with exploitation",
    "text": "The problem with exploitation\nQuestion: Any ideas what it might be?\n\nExploitation is not always the best strategy.\nEspecially when you have very limited information.\nWhen you stop exploring, you might miss better options.\nImagine you are not able to gather new information and could only choose known alternatives."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#the-problem-with-exploration",
    "href": "lectures/lec_02_presentation.html#the-problem-with-exploration",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "The problem with exploration",
    "text": "The problem with exploration\nQuestion: Any ideas what it might be?\n\nExploration is not always the best strategy.\nEspecially when you are limited in using new information.\nWhen you constantly explore, you might never enjoy the fruits of your exploration.\nImagine you could only eat each meal only once, hear each song only once, talk to each person only once…"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#decision-support",
    "href": "lectures/lec_02_presentation.html#decision-support",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Decision Support",
    "text": "Decision Support\n\nTo provide support, computer scientists formulated the explore-exploit trade-off.\nIt is known as the multi-armed bandit problem.\nQuestion: What is a one-armed bandit?"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#one-armed-bandit",
    "href": "lectures/lec_02_presentation.html#one-armed-bandit",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "One Armed Bandit",
    "text": "One Armed Bandit\n\nPhoto by Kabir M on Unsplash"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#the-multi-armed-bandit-problem-i",
    "href": "lectures/lec_02_presentation.html#the-multi-armed-bandit-problem-i",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "The multi-armed bandit problem I",
    "text": "The multi-armed bandit problem I\n\nA gambler is faced with a room of slot machines (one-armed bandits).\nEach slot machine has a different probability of winning.\nQuestion: What does the scenario have to do with explore vs exploit?"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#the-multi-armed-bandit-problem-ii",
    "href": "lectures/lec_02_presentation.html#the-multi-armed-bandit-problem-ii",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "The multi-armed bandit problem II",
    "text": "The multi-armed bandit problem II\n\nBy playing a slot machine, the gambler can gather information about the probability of winning.\nBut each pull of a lever comes with a certain cost.\nIt’s the aim of the gambler to maximize his winnings."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#the-multi-armed-bandit-problem-iii",
    "href": "lectures/lec_02_presentation.html#the-multi-armed-bandit-problem-iii",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "The multi-armed bandit problem III",
    "text": "The multi-armed bandit problem III\n\nConsider the following scenario:\n\nYou already pulled the lever of two machines.\nMachine A: 15 pulls, 9 wins.\nMachine B: 2 pulls, 1 win.\n\nQuestion: Which machine should you play next?"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#expected-value-as-a-decision-criterion",
    "href": "lectures/lec_02_presentation.html#expected-value-as-a-decision-criterion",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Expected value as a decision criterion",
    "text": "Expected value as a decision criterion\n\nThe expected value of a slot machine is the average number of wins per pull.\nExpected value of machine A = E(A) = 9/15 = 0.6\nExpected value of machine B = E(B) = 1/2 = 0.5\nMachine A has the higher expected value.\nBut 2 and even 15 pulls are not a large number (considering standard deviation)."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#the-multi-armed-bandit-problem-iv",
    "href": "lectures/lec_02_presentation.html#the-multi-armed-bandit-problem-iv",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "The multi-armed bandit problem IV",
    "text": "The multi-armed bandit problem IV\n\nThe multi-armed bandit problem represents a lot of different real-world decisions.\nIt shows us, that there might be a difference between the optimal long-term average performance and the optimal immediate performance.\nWhich lever to pull next depends completely on something we haven’t discussed yet:"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#the-multi-armed-bandit-problem-v",
    "href": "lectures/lec_02_presentation.html#the-multi-armed-bandit-problem-v",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "The multi-armed bandit problem V",
    "text": "The multi-armed bandit problem V\n\nHow long you plan to be in the casino?\nQuestion: Why is this important?\nQuestion: How does this influence our decision on taking machine A or machine B?\n\n\n\n“I’m more likely to try a new restaurant when I move to a city than when I’m leaving it” (Chris Stucchio)"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#the-influence-of-the-interval",
    "href": "lectures/lec_02_presentation.html#the-influence-of-the-interval",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "The influence of the interval",
    "text": "The influence of the interval\n\nLet’s call the time you plan to be in the casino “the interval”.\nThe longer the interval, the more (in general) you should explore, since you will have more opportunities to exploit the gathered information.\nThe shorter the interval, the more you should exploit your current knowledge.\nThe optimal strategy depends on the length of the interval."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#interval-and-exploration",
    "href": "lectures/lec_02_presentation.html#interval-and-exploration",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Interval and Exploration",
    "text": "Interval and Exploration\n\nExplore when you have the time to use the resulting knowledge.\n\n\n\n“I moved to Pune, India, and I just […] eat everywhere that didn’t look like it was gonna kill me” (Chris Stucchio)"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#interval-and-exploitation",
    "href": "lectures/lec_02_presentation.html#interval-and-exploitation",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Interval and Exploitation",
    "text": "Interval and Exploitation\n\nExploit when you are ready to cash in.\n\n\n\n“And as I was leaving the city I went back to all my old favorites, rather than trying out new stuff […]. Even if I find a slightly better place, I’m only going to go there once or twice, so why take the risk?” (Chris Stucchio)"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#exploration",
    "href": "lectures/lec_02_presentation.html#exploration",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Exploration",
    "text": "Exploration\n\nPhoto by Colin Maynard on Unsplash"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#exploitation",
    "href": "lectures/lec_02_presentation.html#exploitation",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Exploitation",
    "text": "Exploitation\n\nPhoto by Cristina Gottardi on Unsplash"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#reverse-engineering",
    "href": "lectures/lec_02_presentation.html#reverse-engineering",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Reverse Engineering",
    "text": "Reverse Engineering\n\nDerivation of the interval by observing the strategy\nAmong the the ten highest-grossing movies, how many were sequels?\n\n1981: 2\n1991: 3\n2001: 5\n2011: 8\n\nQuestion: Do you have an explanation for the trend?"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#sequels",
    "href": "lectures/lec_02_presentation.html#sequels",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Sequels…",
    "text": "Sequels…\n\nPhoto by Universal Pictures on Wikipedia"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#reverse-engineering-a-possible-explanation",
    "href": "lectures/lec_02_presentation.html#reverse-engineering-a-possible-explanation",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Reverse Engineering: A possible explanation",
    "text": "Reverse Engineering: A possible explanation\n\nMaking a brand new movie is risky but has the potential to create a new fan base. (explore)\nFrom a Studio’s perspective, a sequel is a movie with a guaranteed fan base, a cash cow, a sure thing, an exploit.\nOne possible explanation for the numbers is that the studios think they are approaching the end of their interval.\nThey are pulling the arms of the best machines they’ve got before the casino turns them out."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#the-multi-armed-bandit-problem-vi",
    "href": "lectures/lec_02_presentation.html#the-multi-armed-bandit-problem-vi",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "The multi-armed bandit problem VI",
    "text": "The multi-armed bandit problem VI\n\nWhile the so far provided anecdotes are helping us to understand the explore-exploit trade-off, they are far away from beeing a satisfying “optimal” solution.\nActually, finding an algorithm that tells us exactly how to to handle the trade-off is a very hard problem.\nOn the way there were many interesting approaches…"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#win-stay-lose-shift1",
    "href": "lectures/lec_02_presentation.html#win-stay-lose-shift1",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Win-Stay Lose-Shift1",
    "text": "Win-Stay Lose-Shift1\n\nQuestion: What do you think, what the win-stay lose-shift strategy does?\nThe win-stay lose-shift strategy is a simple strategy that is often used in multi-armed bandit problems.\nIt is based on the idea that if you have won, you should stay with the same machine.\nIf you have lost, you should switch to a different machine.\nThis strategy is not always the best strategy, but it is simple and proven better than choose an arm at random.\n\nFor more details see Robbins, H. (1952) ‘Some aspects of the sequential design of experiments’, Bulletin of the American Mathematical Society, 58."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#win-stay-is-a-no-brainer",
    "href": "lectures/lec_02_presentation.html#win-stay-is-a-no-brainer",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Win-Stay is a no brainer",
    "text": "Win-Stay is a no brainer\n\nQuestion: What do you think about win-stay?\nIf you decide to pull an arm and you win, you should pull the same arm again.\nNothing changes, except the attractiveness of the arm you just pulled is higher."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#lose-shift-is-another-story",
    "href": "lectures/lec_02_presentation.html#lose-shift-is-another-story",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Lose-Shift is another story",
    "text": "Lose-Shift is another story\n\nQuestion: What do you think about lose-shift?\nChanging arms each time you lose might be a prety rush move.\nImagine you’re eating at your favorite restaurant for the tenth time in a row.\nYou have always been very satisfied (win), but today you are disappointed (loose).\nShould you turn your back on the restaurant?"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#like-most-of-the-time-easy-answers-comes-with-problems",
    "href": "lectures/lec_02_presentation.html#like-most-of-the-time-easy-answers-comes-with-problems",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Like most of the time, easy answers comes with problems",
    "text": "Like most of the time, easy answers comes with problems\n\nThe win-stay lose-shift strategy penalizes losses too much.\nThe strategy does not take into account the interval.\nBut the strategy was good start to develop better approaches."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#the-bellman-approach-i",
    "href": "lectures/lec_02_presentation.html#the-bellman-approach-i",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "The Bellman approach I",
    "text": "The Bellman approach I\n\nFew years later, Richard Bellman, found an exact solution to the problem for all cases with finite and known intervals.\nBellman found that under the given assumptions, exploit vs explore can be formulated as an optimal stopping problem.\nWhere the question is, when to stop exploring and start exploiting.\nThe solution is based on dynamic programming and backward calculation starting from the final pull (analogous to the secretary problem with full information)."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#the-bellman-approach-ii",
    "href": "lectures/lec_02_presentation.html#the-bellman-approach-ii",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "The Bellman approach II",
    "text": "The Bellman approach II\n\nBellman found that the following equation provides the optimal strategy (when the assumptions hold):\n\n\n\\[\\mathbb{E}[B] = \\frac{w + 1}{w + l + 2}\\]\n\n\nwhere w is the number of wins and l is the number of loses."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#question-time",
    "href": "lectures/lec_02_presentation.html#question-time",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Question time",
    "text": "Question time\n\n\\[\\mathbb{E}[B] = \\frac{w + 1}{w + l + 2}\\]\n\n\nQuestion: What is E[B]?\nQuestion: What is E[A]?\nQuestion: What machine shall we play according to the Bellman approach?"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#the-bellman-approach-iii",
    "href": "lectures/lec_02_presentation.html#the-bellman-approach-iii",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "The Bellman approach III",
    "text": "The Bellman approach III\nThe following table shows the expected value for different win-lose scenarios.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLoses/Wins\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n\n1\n0.50\n0.60\n0.67\n0.71\n0.75\n0.78\n0.80\n0.82\n0.83\n0.85\n\n\n2\n0.40\n0.50\n0.57\n0.63\n0.67\n0.70\n0.73\n0.75\n0.77\n0.79\n\n\n3\n0.33\n0.43\n0.50\n0.56\n0.60\n0.64\n0.67\n0.69\n0.71\n0.73\n\n\n4\n0.29\n0.38\n0.44\n0.50\n0.55\n0.58\n0.62\n0.64\n0.67\n0.69\n\n\n5\n0.25\n0.33\n0.40\n0.45\n0.50\n0.54\n0.57\n0.60\n0.63\n0.65\n\n\n6\n0.22\n0.30\n0.36\n0.42\n0.46\n0.50\n0.53\n0.56\n0.59\n0.61\n\n\n7\n0.20\n0.27\n0.33\n0.38\n0.43\n0.47\n0.50\n0.53\n0.56\n0.58\n\n\n8\n0.18\n0.25\n0.31\n0.36\n0.40\n0.44\n0.47\n0.50\n0.53\n0.55\n\n\n9\n0.17\n0.23\n0.29\n0.33\n0.38\n0.41\n0.44\n0.47\n0.50\n0.52\n\n\n10\n0.15\n0.21\n0.27\n0.31\n0.35\n0.39\n0.42\n0.45\n0.48\n0.50"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#the-bellman-approach-iv",
    "href": "lectures/lec_02_presentation.html#the-bellman-approach-iv",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "The Bellman approach IV",
    "text": "The Bellman approach IV\n\nThe calculation of the optimal strategy is very extensive when there are many arms and a long interval.\nAnd yet the approach does not help us in many scenarios because we do not know the exact length of the interval (time in the casino).\nAt this point, it looked like the multi-armed bandit problem would remain a problem without a solution."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#the-gittins-index-i2",
    "href": "lectures/lec_02_presentation.html#the-gittins-index-i2",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "The Gittins Index I1",
    "text": "The Gittins Index I1\n\nIn the 1970s Unilever asked a young mathematician, John Gittins, to help optimize their drug trials.\nGiven different compounds, what is the quickest way to determine which is likely to be effective?\nGittins found an optimal strategy and abstracted the problem to a general level.\nHe found the solution to the multi-armed bandit problem.\n\nGittins, J. (1979) ‘Bandit Processes and Dynamic Allocation Indices’, Journal of the Royal Statistical Society. Series B (Methodological)."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#the-gittins-index-ii",
    "href": "lectures/lec_02_presentation.html#the-gittins-index-ii",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "The Gittins Index II",
    "text": "The Gittins Index II\n\nA major problem with the multi-armed banded problem is that previous solutions made very critical assumptions about the underlying interval.\nFor example, that the length of the interval is known at the beginning of the analysis.\nGittins developed a charming solution to this problem. In his approach, future wins (e.g., cash flows) are discounted so that any interval length (including infinity) can be considered1.\n\nGittins makes a geometric discounting assumption, but the approach can be extended to other discounting assumptions."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#reality-check-discounting-i",
    "href": "lectures/lec_02_presentation.html#reality-check-discounting-i",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Reality check: Discounting I",
    "text": "Reality check: Discounting I\n\nDoes discounting future wins make sense?\nQuestion: Does discounting money wins make sense?\nRegarding monetary wins, it does. For example, due to interest rates and opportunity costs."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#reality-check-discounting-ii",
    "href": "lectures/lec_02_presentation.html#reality-check-discounting-ii",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Reality check: Discounting II",
    "text": "Reality check: Discounting II\n\nDoes discounting future wins make sense?\nQuestion: Does discounting non-monetary wins make sense?\nRegarding non-monetary wins, it is more difficult to justify.\nBut its not counterintuitive.\nWhat is more important to you today, tonight’s dinner, or ceteris paribus the dinner in a week’s time?"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#the-gittins-index-iii",
    "href": "lectures/lec_02_presentation.html#the-gittins-index-iii",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "The Gittins Index III",
    "text": "The Gittins Index III\n\nThe Gittins index can be used for any problems of the form of the multi-armed bandit problem.\nThat means it solves the explore-exploit trade-off.\nLet’s consider our machine A and B example one last time.\n\nMachine A: 15 pulls, 9 wins, 6 loses.\nMachine B: 2 pulls, 1 win, 1 lose."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#the-gittins-index-iv",
    "href": "lectures/lec_02_presentation.html#the-gittins-index-iv",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "The Gittins Index IV",
    "text": "The Gittins Index IV\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLoses/Wins\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n\n0\n.7029\n.8001\n.8452\n.8723\n.8905\n.9039\n.9141\n.9221\n.9287\n.9342\n\n\n1\n.5001\n.6346\n.7072\n.7539\n.7869\n.8115\n.8307\n.8461\n.8588\n.8695\n\n\n2\n.3796\n.5163\n.6010\n.6579\n.6996\n.7318\n.7573\n.7782\n.7956\n.8103\n\n\n3\n.3021\n.4342\n.5184\n.5809\n.6276\n.6642\n.6940\n.7187\n.7396\n.7573\n\n\n4\n.2488\n.3720\n.4561\n.5179\n.5676\n.6071\n.6395\n.6666\n.6899\n.7101\n\n\n5\n.2103\n.3245\n.4058\n.4677\n.5168\n.5581\n.5923\n.6212\n.6461\n.6677\n\n\n6\n.1815\n.2871\n.3647\n.4257\n.4748\n.5156\n.5510\n.5811\n.6071\n.6300\n\n\n7\n.1591\n.2569\n.3308\n.3900\n.4387\n.4795\n.5144\n.5454\n.5723\n.5960\n\n\n8\n.1413\n.2323\n.3025\n.3595\n.4073\n.4479\n.4828\n.5134\n.5409\n.5652\n\n\n9\n.1269\n.2116\n.2784\n.3332\n.3799\n.4200\n.4548\n.4853\n.5125\n.5373"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#question-choose-machine-a-or-b-according-to-the-gittins-index",
    "href": "lectures/lec_02_presentation.html#question-choose-machine-a-or-b-according-to-the-gittins-index",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Question: Choose machine A or B according to the Gittins index?",
    "text": "Question: Choose machine A or B according to the Gittins index?\n\nThe index for machine B (0.6346) is higher than for machine A (0.6300).\nThe index shows a clear win-stay pattern.\nThere is a relaxed lose-shift pattern.\nAt the (0,0) point we see the exploration bonus (premium).\nThe index converges to 1/2 for a 50/50 chance game."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#the-gittins-index-v",
    "href": "lectures/lec_02_presentation.html#the-gittins-index-v",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "The Gittins Index V",
    "text": "The Gittins Index V\n\nThe problem with the Gittins index is that it is very difficult to calculate.\nSee the following equation: \\[G_i(s_i, f_i) := \\sup_{\\tau \\geq 1} \\frac{\\mathbb{E}\\left[\\sum_{t=0}^{\\tau-1} \\beta^t \\cdot r_i^t \\middle| s_i, f_i\\right]}{\\mathbb{E}\\left[\\sum_{t=0}^{\\tau-1} \\beta^t\\right]}\\]\nWhere \\(G_i(s_i, f_i)\\) is the Gittins index for machine \\(i\\), \\(s_i\\) is the number of wins, \\(f_i\\) is the number of losses, \\(\\beta\\) is the discount factor, and \\(r_i^t\\) is the reward for machine \\(i\\) at time \\(t\\)."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#explore-vs-exploit-summary-1",
    "href": "lectures/lec_02_presentation.html#explore-vs-exploit-summary-1",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Explore vs Exploit: Summary",
    "text": "Explore vs Exploit: Summary\n\nConsider an explore vs exploit decision situation.\nAs you learned exploiting comes with a known (expected) outcome for example E(A) = 0.6\nExploring comes with an unknown outcome E(B) = ?\nWhat should you do according to decision science?"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#explore-vs-exploit-anecdotally",
    "href": "lectures/lec_02_presentation.html#explore-vs-exploit-anecdotally",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Explore vs Exploit: Anecdotally",
    "text": "Explore vs Exploit: Anecdotally\n\nIf you have a long interval, you should explore, choose B untill you are sure about E(B).\nIf you have a short interval, you should exploit, choose A."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#explore-vs-exploit-mathematically",
    "href": "lectures/lec_02_presentation.html#explore-vs-exploit-mathematically",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Explore vs Exploit: Mathematically",
    "text": "Explore vs Exploit: Mathematically\n\nIf E(A) and E(B) are known, choose higher expected value.\nIf E(B) is unknown, but you know the length of the interval, the Bellman-approach provides the optimal strategy.\nIf E(B) is unknown, and you do not know the length of the interval, the Gittins index provides the optimal strategy."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#explore-vs-exploit-key-takeaways",
    "href": "lectures/lec_02_presentation.html#explore-vs-exploit-key-takeaways",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Explore vs Exploit: Key Takeaways",
    "text": "Explore vs Exploit: Key Takeaways\n\n“The grass is always greener on the other side of the fence.”\n\n\nThe math tells us why:\nExploration in it self has a value, since trying new things increases our chance of finding the best.\nYour todays takeaway from the lecture should be: Be sensitive to how much time you have left in the casino and explore, explore, explore…"
  },
  {
    "objectID": "lectures/lec_02_presentation.html#interesting-literature-to-start",
    "href": "lectures/lec_02_presentation.html#interesting-literature-to-start",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Interesting literature to start",
    "text": "Interesting literature to start\n\nChristian, B., & Griffiths, T. (2016). Algorithms to live by: the computer science of human decisions. First international edition. New York, Henry Holt and Company.1\nFerguson, T.S. (1989) ‘Who solved the secretary problem?’, Statistical Science, 4(3). doi:10.1214/ss/1177012493.\n\nThe main inspiration for this lecture. Nils and I have read it and discussed it in depth, always wanting to translate it into a course."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#books-on-programming",
    "href": "lectures/lec_02_presentation.html#books-on-programming",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "Books on Programming",
    "text": "Books on Programming\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Here\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n\n\n\n\n\n\n\nNote\n\n\nThink Python is a great book to start with. It’s available online for free. Schrödinger Programmiert Python is a great alternative for German students, as it is a very playful introduction to programming with lots of examples."
  },
  {
    "objectID": "lectures/lec_02_presentation.html#more-literature",
    "href": "lectures/lec_02_presentation.html#more-literature",
    "title": "Lecture II - Explore Vs. Exploit",
    "section": "More Literature",
    "text": "More Literature\nFor more interesting literature, take a look at the literature list of this course."
  },
  {
    "objectID": "lectures/lec_04_scheduling.html",
    "href": "lectures/lec_04_scheduling.html",
    "title": "Lecture IV - Scheduling",
    "section": "",
    "text": "Let’s solve this simple scheduling problem:\n. . .\nTask  Washing  Drying\n  A    40min   60min\n  B    30min   80min\n  C    60min   20min\n  D    50min   60min\n. . .\nGoal: Minimize total time for washing and drying all loads\n. . .\nQuestion: An idea how to solve this?\n\n\n\nRule: To find the optimal solution:\n\nFind the job with shortest duration:\n\nIf on Machine 1 → Schedule First\nIf on Machine 2 → Schedule Last\nIf equal → Choose randomly\n\nRemove job from list and repeat\n\n\n\n\nTask  Washing  Drying  Schedule\n  A    40min   60min\n  B    30min   80min\n  C    60min   20min\n  D    50min   60min\n. . .\nQuestion: What’s the first scheduled task?\n\n\n\nTask  Washing  Drying  Schedule\n  A    40min   60min\n  B    30min   80min\n  C    60min   20min        4\n  D    50min   60min\n\nIn Task C, the dryer is the shortest task.\nIt is on Machine 2 → Schedule Last\n\n. . .\nQuestion: What’s the next task?\n\n\n\nTask  Washing  Drying  Schedule\n  A    40min   60min\n  B    30min   80min        1\n  C    60min   20min        4\n  D    50min   60min\n\nIn Task B, the washing machine is the shortest task.\nIt is on Machine 1 → Schedule First\n\n. . .\nQuestion: What’s the next task?\n\n\n\nTask  Washing  Drying  Schedule\n  A    40min   60min        2\n  B    30min   80min        1\n  C    60min   20min        4\n  D    50min   60min\n\nIn Task A, the washing machine is the shortest task.\nIt is on Machine 1 → Schedule Second\n\n. . .\nNow, we only have one task left!\n\n\n\nTask  Washing  Drying  Schedule\n  A    40min   60min        2\n  B    30min   80min        1\n  C    60min   20min        4\n  D    50min   60min        3\n. . .\nFinal sequence: B A D C\n\n\n\nOptimal Solution: B A D C\n\n\nTotal time: 4 hours 20 minutes\n. . .\nQuestion: Is there a worse solution?\n\n\n\nSuboptimal Solution: C D A B\n\n\nTotal time: 5 hours 10 minutes\n. . .\nQuestion: What’s the difference?",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#washing-machine-dryer",
    "href": "lectures/lec_04_scheduling.html#washing-machine-dryer",
    "title": "Lecture IV - Scheduling",
    "section": "",
    "text": "Let’s solve this simple scheduling problem:\n. . .\nTask  Washing  Drying\n  A    40min   60min\n  B    30min   80min\n  C    60min   20min\n  D    50min   60min\n. . .\nGoal: Minimize total time for washing and drying all loads\n. . .\nQuestion: An idea how to solve this?",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#johnsons-rule",
    "href": "lectures/lec_04_scheduling.html#johnsons-rule",
    "title": "Lecture IV - Scheduling",
    "section": "",
    "text": "Rule: To find the optimal solution:\n\nFind the job with shortest duration:\n\nIf on Machine 1 → Schedule First\nIf on Machine 2 → Schedule Last\nIf equal → Choose randomly\n\nRemove job from list and repeat",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#applying-johnsons-rule",
    "href": "lectures/lec_04_scheduling.html#applying-johnsons-rule",
    "title": "Lecture IV - Scheduling",
    "section": "",
    "text": "Task  Washing  Drying  Schedule\n  A    40min   60min\n  B    30min   80min\n  C    60min   20min\n  D    50min   60min\n. . .\nQuestion: What’s the first scheduled task?",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#applying-johnsons-rule-1",
    "href": "lectures/lec_04_scheduling.html#applying-johnsons-rule-1",
    "title": "Lecture IV - Scheduling",
    "section": "",
    "text": "Task  Washing  Drying  Schedule\n  A    40min   60min\n  B    30min   80min\n  C    60min   20min        4\n  D    50min   60min\n\nIn Task C, the dryer is the shortest task.\nIt is on Machine 2 → Schedule Last\n\n. . .\nQuestion: What’s the next task?",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#applying-johnsons-rule-2",
    "href": "lectures/lec_04_scheduling.html#applying-johnsons-rule-2",
    "title": "Lecture IV - Scheduling",
    "section": "",
    "text": "Task  Washing  Drying  Schedule\n  A    40min   60min\n  B    30min   80min        1\n  C    60min   20min        4\n  D    50min   60min\n\nIn Task B, the washing machine is the shortest task.\nIt is on Machine 1 → Schedule First\n\n. . .\nQuestion: What’s the next task?",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#applying-johnsons-rule-3",
    "href": "lectures/lec_04_scheduling.html#applying-johnsons-rule-3",
    "title": "Lecture IV - Scheduling",
    "section": "",
    "text": "Task  Washing  Drying  Schedule\n  A    40min   60min        2\n  B    30min   80min        1\n  C    60min   20min        4\n  D    50min   60min\n\nIn Task A, the washing machine is the shortest task.\nIt is on Machine 1 → Schedule Second\n\n. . .\nNow, we only have one task left!",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#applying-johnsons-rule-4",
    "href": "lectures/lec_04_scheduling.html#applying-johnsons-rule-4",
    "title": "Lecture IV - Scheduling",
    "section": "",
    "text": "Task  Washing  Drying  Schedule\n  A    40min   60min        2\n  B    30min   80min        1\n  C    60min   20min        4\n  D    50min   60min        3\n. . .\nFinal sequence: B A D C",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#optimal-solution",
    "href": "lectures/lec_04_scheduling.html#optimal-solution",
    "title": "Lecture IV - Scheduling",
    "section": "",
    "text": "Optimal Solution: B A D C\n\n\nTotal time: 4 hours 20 minutes\n. . .\nQuestion: Is there a worse solution?",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#suboptimal-solution",
    "href": "lectures/lec_04_scheduling.html#suboptimal-solution",
    "title": "Lecture IV - Scheduling",
    "section": "",
    "text": "Suboptimal Solution: C D A B\n\n\nTotal time: 5 hours 10 minutes\n. . .\nQuestion: What’s the difference?",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#industrial-revolution",
    "href": "lectures/lec_04_scheduling.html#industrial-revolution",
    "title": "Lecture IV - Scheduling",
    "section": "Industrial Revolution",
    "text": "Industrial Revolution\n. . .\n\n\nFirst systematic visualization by Frederick Taylor\nHenry Gantt develops the Gantt Chart around 1910\nKey tool during Industrial Revolution\nBut no scheduling theory yet!\n\n\n. . .\n\nQuestion: Who knows what a Gantt Chart is?",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#modern-scheduling-theory",
    "href": "lectures/lec_04_scheduling.html#modern-scheduling-theory",
    "title": "Lecture IV - Scheduling",
    "section": "Modern Scheduling Theory",
    "text": "Modern Scheduling Theory\n. . .\n\n\nRAND Corporation founded (1948)\nSelmer Johnson publishes Johnson’s Rule in 1954\nBeginning of modern scheduling theory\nMany more algorithms and methods developed since",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#task-classification",
    "href": "lectures/lec_04_scheduling.html#task-classification",
    "title": "Lecture IV - Scheduling",
    "section": "Task Classification",
    "text": "Task Classification\nQuestion: What properties can scheduled tasks have?\n. . .\n\n\n\n\n\nmindmap\n  root((Task Properties))\n    Time-Related\n      Time windows\n      Deadlines\n      Start constraints\n      Deterministic durations\n      Variable durations\n      Stochastic durations\n    Relationship-Based\n      Predecessor relationships\n      Successor relationships\n      Dependencies\n      Priority levels\n      Resource constraints\n\n\n\n\n\n\n. . .\nQuestion: What types of tasks do you deal with most often?",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#single-machine-scheduling",
    "href": "lectures/lec_04_scheduling.html#single-machine-scheduling",
    "title": "Lecture IV - Scheduling",
    "section": "Single Machine Scheduling",
    "text": "Single Machine Scheduling\n\nQuestion: What is different from before?",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#order-is-irrelevant",
    "href": "lectures/lec_04_scheduling.html#order-is-irrelevant",
    "title": "Lecture IV - Scheduling",
    "section": "Order is Irrelevant",
    "text": "Order is Irrelevant\n\n\n\n\n\n\nNoteOrder is Irrelevant\n\n\n\nUnder simple minimization of total processing time, order doesn’t matter!\n\n\n. . .\nQuestion: But is it that simple?\n. . .\n\n\n\n\n\n\nImportantOrder Matters\n\n\n\nOrder becomes crucial when we consider, Deadlines, Priorities and Dependencies!",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#earliest-due-date-edd",
    "href": "lectures/lec_04_scheduling.html#earliest-due-date-edd",
    "title": "Lecture IV - Scheduling",
    "section": "Earliest Due Date (EDD)",
    "text": "Earliest Due Date (EDD)\nTasks with individual deadlines:\nTask  Duration  Deadline\n  A    40min    110min\n  B    30min     90min\n  C    60min    150min\n  D    50min     70min\n  E    30min    210min\n. . .\nGoal: Minimize maximum deadline violation\n. . .\nQuestion: An idea how to solve this?",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#edd-solution",
    "href": "lectures/lec_04_scheduling.html#edd-solution",
    "title": "Lecture IV - Scheduling",
    "section": "EDD Solution",
    "text": "EDD Solution\nRule: Sort the tasks by deadline.\nTask  Duration  Deadline\n  A    40min    110min\n  B    30min     90min\n  C    60min    150min\n  D    50min     70min\n  E    30min    210min\n. . .\nTask  Duration  Deadline\n  D    50min     70min\n  B    30min     90min\n  A    40min    110min\n  C    60min    150min\n  E    30min    210min\n. . .\nLet’s visualize this!",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#edd-schedule",
    "href": "lectures/lec_04_scheduling.html#edd-schedule",
    "title": "Lecture IV - Scheduling",
    "section": "EDD Schedule",
    "text": "EDD Schedule\n\n\n. . .\nQuestion: What’s the maximum delay here?",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#shortest-processing-time-spt",
    "href": "lectures/lec_04_scheduling.html#shortest-processing-time-spt",
    "title": "Lecture IV - Scheduling",
    "section": "Shortest Processing Time (SPT)",
    "text": "Shortest Processing Time (SPT)\n\n\n\n\nInstead of deadlines, we now have processing times.\nGoal: Min. total waiting time\nQuestion: Any ideas?\nRule: Always schedule the shortest remaining task",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#shortest-processing-time-applied",
    "href": "lectures/lec_04_scheduling.html#shortest-processing-time-applied",
    "title": "Lecture IV - Scheduling",
    "section": "Shortest Processing Time Applied",
    "text": "Shortest Processing Time Applied\nRule: Always schedule the shortest remaining task. Choose random if multiple tasks are tied.\nTask  Duration  Schedule\n  A    40min\n  B    30min\n  C    60min\n  D    50min\n  E    30min\n. . .\nQuestion: What’s the order of scheduled tasks?",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#shortest-processing-time-applied-1",
    "href": "lectures/lec_04_scheduling.html#shortest-processing-time-applied-1",
    "title": "Lecture IV - Scheduling",
    "section": "Shortest Processing Time Applied",
    "text": "Shortest Processing Time Applied\nRule: Always schedule the shortest remaining task. Choose random if multiple tasks are tied.\nTask  Duration  Schedule\n  A    40min        3\n  B    30min        1\n  C    60min        5\n  D    50min        4\n  E    30min        2\n. . .\nFinal sequence: B E A D C or E B A D C",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#spt-solution",
    "href": "lectures/lec_04_scheduling.html#spt-solution",
    "title": "Lecture IV - Scheduling",
    "section": "SPT Solution",
    "text": "SPT Solution\nOptimal sequence:\n\n\n. . .\nQuestion: Where can we see the waiting time?",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#spt-waiting-time",
    "href": "lectures/lec_04_scheduling.html#spt-waiting-time",
    "title": "Lecture IV - Scheduling",
    "section": "SPT Waiting Time",
    "text": "SPT Waiting Time\nTotal waiting time: 340 minutes\n\n. . .\nQuestion: Would this be applicable for your work?",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#weighted-spt",
    "href": "lectures/lec_04_scheduling.html#weighted-spt",
    "title": "Lecture IV - Scheduling",
    "section": "Weighted SPT",
    "text": "Weighted SPT\n\nChange: Tasks with additional priorities\nPriorities could be, e.g., revenue if we are consultants.\n\nTask  Duration  Revenue\n  A    20min    €240\n  B    30min    €200\n  C    60min    €120\n  D    50min    €70\n  E    30min    €130\n  F    40min    €120\n  G    20min    €100\n  H    70min    €110\n  I    50min    €90\n. . .\nQuestion: Any ideas how to approach this?",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#gainrevenue-per-minute",
    "href": "lectures/lec_04_scheduling.html#gainrevenue-per-minute",
    "title": "Lecture IV - Scheduling",
    "section": "Gain/Revenue Per Minute",
    "text": "Gain/Revenue Per Minute\nRule: Schedule by revenue per minute (descending)\nTask  Duration  Revenue  Revenue/Min  Schedule\n  A    20min    €240     12.0\n  B    30min    €200      6.7\n  C    60min    €120      2.0\n  D    50min    €70       1.4\n  E    30min    €130      4.3\n  F    40min    €120      3.0\n  G    20min    €100      5.0\n  H    70min    €110      1.6\n  I    50min    €90       1.8\n. . .\nQuestion: What’s the order of scheduled tasks?",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#gainrevenue-per-minute-1",
    "href": "lectures/lec_04_scheduling.html#gainrevenue-per-minute-1",
    "title": "Lecture IV - Scheduling",
    "section": "Gain/Revenue Per Minute",
    "text": "Gain/Revenue Per Minute\nRule: Schedule by revenue per minute (descending)\nTask  Duration  Revenue  Revenue/Min  Schedule\n  A    20min    €240     12.0           1\n  B    30min    €200      6.7\n  C    60min    €120      2.0\n  D    50min    €70       1.4\n  E    30min    €130      4.3\n  F    40min    €120      3.0\n  G    20min    €100      5.0\n  H    70min    €110      1.6\n  I    50min    €90       1.8",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#gainrevenue-per-minute-2",
    "href": "lectures/lec_04_scheduling.html#gainrevenue-per-minute-2",
    "title": "Lecture IV - Scheduling",
    "section": "Gain/Revenue Per Minute",
    "text": "Gain/Revenue Per Minute\nRule: Schedule by revenue per minute (descending)\nTask  Duration  Revenue  Revenue/Min  Schedule\n  A    20min    €240     12.0           1\n  B    30min    €200      6.7           2\n  C    60min    €120      2.0\n  D    50min    €70       1.4\n  E    30min    €130      4.3\n  F    40min    €120      3.0\n  G    20min    €100      5.0\n  H    70min    €110      1.6\n  I    50min    €90       1.8",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#gainrevenue-per-minute-3",
    "href": "lectures/lec_04_scheduling.html#gainrevenue-per-minute-3",
    "title": "Lecture IV - Scheduling",
    "section": "Gain/Revenue Per Minute",
    "text": "Gain/Revenue Per Minute\nRule: Schedule by revenue per minute (descending)\nTask  Duration  Revenue  Revenue/Min  Schedule\n  A    20min    €240     12.0           1\n  B    30min    €200      6.7           2\n  C    60min    €120      2.0\n  D    50min    €70       1.4\n  E    30min    €130      4.3\n  F    40min    €120      3.0\n  G    20min    €100      5.0           3\n  H    70min    €110      1.6\n  I    50min    €90       1.8",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#gainrevenue-per-minute-4",
    "href": "lectures/lec_04_scheduling.html#gainrevenue-per-minute-4",
    "title": "Lecture IV - Scheduling",
    "section": "Gain/Revenue Per Minute",
    "text": "Gain/Revenue Per Minute\nRule: Schedule by revenue per minute (descending)\nTask  Duration  Revenue  Revenue/Min  Schedule\n  A    20min    €240     12.0           1\n  B    30min    €200      6.7           2\n  C    60min    €120      2.0\n  D    50min    €70       1.4\n  E    30min    €130      4.3           4\n  F    40min    €120      3.0           5\n  G    20min    €100      5.0           3\n  H    70min    €110      1.6\n  I    50min    €90       1.8",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#gainrevenue-per-minute-5",
    "href": "lectures/lec_04_scheduling.html#gainrevenue-per-minute-5",
    "title": "Lecture IV - Scheduling",
    "section": "Gain/Revenue Per Minute",
    "text": "Gain/Revenue Per Minute\nRule: Schedule by revenue per minute (descending)\nTask  Duration  Revenue  Revenue/Min  Schedule\n  A    20min    €240     12.0           1\n  B    30min    €200      6.7           2\n  C    60min    €120      2.0           6\n  D    50min    €70       1.4\n  E    30min    €130      4.3           4\n  F    40min    €120      3.0           5\n  G    20min    €100      5.0           3\n  H    70min    €110      1.6\n  I    50min    €90       1.8",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#gainrevenue-per-minute-6",
    "href": "lectures/lec_04_scheduling.html#gainrevenue-per-minute-6",
    "title": "Lecture IV - Scheduling",
    "section": "Gain/Revenue Per Minute",
    "text": "Gain/Revenue Per Minute\nRule: Schedule by revenue per minute (descending)\nTask  Duration  Revenue  Revenue/Min  Schedule\n  A    20min    €240     12.0           1\n  B    30min    €200      6.7           2\n  C    60min    €120      2.0           6\n  D    50min    €70       1.4\n  E    30min    €130      4.3           4\n  F    40min    €120      3.0           5\n  G    20min    €100      5.0           3\n  H    70min    €110      1.6\n  I    50min    €90       1.8           7",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#gainrevenue-per-minute-7",
    "href": "lectures/lec_04_scheduling.html#gainrevenue-per-minute-7",
    "title": "Lecture IV - Scheduling",
    "section": "Gain/Revenue Per Minute",
    "text": "Gain/Revenue Per Minute\nRule: Schedule by revenue per minute (descending)\nTask  Duration  Revenue  Revenue/Min  Schedule\n  A    20min    €240     12.0           1\n  B    30min    €200      6.7           2\n  C    60min    €120      2.0           6\n  D    50min    €70       1.4\n  E    30min    €130      4.3           4\n  F    40min    €120      3.0           5\n  G    20min    €100      5.0           3\n  H    70min    €110      1.6           8\n  I    50min    €90       1.8           7",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#gainrevenue-per-minute-8",
    "href": "lectures/lec_04_scheduling.html#gainrevenue-per-minute-8",
    "title": "Lecture IV - Scheduling",
    "section": "Gain/Revenue Per Minute",
    "text": "Gain/Revenue Per Minute\nRule: Schedule by revenue per minute (descending)\nTask  Duration  Revenue  Revenue/Min  Schedule\n  A    20min    €240     12.0           1\n  B    30min    €200      6.7           2\n  C    60min    €120      2.0           6\n  D    50min    €70       1.4           9\n  E    30min    €130      4.3           4\n  F    40min    €120      3.0           5\n  G    20min    €100      5.0           3\n  H    70min    €110      1.6           8\n  I    50min    €90       1.8           7\n. . .\n\n\n\n\n\n\nTipMetric Priorities\n\n\n\nWithout revenues, we can use the same approach with metric priorities!",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#priority-inversion",
    "href": "lectures/lec_04_scheduling.html#priority-inversion",
    "title": "Lecture IV - Scheduling",
    "section": "Priority Inversion",
    "text": "Priority Inversion\n\n\nSetup:\nTask  Duration  Priority\n  A    20min     3\n  B    30min     1\n  C    30min     2\n  D    30min     2\n  E    30min     2\n\nChallenge: High-priority tasks depend on low-priority tasks.\n\nRisk: Priority inversion can lead to significant delays!",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#priority-inheritance",
    "href": "lectures/lec_04_scheduling.html#priority-inheritance",
    "title": "Lecture IV - Scheduling",
    "section": "Priority Inheritance",
    "text": "Priority Inheritance\nQuestion: How to handle with shortest processing time?\n\n\nRule: Tasks inherit priority from their dependents.\nA gets the highest priority from B\nThis ensures the critical path completion\n\n\n. . .\nTask  Duration  Priority\n  A    20min     3\n  B    30min     3\n  C    30min     2\n  D    30min     2\n  E    30min     2",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#edd-and-dependencies",
    "href": "lectures/lec_04_scheduling.html#edd-and-dependencies",
    "title": "Lecture IV - Scheduling",
    "section": "EDD and Dependencies",
    "text": "EDD and Dependencies\nQuestion: What’s was earliest due date again?\n. . .\n\nSort the tasks by deadline, schedule equal tasks randomly\nThings get more complex when we add dependencies\n\n. . .\nTask  Duration  Deadline  Predecessor\n  A    40min    110min    None\n  B    30min     90min    D\n  C    60min    150min    A\n  D    50min     70min    None\n  E    30min    210min    C\nQuestion: Any ideas how to solve this?",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#lawlers-algorithm",
    "href": "lectures/lec_04_scheduling.html#lawlers-algorithm",
    "title": "Lecture IV - Scheduling",
    "section": "Lawler’s Algorithm",
    "text": "Lawler’s Algorithm\nRule: We can use Lawler’s Algorithm (1968)\n\nConsider all tasks without successors\nChoose the one with latest deadline\nSchedule the task last\nRemove it from the network and start again",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#lawlers-applied",
    "href": "lectures/lec_04_scheduling.html#lawlers-applied",
    "title": "Lecture IV - Scheduling",
    "section": "Lawler’s Applied",
    "text": "Lawler’s Applied\nTask  Duration  Deadline  Predecessor Schedule\n  A    40min    110min    None\n  B    30min     90min    D\n  C    60min    150min    A\n  D    50min     70min    None\n  E    30min    210min    C\n. . .\nQuestion: What’s the schedule?",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#lawlers-applied-1",
    "href": "lectures/lec_04_scheduling.html#lawlers-applied-1",
    "title": "Lecture IV - Scheduling",
    "section": "Lawler’s Applied",
    "text": "Lawler’s Applied\nTask  Duration  Deadline  Predecessor Schedule\n  A    40min    110min    None\n  B    30min     90min    D\n  C    60min    150min    A\n  D    50min     70min    None\n  E    30min    210min    C             5",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#lawlers-applied-2",
    "href": "lectures/lec_04_scheduling.html#lawlers-applied-2",
    "title": "Lecture IV - Scheduling",
    "section": "Lawler’s Applied",
    "text": "Lawler’s Applied\nTask  Duration  Deadline  Predecessor Schedule\n  A    40min    110min    None\n  B    30min     90min    D\n  C    60min    150min    A             4\n  D    50min     70min    None\n  E    30min    210min    C             5",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#lawlers-applied-3",
    "href": "lectures/lec_04_scheduling.html#lawlers-applied-3",
    "title": "Lecture IV - Scheduling",
    "section": "Lawler’s Applied",
    "text": "Lawler’s Applied\nTask  Duration  Deadline  Predecessor Schedule\n  A    40min    110min    None\n  B    30min     90min    D             3\n  C    60min    150min    A             4\n  D    50min     70min    None\n  E    30min    210min    C             5",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#lawlers-applied-4",
    "href": "lectures/lec_04_scheduling.html#lawlers-applied-4",
    "title": "Lecture IV - Scheduling",
    "section": "Lawler’s Applied",
    "text": "Lawler’s Applied\nTask  Duration  Deadline  Predecessor Schedule\n  A    40min    110min    None\n  B    30min     90min    D             3\n  C    60min    150min    A             4\n  D    50min     70min    None          2\n  E    30min    210min    C             5",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#lawlers-applied-5",
    "href": "lectures/lec_04_scheduling.html#lawlers-applied-5",
    "title": "Lecture IV - Scheduling",
    "section": "Lawler’s Applied",
    "text": "Lawler’s Applied\nTask  Duration  Deadline  Predecessor Schedule\n  A    40min    110min    None          1\n  B    30min     90min    D             3\n  C    60min    150min    A             4\n  D    50min     70min    None          2\n  E    30min    210min    C             5\n. . .\n\n\n\n\n\n\nTipSuccessor Tasks\n\n\n\nNote, how all tasks become tasks without successors at some point.",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#lawlers-solution",
    "href": "lectures/lec_04_scheduling.html#lawlers-solution",
    "title": "Lecture IV - Scheduling",
    "section": "Lawler’s Solution",
    "text": "Lawler’s Solution\n\n\n\n\n\n\n\nNotePredecessor Tasks\n\n\n\nPredecessor tasks are tasks that must be completed before the current task can start. They are marked in grey in the chart.\n\n\n. . .\nQuestion: What’s the maximum delay?",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#spt-with-predecessors",
    "href": "lectures/lec_04_scheduling.html#spt-with-predecessors",
    "title": "Lecture IV - Scheduling",
    "section": "SPT with Predecessors",
    "text": "SPT with Predecessors\n\nNo solution in polynomial time\nNP-hard problem (no efficient algorithm)\nTrue for most scheduling problems!\nWe can use heuristics, though\n\n. . .\nQuestion: What have we missed so far?",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#interruptions",
    "href": "lectures/lec_04_scheduling.html#interruptions",
    "title": "Lecture IV - Scheduling",
    "section": "Interruptions",
    "text": "Interruptions\n\nIn reality, we cannot predict the future\nWe need to react to new tasks as they happen\nIf we have a deadline, we might need to meet it\nLet’s look at this for the earliest due date objective\n\n. . .\n\n\n\n\n\n\nNoteQuick reminder\n\n\n\nAn earliest due date is a specific point in time by which a task must be completed. Under this objective, we want to minimize the maximum delay.",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#real-time-edd",
    "href": "lectures/lec_04_scheduling.html#real-time-edd",
    "title": "Lecture IV - Scheduling",
    "section": "Real-time EDD",
    "text": "Real-time EDD\n8:00-12:00 Schedule:\nTask           Duration  Deadline\nEmail A        20min     9:00\nCreate PPT     60min    10:50\nInvestor call  10min     9:00\nEmail B        30min    10:20\nLiquidity      40min    11:00\nEmail C        20min    11:20\nEmail D        40min    10:00\n. . .\nQuestion: Any ideas how to start with under the objective of the earliest due date?",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#edd-rule-for-real-time",
    "href": "lectures/lec_04_scheduling.html#edd-rule-for-real-time",
    "title": "Lecture IV - Scheduling",
    "section": "EDD Rule for Real-time",
    "text": "EDD Rule for Real-time\nRule:\n\nAlways schedule the task with the earliest deadline\nIf a new task with an earlier deadline comes in, re-schedule\nOtherwise, stick to the original schedule.\n\n. . .\n\n\n\n\n\n\nTipEqual Deadline\n\n\n\nIf a new task has the same deadline as the current task, you can choose either. But due to the cost of context switching, you might want to stick with the current task.",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#edd-solution-for-real-time",
    "href": "lectures/lec_04_scheduling.html#edd-solution-for-real-time",
    "title": "Lecture IV - Scheduling",
    "section": "EDD Solution for Real-time",
    "text": "EDD Solution for Real-time\n\n. . .\nQuestion: What’s the maximum delay with this schedule?",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#spt-for-real-time",
    "href": "lectures/lec_04_scheduling.html#spt-for-real-time",
    "title": "Lecture IV - Scheduling",
    "section": "SPT for Real-time",
    "text": "SPT for Real-time\n\n\n\n\n\n\nTipQuick reminder\n\n\n\nA shortest processing time is the task with the shortest duration. Under this objective, we want to minimize the total waiting time.\n\n\n. . .\nQuestion: Any ideas how to start here?",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#spt-rule-for-real-time",
    "href": "lectures/lec_04_scheduling.html#spt-rule-for-real-time",
    "title": "Lecture IV - Scheduling",
    "section": "SPT Rule for Real-time",
    "text": "SPT Rule for Real-time\nRule:\n\nAlways schedule the task with the shortest duration\nIf a new task with a shorter duration comes in, re-schedule\nOtherwise, stick to the original schedule.\n\n. . .\n\n\n\n\n\n\nNoteEqual Duration\n\n\n\nIf a new task has the same duration as the current task, you can choose either. But due to the cost of context switching, you might again want to stick with the current task.",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#spt-solution-for-real-time",
    "href": "lectures/lec_04_scheduling.html#spt-solution-for-real-time",
    "title": "Lecture IV - Scheduling",
    "section": "SPT Solution for Real-time",
    "text": "SPT Solution for Real-time\n\n. . .\nQuestion: Where can we see the waiting time?",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#spt-solution-for-real-time-1",
    "href": "lectures/lec_04_scheduling.html#spt-solution-for-real-time-1",
    "title": "Lecture IV - Scheduling",
    "section": "SPT Solution for Real-time",
    "text": "SPT Solution for Real-time\n\nTotal waiting time: 260 minutes",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#what-is-thrashing",
    "href": "lectures/lec_04_scheduling.html#what-is-thrashing",
    "title": "Lecture IV - Scheduling",
    "section": "What is Thrashing?",
    "text": "What is Thrashing?\n\nExcessive context switching\nOrganization overhead exceeds productivity\nMaximum activity, minimum output\n\n. . .\nQuestion: Have you ever experienced this?",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#thrashing-warning-signs",
    "href": "lectures/lec_04_scheduling.html#thrashing-warning-signs",
    "title": "Lecture IV - Scheduling",
    "section": "Thrashing Warning Signs",
    "text": "Thrashing Warning Signs\n\nConstant task switching\nNothing getting completed\nIncreasing stress levels\nDeclining quality\n\n. . .\nQuestion: Any ideas how to prevent this?",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#preventing-thrashing-strategic",
    "href": "lectures/lec_04_scheduling.html#preventing-thrashing-strategic",
    "title": "Lecture IV - Scheduling",
    "section": "Preventing Thrashing Strategic",
    "text": "Preventing Thrashing Strategic\n\n\n\n\n\n\nTipStrategic\n\n\n\nStrategic solutions focus on long-term changes to prevent thrashing.\n\n\n. . .\n\nTask rejection/delegation threshold\nSimplified organization systems\nMinimum work period rules\nReduced reactivity requirements",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#preventing-thrashing-tactical",
    "href": "lectures/lec_04_scheduling.html#preventing-thrashing-tactical",
    "title": "Lecture IV - Scheduling",
    "section": "Preventing Thrashing Tactical",
    "text": "Preventing Thrashing Tactical\n\nTime blocking\nFocus periods\nTask batching\nPriority freezes\n\n. . .\nQuestion: What strategies have worked for you?",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#key-takeaways",
    "href": "lectures/lec_04_scheduling.html#key-takeaways",
    "title": "Lecture IV - Scheduling",
    "section": "Key Takeaways",
    "text": "Key Takeaways\n\nScheduling is crucial for effective time management\nDifferent objectives need different algorithms\n\nEDD for deadline management\nSPT for waiting time reduction\n\nAddress thrashing early\nDefine your reactivity goals\nUse appropriate algorithms as foundations",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#the-end",
    "href": "lectures/lec_04_scheduling.html#the-end",
    "title": "Lecture IV - Scheduling",
    "section": "The End",
    "text": "The End\n\n\n\n\n\n\nNote\n\n\n\nThat’s it for todays lecture!\nWe now have covered a brief introduction into scheduling. Now, we can start with the tutorials! As we have now a good foundation, we can start to apply some algorithms on data sets in Python.",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#interesting-literature-to-start",
    "href": "lectures/lec_04_scheduling.html#interesting-literature-to-start",
    "title": "Lecture IV - Scheduling",
    "section": "Interesting literature to start",
    "text": "Interesting literature to start\n\nChristian, B., & Griffiths, T. (2016). Algorithms to live by: the computer science of human decisions. First international edition. New York, Henry Holt and Company.1",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#books-on-programming",
    "href": "lectures/lec_04_scheduling.html#books-on-programming",
    "title": "Lecture IV - Scheduling",
    "section": "Books on Programming",
    "text": "Books on Programming\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Here\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nThink Python is a great book to start with. It’s available online for free. Schrödinger Programmiert Python is a great alternative for German students, as it is a very playful introduction to programming with lots of examples.",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#more-literature",
    "href": "lectures/lec_04_scheduling.html#more-literature",
    "title": "Lecture IV - Scheduling",
    "section": "More Literature",
    "text": "More Literature\nFor more interesting literature, take a look at the literature list of this course.",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_scheduling.html#footnotes",
    "href": "lectures/lec_04_scheduling.html#footnotes",
    "title": "Lecture IV - Scheduling",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThe main inspiration for this lecture. Nils and I have read it and discussed it in depth, always wanting to translate it into a course.↩︎",
    "crumbs": [
      "04 Scheduling",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_04_presentation.html#introduction-1",
    "href": "lectures/lec_04_presentation.html#introduction-1",
    "title": "Lecture IV - Scheduling",
    "section": "Introduction",
    "text": "Introduction"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#washing-machine-dryer",
    "href": "lectures/lec_04_presentation.html#washing-machine-dryer",
    "title": "Lecture IV - Scheduling",
    "section": "Washing Machine & Dryer",
    "text": "Washing Machine & Dryer\nLet’s solve this simple scheduling problem:\n\nTask  Washing  Drying\n  A    40min   60min\n  B    30min   80min\n  C    60min   20min\n  D    50min   60min\n\n\nGoal: Minimize total time for washing and drying all loads\n\n\nQuestion: An idea how to solve this?"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#johnsons-rule",
    "href": "lectures/lec_04_presentation.html#johnsons-rule",
    "title": "Lecture IV - Scheduling",
    "section": "Johnson’s Rule",
    "text": "Johnson’s Rule\nRule: To find the optimal solution:\n\nFind the job with shortest duration:\n\nIf on Machine 1 → Schedule First\nIf on Machine 2 → Schedule Last\nIf equal → Choose randomly\n\nRemove job from list and repeat"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#applying-johnsons-rule",
    "href": "lectures/lec_04_presentation.html#applying-johnsons-rule",
    "title": "Lecture IV - Scheduling",
    "section": "Applying Johnson’s Rule",
    "text": "Applying Johnson’s Rule\nTask  Washing  Drying  Schedule\n  A    40min   60min\n  B    30min   80min\n  C    60min   20min\n  D    50min   60min\n\nQuestion: What’s the first scheduled task?"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#applying-johnsons-rule-1",
    "href": "lectures/lec_04_presentation.html#applying-johnsons-rule-1",
    "title": "Lecture IV - Scheduling",
    "section": "Applying Johnson’s Rule",
    "text": "Applying Johnson’s Rule\nTask  Washing  Drying  Schedule\n  A    40min   60min\n  B    30min   80min\n  C    60min   20min        4\n  D    50min   60min\n\nIn Task C, the dryer is the shortest task.\nIt is on Machine 2 → Schedule Last\n\n\nQuestion: What’s the next task?"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#applying-johnsons-rule-2",
    "href": "lectures/lec_04_presentation.html#applying-johnsons-rule-2",
    "title": "Lecture IV - Scheduling",
    "section": "Applying Johnson’s Rule",
    "text": "Applying Johnson’s Rule\nTask  Washing  Drying  Schedule\n  A    40min   60min\n  B    30min   80min        1\n  C    60min   20min        4\n  D    50min   60min\n\nIn Task B, the washing machine is the shortest task.\nIt is on Machine 1 → Schedule First\n\n\nQuestion: What’s the next task?"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#applying-johnsons-rule-3",
    "href": "lectures/lec_04_presentation.html#applying-johnsons-rule-3",
    "title": "Lecture IV - Scheduling",
    "section": "Applying Johnson’s Rule",
    "text": "Applying Johnson’s Rule\nTask  Washing  Drying  Schedule\n  A    40min   60min        2\n  B    30min   80min        1\n  C    60min   20min        4\n  D    50min   60min\n\nIn Task A, the washing machine is the shortest task.\nIt is on Machine 1 → Schedule Second\n\n\nNow, we only have one task left!"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#applying-johnsons-rule-4",
    "href": "lectures/lec_04_presentation.html#applying-johnsons-rule-4",
    "title": "Lecture IV - Scheduling",
    "section": "Applying Johnson’s Rule",
    "text": "Applying Johnson’s Rule\nTask  Washing  Drying  Schedule\n  A    40min   60min        2\n  B    30min   80min        1\n  C    60min   20min        4\n  D    50min   60min        3\n\nFinal sequence: B A D C"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#optimal-solution",
    "href": "lectures/lec_04_presentation.html#optimal-solution",
    "title": "Lecture IV - Scheduling",
    "section": "Optimal Solution",
    "text": "Optimal Solution\nOptimal Solution: B A D C\n\n\nTotal time: 4 hours 20 minutes\n\nQuestion: Is there a worse solution?"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#suboptimal-solution",
    "href": "lectures/lec_04_presentation.html#suboptimal-solution",
    "title": "Lecture IV - Scheduling",
    "section": "Suboptimal Solution",
    "text": "Suboptimal Solution\nSuboptimal Solution: C D A B\n\n\nTotal time: 5 hours 10 minutes\n\nQuestion: What’s the difference?"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#industrial-revolution",
    "href": "lectures/lec_04_presentation.html#industrial-revolution",
    "title": "Lecture IV - Scheduling",
    "section": "Industrial Revolution",
    "text": "Industrial Revolution\n\n\n\nFirst systematic visualization by Frederick Taylor\nHenry Gantt develops the Gantt Chart around 1910\nKey tool during Industrial Revolution\nBut no scheduling theory yet!\n\n\n\n\n\nQuestion: Who knows what a Gantt Chart is?"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#modern-scheduling-theory",
    "href": "lectures/lec_04_presentation.html#modern-scheduling-theory",
    "title": "Lecture IV - Scheduling",
    "section": "Modern Scheduling Theory",
    "text": "Modern Scheduling Theory\n\n\n\nRAND Corporation founded (1948)\nSelmer Johnson publishes Johnson’s Rule in 1954\nBeginning of modern scheduling theory\nMany more algorithms and methods developed since"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#task-classification",
    "href": "lectures/lec_04_presentation.html#task-classification",
    "title": "Lecture IV - Scheduling",
    "section": "Task Classification",
    "text": "Task Classification\nQuestion: What properties can scheduled tasks have?\n\n\n\n\n\n\nmindmap\n  root((Task Properties))\n    Time-Related\n      Time windows\n      Deadlines\n      Start constraints\n      Deterministic durations\n      Variable durations\n      Stochastic durations\n    Relationship-Based\n      Predecessor relationships\n      Successor relationships\n      Dependencies\n      Priority levels\n      Resource constraints\n\n\n\n\n\n\n\n\nQuestion: What types of tasks do you deal with most often?"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#single-machine-scheduling",
    "href": "lectures/lec_04_presentation.html#single-machine-scheduling",
    "title": "Lecture IV - Scheduling",
    "section": "Single Machine Scheduling",
    "text": "Single Machine Scheduling\n\nQuestion: What is different from before?"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#order-is-irrelevant",
    "href": "lectures/lec_04_presentation.html#order-is-irrelevant",
    "title": "Lecture IV - Scheduling",
    "section": "Order is Irrelevant",
    "text": "Order is Irrelevant\n\n\n\n\n\n\nOrder is Irrelevant\n\n\nUnder simple minimization of total processing time, order doesn’t matter!\n\n\n\n\nQuestion: But is it that simple?\n\n\n\n\n\n\n\n\nOrder Matters\n\n\nOrder becomes crucial when we consider, Deadlines, Priorities and Dependencies!"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#earliest-due-date-edd",
    "href": "lectures/lec_04_presentation.html#earliest-due-date-edd",
    "title": "Lecture IV - Scheduling",
    "section": "Earliest Due Date (EDD)",
    "text": "Earliest Due Date (EDD)\nTasks with individual deadlines:\nTask  Duration  Deadline\n  A    40min    110min\n  B    30min     90min\n  C    60min    150min\n  D    50min     70min\n  E    30min    210min\n\nGoal: Minimize maximum deadline violation\n\n\nQuestion: An idea how to solve this?"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#edd-solution",
    "href": "lectures/lec_04_presentation.html#edd-solution",
    "title": "Lecture IV - Scheduling",
    "section": "EDD Solution",
    "text": "EDD Solution\nRule: Sort the tasks by deadline.\nTask  Duration  Deadline\n  A    40min    110min\n  B    30min     90min\n  C    60min    150min\n  D    50min     70min\n  E    30min    210min\n\nTask  Duration  Deadline\n  D    50min     70min\n  B    30min     90min\n  A    40min    110min\n  C    60min    150min\n  E    30min    210min\n\n\nLet’s visualize this!"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#edd-schedule",
    "href": "lectures/lec_04_presentation.html#edd-schedule",
    "title": "Lecture IV - Scheduling",
    "section": "EDD Schedule",
    "text": "EDD Schedule\n\n\n\nQuestion: What’s the maximum delay here?"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#shortest-processing-time-spt",
    "href": "lectures/lec_04_presentation.html#shortest-processing-time-spt",
    "title": "Lecture IV - Scheduling",
    "section": "Shortest Processing Time (SPT)",
    "text": "Shortest Processing Time (SPT)\n\n\n\n\nInstead of deadlines, we now have processing times.\nGoal: Min. total waiting time\nQuestion: Any ideas?\nRule: Always schedule the shortest remaining task"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#shortest-processing-time-applied",
    "href": "lectures/lec_04_presentation.html#shortest-processing-time-applied",
    "title": "Lecture IV - Scheduling",
    "section": "Shortest Processing Time Applied",
    "text": "Shortest Processing Time Applied\nRule: Always schedule the shortest remaining task. Choose random if multiple tasks are tied.\nTask  Duration  Schedule\n  A    40min\n  B    30min\n  C    60min\n  D    50min\n  E    30min\n\nQuestion: What’s the order of scheduled tasks?"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#shortest-processing-time-applied-1",
    "href": "lectures/lec_04_presentation.html#shortest-processing-time-applied-1",
    "title": "Lecture IV - Scheduling",
    "section": "Shortest Processing Time Applied",
    "text": "Shortest Processing Time Applied\nRule: Always schedule the shortest remaining task. Choose random if multiple tasks are tied.\nTask  Duration  Schedule\n  A    40min        3\n  B    30min        1\n  C    60min        5\n  D    50min        4\n  E    30min        2\n\nFinal sequence: B E A D C or E B A D C"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#spt-solution",
    "href": "lectures/lec_04_presentation.html#spt-solution",
    "title": "Lecture IV - Scheduling",
    "section": "SPT Solution",
    "text": "SPT Solution\nOptimal sequence:\n\n\n\nQuestion: Where can we see the waiting time?"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#spt-waiting-time",
    "href": "lectures/lec_04_presentation.html#spt-waiting-time",
    "title": "Lecture IV - Scheduling",
    "section": "SPT Waiting Time",
    "text": "SPT Waiting Time\nTotal waiting time: 340 minutes\n\n\nQuestion: Would this be applicable for your work?"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#weighted-spt",
    "href": "lectures/lec_04_presentation.html#weighted-spt",
    "title": "Lecture IV - Scheduling",
    "section": "Weighted SPT",
    "text": "Weighted SPT\n\nChange: Tasks with additional priorities\nPriorities could be, e.g., revenue if we are consultants.\n\nTask  Duration  Revenue\n  A    20min    €240\n  B    30min    €200\n  C    60min    €120\n  D    50min    €70\n  E    30min    €130\n  F    40min    €120\n  G    20min    €100\n  H    70min    €110\n  I    50min    €90\n\nQuestion: Any ideas how to approach this?"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#gainrevenue-per-minute",
    "href": "lectures/lec_04_presentation.html#gainrevenue-per-minute",
    "title": "Lecture IV - Scheduling",
    "section": "Gain/Revenue Per Minute",
    "text": "Gain/Revenue Per Minute\nRule: Schedule by revenue per minute (descending)\nTask  Duration  Revenue  Revenue/Min  Schedule\n  A    20min    €240     12.0\n  B    30min    €200      6.7\n  C    60min    €120      2.0\n  D    50min    €70       1.4\n  E    30min    €130      4.3\n  F    40min    €120      3.0\n  G    20min    €100      5.0\n  H    70min    €110      1.6\n  I    50min    €90       1.8\n\nQuestion: What’s the order of scheduled tasks?"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#gainrevenue-per-minute-1",
    "href": "lectures/lec_04_presentation.html#gainrevenue-per-minute-1",
    "title": "Lecture IV - Scheduling",
    "section": "Gain/Revenue Per Minute",
    "text": "Gain/Revenue Per Minute\nRule: Schedule by revenue per minute (descending)\nTask  Duration  Revenue  Revenue/Min  Schedule\n  A    20min    €240     12.0           1\n  B    30min    €200      6.7\n  C    60min    €120      2.0\n  D    50min    €70       1.4\n  E    30min    €130      4.3\n  F    40min    €120      3.0\n  G    20min    €100      5.0\n  H    70min    €110      1.6\n  I    50min    €90       1.8"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#gainrevenue-per-minute-2",
    "href": "lectures/lec_04_presentation.html#gainrevenue-per-minute-2",
    "title": "Lecture IV - Scheduling",
    "section": "Gain/Revenue Per Minute",
    "text": "Gain/Revenue Per Minute\nRule: Schedule by revenue per minute (descending)\nTask  Duration  Revenue  Revenue/Min  Schedule\n  A    20min    €240     12.0           1\n  B    30min    €200      6.7           2\n  C    60min    €120      2.0\n  D    50min    €70       1.4\n  E    30min    €130      4.3\n  F    40min    €120      3.0\n  G    20min    €100      5.0\n  H    70min    €110      1.6\n  I    50min    €90       1.8"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#gainrevenue-per-minute-3",
    "href": "lectures/lec_04_presentation.html#gainrevenue-per-minute-3",
    "title": "Lecture IV - Scheduling",
    "section": "Gain/Revenue Per Minute",
    "text": "Gain/Revenue Per Minute\nRule: Schedule by revenue per minute (descending)\nTask  Duration  Revenue  Revenue/Min  Schedule\n  A    20min    €240     12.0           1\n  B    30min    €200      6.7           2\n  C    60min    €120      2.0\n  D    50min    €70       1.4\n  E    30min    €130      4.3\n  F    40min    €120      3.0\n  G    20min    €100      5.0           3\n  H    70min    €110      1.6\n  I    50min    €90       1.8"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#gainrevenue-per-minute-4",
    "href": "lectures/lec_04_presentation.html#gainrevenue-per-minute-4",
    "title": "Lecture IV - Scheduling",
    "section": "Gain/Revenue Per Minute",
    "text": "Gain/Revenue Per Minute\nRule: Schedule by revenue per minute (descending)\nTask  Duration  Revenue  Revenue/Min  Schedule\n  A    20min    €240     12.0           1\n  B    30min    €200      6.7           2\n  C    60min    €120      2.0\n  D    50min    €70       1.4\n  E    30min    €130      4.3           4\n  F    40min    €120      3.0           5\n  G    20min    €100      5.0           3\n  H    70min    €110      1.6\n  I    50min    €90       1.8"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#gainrevenue-per-minute-5",
    "href": "lectures/lec_04_presentation.html#gainrevenue-per-minute-5",
    "title": "Lecture IV - Scheduling",
    "section": "Gain/Revenue Per Minute",
    "text": "Gain/Revenue Per Minute\nRule: Schedule by revenue per minute (descending)\nTask  Duration  Revenue  Revenue/Min  Schedule\n  A    20min    €240     12.0           1\n  B    30min    €200      6.7           2\n  C    60min    €120      2.0           6\n  D    50min    €70       1.4\n  E    30min    €130      4.3           4\n  F    40min    €120      3.0           5\n  G    20min    €100      5.0           3\n  H    70min    €110      1.6\n  I    50min    €90       1.8"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#gainrevenue-per-minute-6",
    "href": "lectures/lec_04_presentation.html#gainrevenue-per-minute-6",
    "title": "Lecture IV - Scheduling",
    "section": "Gain/Revenue Per Minute",
    "text": "Gain/Revenue Per Minute\nRule: Schedule by revenue per minute (descending)\nTask  Duration  Revenue  Revenue/Min  Schedule\n  A    20min    €240     12.0           1\n  B    30min    €200      6.7           2\n  C    60min    €120      2.0           6\n  D    50min    €70       1.4\n  E    30min    €130      4.3           4\n  F    40min    €120      3.0           5\n  G    20min    €100      5.0           3\n  H    70min    €110      1.6\n  I    50min    €90       1.8           7"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#gainrevenue-per-minute-7",
    "href": "lectures/lec_04_presentation.html#gainrevenue-per-minute-7",
    "title": "Lecture IV - Scheduling",
    "section": "Gain/Revenue Per Minute",
    "text": "Gain/Revenue Per Minute\nRule: Schedule by revenue per minute (descending)\nTask  Duration  Revenue  Revenue/Min  Schedule\n  A    20min    €240     12.0           1\n  B    30min    €200      6.7           2\n  C    60min    €120      2.0           6\n  D    50min    €70       1.4\n  E    30min    €130      4.3           4\n  F    40min    €120      3.0           5\n  G    20min    €100      5.0           3\n  H    70min    €110      1.6           8\n  I    50min    €90       1.8           7"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#gainrevenue-per-minute-8",
    "href": "lectures/lec_04_presentation.html#gainrevenue-per-minute-8",
    "title": "Lecture IV - Scheduling",
    "section": "Gain/Revenue Per Minute",
    "text": "Gain/Revenue Per Minute\nRule: Schedule by revenue per minute (descending)\nTask  Duration  Revenue  Revenue/Min  Schedule\n  A    20min    €240     12.0           1\n  B    30min    €200      6.7           2\n  C    60min    €120      2.0           6\n  D    50min    €70       1.4           9\n  E    30min    €130      4.3           4\n  F    40min    €120      3.0           5\n  G    20min    €100      5.0           3\n  H    70min    €110      1.6           8\n  I    50min    €90       1.8           7\n\n\n\n\n\n\n\nMetric Priorities\n\n\nWithout revenues, we can use the same approach with metric priorities!"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#priority-inversion",
    "href": "lectures/lec_04_presentation.html#priority-inversion",
    "title": "Lecture IV - Scheduling",
    "section": "Priority Inversion",
    "text": "Priority Inversion\n\n\nSetup:\nTask  Duration  Priority\n  A    20min     3\n  B    30min     1\n  C    30min     2\n  D    30min     2\n  E    30min     2\n\nChallenge: High-priority tasks depend on low-priority tasks.\n\nRisk: Priority inversion can lead to significant delays!"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#priority-inheritance",
    "href": "lectures/lec_04_presentation.html#priority-inheritance",
    "title": "Lecture IV - Scheduling",
    "section": "Priority Inheritance",
    "text": "Priority Inheritance\nQuestion: How to handle with shortest processing time?\n\nRule: Tasks inherit priority from their dependents.\nA gets the highest priority from B\nThis ensures the critical path completion\n\n\nTask  Duration  Priority\n  A    20min     3\n  B    30min     3\n  C    30min     2\n  D    30min     2\n  E    30min     2"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#edd-and-dependencies",
    "href": "lectures/lec_04_presentation.html#edd-and-dependencies",
    "title": "Lecture IV - Scheduling",
    "section": "EDD and Dependencies",
    "text": "EDD and Dependencies\nQuestion: What’s was earliest due date again?\n\n\nSort the tasks by deadline, schedule equal tasks randomly\nThings get more complex when we add dependencies\n\n\n\nTask  Duration  Deadline  Predecessor\n  A    40min    110min    None\n  B    30min     90min    D\n  C    60min    150min    A\n  D    50min     70min    None\n  E    30min    210min    C\nQuestion: Any ideas how to solve this?"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#lawlers-algorithm",
    "href": "lectures/lec_04_presentation.html#lawlers-algorithm",
    "title": "Lecture IV - Scheduling",
    "section": "Lawler’s Algorithm",
    "text": "Lawler’s Algorithm\nRule: We can use Lawler’s Algorithm (1968)\n\nConsider all tasks without successors\nChoose the one with latest deadline\nSchedule the task last\nRemove it from the network and start again"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#lawlers-applied",
    "href": "lectures/lec_04_presentation.html#lawlers-applied",
    "title": "Lecture IV - Scheduling",
    "section": "Lawler’s Applied",
    "text": "Lawler’s Applied\nTask  Duration  Deadline  Predecessor Schedule\n  A    40min    110min    None\n  B    30min     90min    D\n  C    60min    150min    A\n  D    50min     70min    None\n  E    30min    210min    C\n\nQuestion: What’s the schedule?"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#lawlers-applied-1",
    "href": "lectures/lec_04_presentation.html#lawlers-applied-1",
    "title": "Lecture IV - Scheduling",
    "section": "Lawler’s Applied",
    "text": "Lawler’s Applied\nTask  Duration  Deadline  Predecessor Schedule\n  A    40min    110min    None\n  B    30min     90min    D\n  C    60min    150min    A\n  D    50min     70min    None\n  E    30min    210min    C             5"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#lawlers-applied-2",
    "href": "lectures/lec_04_presentation.html#lawlers-applied-2",
    "title": "Lecture IV - Scheduling",
    "section": "Lawler’s Applied",
    "text": "Lawler’s Applied\nTask  Duration  Deadline  Predecessor Schedule\n  A    40min    110min    None\n  B    30min     90min    D\n  C    60min    150min    A             4\n  D    50min     70min    None\n  E    30min    210min    C             5"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#lawlers-applied-3",
    "href": "lectures/lec_04_presentation.html#lawlers-applied-3",
    "title": "Lecture IV - Scheduling",
    "section": "Lawler’s Applied",
    "text": "Lawler’s Applied\nTask  Duration  Deadline  Predecessor Schedule\n  A    40min    110min    None\n  B    30min     90min    D             3\n  C    60min    150min    A             4\n  D    50min     70min    None\n  E    30min    210min    C             5"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#lawlers-applied-4",
    "href": "lectures/lec_04_presentation.html#lawlers-applied-4",
    "title": "Lecture IV - Scheduling",
    "section": "Lawler’s Applied",
    "text": "Lawler’s Applied\nTask  Duration  Deadline  Predecessor Schedule\n  A    40min    110min    None\n  B    30min     90min    D             3\n  C    60min    150min    A             4\n  D    50min     70min    None          2\n  E    30min    210min    C             5"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#lawlers-applied-5",
    "href": "lectures/lec_04_presentation.html#lawlers-applied-5",
    "title": "Lecture IV - Scheduling",
    "section": "Lawler’s Applied",
    "text": "Lawler’s Applied\nTask  Duration  Deadline  Predecessor Schedule\n  A    40min    110min    None          1\n  B    30min     90min    D             3\n  C    60min    150min    A             4\n  D    50min     70min    None          2\n  E    30min    210min    C             5\n\n\n\n\n\n\n\nSuccessor Tasks\n\n\nNote, how all tasks become tasks without successors at some point."
  },
  {
    "objectID": "lectures/lec_04_presentation.html#lawlers-solution",
    "href": "lectures/lec_04_presentation.html#lawlers-solution",
    "title": "Lecture IV - Scheduling",
    "section": "Lawler’s Solution",
    "text": "Lawler’s Solution\n\n\n\n\n\n\n\nPredecessor Tasks\n\n\nPredecessor tasks are tasks that must be completed before the current task can start. They are marked in grey in the chart.\n\n\n\n\nQuestion: What’s the maximum delay?"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#spt-with-predecessors",
    "href": "lectures/lec_04_presentation.html#spt-with-predecessors",
    "title": "Lecture IV - Scheduling",
    "section": "SPT with Predecessors",
    "text": "SPT with Predecessors\n\nNo solution in polynomial time\nNP-hard problem (no efficient algorithm)\nTrue for most scheduling problems!\nWe can use heuristics, though\n\n\nQuestion: What have we missed so far?"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#interruptions",
    "href": "lectures/lec_04_presentation.html#interruptions",
    "title": "Lecture IV - Scheduling",
    "section": "Interruptions",
    "text": "Interruptions\n\nIn reality, we cannot predict the future\nWe need to react to new tasks as they happen\nIf we have a deadline, we might need to meet it\nLet’s look at this for the earliest due date objective\n\n\n\n\n\n\n\n\nQuick reminder\n\n\nAn earliest due date is a specific point in time by which a task must be completed. Under this objective, we want to minimize the maximum delay."
  },
  {
    "objectID": "lectures/lec_04_presentation.html#real-time-edd",
    "href": "lectures/lec_04_presentation.html#real-time-edd",
    "title": "Lecture IV - Scheduling",
    "section": "Real-time EDD",
    "text": "Real-time EDD\n8:00-12:00 Schedule:\nTask           Duration  Deadline\nEmail A        20min     9:00\nCreate PPT     60min    10:50\nInvestor call  10min     9:00\nEmail B        30min    10:20\nLiquidity      40min    11:00\nEmail C        20min    11:20\nEmail D        40min    10:00\n\nQuestion: Any ideas how to start with under the objective of the earliest due date?"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#edd-rule-for-real-time",
    "href": "lectures/lec_04_presentation.html#edd-rule-for-real-time",
    "title": "Lecture IV - Scheduling",
    "section": "EDD Rule for Real-time",
    "text": "EDD Rule for Real-time\nRule:\n\nAlways schedule the task with the earliest deadline\nIf a new task with an earlier deadline comes in, re-schedule\nOtherwise, stick to the original schedule.\n\n\n\n\n\n\n\n\nEqual Deadline\n\n\nIf a new task has the same deadline as the current task, you can choose either. But due to the cost of context switching, you might want to stick with the current task."
  },
  {
    "objectID": "lectures/lec_04_presentation.html#edd-solution-for-real-time",
    "href": "lectures/lec_04_presentation.html#edd-solution-for-real-time",
    "title": "Lecture IV - Scheduling",
    "section": "EDD Solution for Real-time",
    "text": "EDD Solution for Real-time\n\n\nQuestion: What’s the maximum delay with this schedule?"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#spt-for-real-time",
    "href": "lectures/lec_04_presentation.html#spt-for-real-time",
    "title": "Lecture IV - Scheduling",
    "section": "SPT for Real-time",
    "text": "SPT for Real-time\n\n\n\n\n\n\nQuick reminder\n\n\nA shortest processing time is the task with the shortest duration. Under this objective, we want to minimize the total waiting time.\n\n\n\n\nQuestion: Any ideas how to start here?"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#spt-rule-for-real-time",
    "href": "lectures/lec_04_presentation.html#spt-rule-for-real-time",
    "title": "Lecture IV - Scheduling",
    "section": "SPT Rule for Real-time",
    "text": "SPT Rule for Real-time\nRule:\n\nAlways schedule the task with the shortest duration\nIf a new task with a shorter duration comes in, re-schedule\nOtherwise, stick to the original schedule.\n\n\n\n\n\n\n\n\nEqual Duration\n\n\nIf a new task has the same duration as the current task, you can choose either. But due to the cost of context switching, you might again want to stick with the current task."
  },
  {
    "objectID": "lectures/lec_04_presentation.html#spt-solution-for-real-time",
    "href": "lectures/lec_04_presentation.html#spt-solution-for-real-time",
    "title": "Lecture IV - Scheduling",
    "section": "SPT Solution for Real-time",
    "text": "SPT Solution for Real-time\n\n\nQuestion: Where can we see the waiting time?"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#spt-solution-for-real-time-1",
    "href": "lectures/lec_04_presentation.html#spt-solution-for-real-time-1",
    "title": "Lecture IV - Scheduling",
    "section": "SPT Solution for Real-time",
    "text": "SPT Solution for Real-time\n\nTotal waiting time: 260 minutes"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#what-is-thrashing",
    "href": "lectures/lec_04_presentation.html#what-is-thrashing",
    "title": "Lecture IV - Scheduling",
    "section": "What is Thrashing?",
    "text": "What is Thrashing?\n\nExcessive context switching\nOrganization overhead exceeds productivity\nMaximum activity, minimum output\n\n\nQuestion: Have you ever experienced this?"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#thrashing-warning-signs",
    "href": "lectures/lec_04_presentation.html#thrashing-warning-signs",
    "title": "Lecture IV - Scheduling",
    "section": "Thrashing Warning Signs",
    "text": "Thrashing Warning Signs\n\nConstant task switching\nNothing getting completed\nIncreasing stress levels\nDeclining quality\n\n\nQuestion: Any ideas how to prevent this?"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#preventing-thrashing-strategic",
    "href": "lectures/lec_04_presentation.html#preventing-thrashing-strategic",
    "title": "Lecture IV - Scheduling",
    "section": "Preventing Thrashing Strategic",
    "text": "Preventing Thrashing Strategic\n\n\n\n\n\n\nStrategic\n\n\nStrategic solutions focus on long-term changes to prevent thrashing.\n\n\n\n\n\nTask rejection/delegation threshold\nSimplified organization systems\nMinimum work period rules\nReduced reactivity requirements"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#preventing-thrashing-tactical",
    "href": "lectures/lec_04_presentation.html#preventing-thrashing-tactical",
    "title": "Lecture IV - Scheduling",
    "section": "Preventing Thrashing Tactical",
    "text": "Preventing Thrashing Tactical\n\nTime blocking\nFocus periods\nTask batching\nPriority freezes\n\n\nQuestion: What strategies have worked for you?"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#key-takeaways",
    "href": "lectures/lec_04_presentation.html#key-takeaways",
    "title": "Lecture IV - Scheduling",
    "section": "Key Takeaways",
    "text": "Key Takeaways\n\nScheduling is crucial for effective time management\nDifferent objectives need different algorithms\n\nEDD for deadline management\nSPT for waiting time reduction\n\nAddress thrashing early\nDefine your reactivity goals\nUse appropriate algorithms as foundations"
  },
  {
    "objectID": "lectures/lec_04_presentation.html#the-end",
    "href": "lectures/lec_04_presentation.html#the-end",
    "title": "Lecture IV - Scheduling",
    "section": "The End",
    "text": "The End\n\n\n\n\n\n\nNote\n\n\nThat’s it for todays lecture!\nWe now have covered a brief introduction into scheduling. Now, we can start with the tutorials! As we have now a good foundation, we can start to apply some algorithms on data sets in Python."
  },
  {
    "objectID": "lectures/lec_04_presentation.html#interesting-literature-to-start",
    "href": "lectures/lec_04_presentation.html#interesting-literature-to-start",
    "title": "Lecture IV - Scheduling",
    "section": "Interesting literature to start",
    "text": "Interesting literature to start\n\nChristian, B., & Griffiths, T. (2016). Algorithms to live by: the computer science of human decisions. First international edition. New York, Henry Holt and Company.1\n\nThe main inspiration for this lecture. Nils and I have read it and discussed it in depth, always wanting to translate it into a course."
  },
  {
    "objectID": "lectures/lec_04_presentation.html#books-on-programming",
    "href": "lectures/lec_04_presentation.html#books-on-programming",
    "title": "Lecture IV - Scheduling",
    "section": "Books on Programming",
    "text": "Books on Programming\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Here\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n\n\n\n\n\n\n\nNote\n\n\nThink Python is a great book to start with. It’s available online for free. Schrödinger Programmiert Python is a great alternative for German students, as it is a very playful introduction to programming with lots of examples."
  },
  {
    "objectID": "lectures/lec_04_presentation.html#more-literature",
    "href": "lectures/lec_04_presentation.html#more-literature",
    "title": "Lecture IV - Scheduling",
    "section": "More Literature",
    "text": "More Literature\nFor more interesting literature, take a look at the literature list of this course."
  },
  {
    "objectID": "lectures/lec_06_kindness.html",
    "href": "lectures/lec_06_kindness.html",
    "title": "Lecture VI - Computational Kindness",
    "section": "",
    "text": ". . .\nQuestion: An idea what that is?\n. . .\n\n\nIdea of introducing empathy in algorithms\nConsider human cognitive load and limitations\nMaking choices that reduce mental burden for others\nCreating systems that are easy to understand and interact\n\n\n\n\n\n\n\n\n\nPropose specific times!\nDon’t ask “when are you free?”\nReduces cognitive load for others\nTransforms an open-ended problem\n\n. . .\n\n\n\n\n\n\nImportant\n\n\n\nNow a simple yes/no decision!\n\n\n\n\n\n\nBe explicit rather than implicit\nProvide clear options instead\nAvoid open-ended questions\nState your preferences\n\n. . .\n\n\n\n\n\n\nImportant\n\n\n\nAvoid deferring → “I’m fine with whatever”!\n\n\n\n\n\n\n“I’m free whenever” seems helpful\nBeing too flexible can be unhelpful\nBut it is not!\n\nForces others to consider all possibilities\nIncreases cognitive load\nMakes decision-making more complex\n\n\n\n\n\n\nReduce Options: Fewer choices lead to better decisions\nBe Explicit: Clear constraints help others decide\nConsider Cognitive Load: Design interactions minimizing mental effort for others\nMake Decisions: Taking responsibility can be kind",
    "crumbs": [
      "06 Kindness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_kindness.html#computational-kindness-1",
    "href": "lectures/lec_06_kindness.html#computational-kindness-1",
    "title": "Lecture VI - Computational Kindness",
    "section": "",
    "text": ". . .\nQuestion: An idea what that is?\n. . .\n\n\nIdea of introducing empathy in algorithms\nConsider human cognitive load and limitations\nMaking choices that reduce mental burden for others\nCreating systems that are easy to understand and interact",
    "crumbs": [
      "06 Kindness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_kindness.html#scheduling-meetings",
    "href": "lectures/lec_06_kindness.html#scheduling-meetings",
    "title": "Lecture VI - Computational Kindness",
    "section": "",
    "text": "Propose specific times!\nDon’t ask “when are you free?”\nReduces cognitive load for others\nTransforms an open-ended problem\n\n. . .\n\n\n\n\n\n\nImportant\n\n\n\nNow a simple yes/no decision!",
    "crumbs": [
      "06 Kindness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_kindness.html#communication",
    "href": "lectures/lec_06_kindness.html#communication",
    "title": "Lecture VI - Computational Kindness",
    "section": "",
    "text": "Be explicit rather than implicit\nProvide clear options instead\nAvoid open-ended questions\nState your preferences\n\n. . .\n\n\n\n\n\n\nImportant\n\n\n\nAvoid deferring → “I’m fine with whatever”!",
    "crumbs": [
      "06 Kindness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_kindness.html#the-cost-of-flexibility",
    "href": "lectures/lec_06_kindness.html#the-cost-of-flexibility",
    "title": "Lecture VI - Computational Kindness",
    "section": "",
    "text": "“I’m free whenever” seems helpful\nBeing too flexible can be unhelpful\nBut it is not!\n\nForces others to consider all possibilities\nIncreases cognitive load\nMakes decision-making more complex",
    "crumbs": [
      "06 Kindness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_kindness.html#principles",
    "href": "lectures/lec_06_kindness.html#principles",
    "title": "Lecture VI - Computational Kindness",
    "section": "",
    "text": "Reduce Options: Fewer choices lead to better decisions\nBe Explicit: Clear constraints help others decide\nConsider Cognitive Load: Design interactions minimizing mental effort for others\nMake Decisions: Taking responsibility can be kind",
    "crumbs": [
      "06 Kindness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_kindness.html#topics-from-the-lecture",
    "href": "lectures/lec_06_kindness.html#topics-from-the-lecture",
    "title": "Lecture VI - Computational Kindness",
    "section": "Topics from the Lecture",
    "text": "Topics from the Lecture\n\nOptimal Stopping: How to decide when to stop looking for better options.\nExplore/Exploit Tradeoff: Balancing between trying new things and sticking with known options.\nCaching: Storing and reusing information by sticking to a task to improve performance.\nScheduling: Efficiently managing tasks and time.\nRandomness: Understanding and working with uncertainty.",
    "crumbs": [
      "06 Kindness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_kindness.html#how-to-continue-learning",
    "href": "lectures/lec_06_kindness.html#how-to-continue-learning",
    "title": "Lecture VI - Computational Kindness",
    "section": "How to continue learning?",
    "text": "How to continue learning?\n\n\nWe have covered a lot of topics\nBut there are many more to explore!",
    "crumbs": [
      "06 Kindness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_kindness.html#bayes-rule",
    "href": "lectures/lec_06_kindness.html#bayes-rule",
    "title": "Lecture VI - Computational Kindness",
    "section": "Bayes’ Rule",
    "text": "Bayes’ Rule\n\nFundamental theorem in probability theory\nUpdates probability of hypothesis based on new evidence\nUsed in statistics, machine learning, and decision-making\n\n. . .\n\n\n\n\n\n\nImportant\n\n\n\nHelps make informed predictions and decisions under uncertainty in the real world!",
    "crumbs": [
      "06 Kindness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_kindness.html#overfitting",
    "href": "lectures/lec_06_kindness.html#overfitting",
    "title": "Lecture VI - Computational Kindness",
    "section": "Overfitting",
    "text": "Overfitting\n\nOccurs when a model learns the training data too well\nCaptures noise and outliers rather than pattern\nResults in poor generalization to new data\n\n. . .\n\n\n\n\n\n\nImportant\n\n\n\nSeveral ways to counter overfitting, e.g. cross-validation.",
    "crumbs": [
      "06 Kindness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_kindness.html#game-theory",
    "href": "lectures/lec_06_kindness.html#game-theory",
    "title": "Lecture VI - Computational Kindness",
    "section": "Game Theory",
    "text": "Game Theory\n\nStrategic interactions among rational decision-makers\nAnalyzes situations with multiple agents and their strategies\n\n. . .\n\n\n\n\n\n\nImportant\n\n\n\nMany applications in economics, politics, and biology!",
    "crumbs": [
      "06 Kindness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_kindness.html#networking",
    "href": "lectures/lec_06_kindness.html#networking",
    "title": "Lecture VI - Computational Kindness",
    "section": "Networking",
    "text": "Networking\n\nStudy of information exchange over networks\nIncludes understanding protocols and data transmission\nOptimizes network resources\n\n. . .\n\n\n\n\n\n\nImportant\n\n\n\nImportant in computer networks, the internet and social life!",
    "crumbs": [
      "06 Kindness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_kindness.html#relaxation",
    "href": "lectures/lec_06_kindness.html#relaxation",
    "title": "Lecture VI - Computational Kindness",
    "section": "Relaxation",
    "text": "Relaxation\n\nSimplifies complex problems to make them more tractable\nInvolves relaxing certain constraints\nProvides insights or approximate solutions",
    "crumbs": [
      "06 Kindness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_kindness.html#how-to-continue-programming",
    "href": "lectures/lec_06_kindness.html#how-to-continue-programming",
    "title": "Lecture VI - Computational Kindness",
    "section": "How to continue programming?",
    "text": "How to continue programming?\n\nThe best way to continue learning is to keep programming in the future\nPotentially, you will continue to do so during your studies\nCoding in your Thesis is a another great way to improve\nTry to find a way to apply programming in your work\nThere are many interesting topics to explore!",
    "crumbs": [
      "06 Kindness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_kindness.html#advent-of-code",
    "href": "lectures/lec_06_kindness.html#advent-of-code",
    "title": "Lecture VI - Computational Kindness",
    "section": "Advent of Code",
    "text": "Advent of Code\n\nAdvent of Code is a fun way to keep programming\nHere you can solve programming puzzles during Advent\nIt is completely free and ad-free and starts each year at 01.12.",
    "crumbs": [
      "06 Kindness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_kindness.html#thats-it-for-the-lecture-series",
    "href": "lectures/lec_06_kindness.html#thats-it-for-the-lecture-series",
    "title": "Lecture VI - Computational Kindness",
    "section": "That’s it for the Lecture Series!",
    "text": "That’s it for the Lecture Series!\n\nWe now have covered the basics of Python\nI hope you enjoyed the lecture and found it helpful\nIf you have questions or feedback, please let me know!\nI wish you all the best for your studies and your career!",
    "crumbs": [
      "06 Kindness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_kindness.html#interesting-literature-to-start",
    "href": "lectures/lec_06_kindness.html#interesting-literature-to-start",
    "title": "Lecture VI - Computational Kindness",
    "section": "Interesting literature to start",
    "text": "Interesting literature to start\n\nChristian, B., & Griffiths, T. (2016). Algorithms to live by: the computer science of human decisions. First international edition. New York, Henry Holt and Company.1",
    "crumbs": [
      "06 Kindness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_kindness.html#books-on-programming",
    "href": "lectures/lec_06_kindness.html#books-on-programming",
    "title": "Lecture VI - Computational Kindness",
    "section": "Books on Programming",
    "text": "Books on Programming\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Here\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n. . .\n\n\n\n\n\n\nNote\n\n\n\nThink Python is a great book to start with. It’s available online for free. Schrödinger Programmiert Python is a great alternative for German students, as it is a very playful introduction to programming with lots of examples.",
    "crumbs": [
      "06 Kindness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_kindness.html#more-literature",
    "href": "lectures/lec_06_kindness.html#more-literature",
    "title": "Lecture VI - Computational Kindness",
    "section": "More Literature",
    "text": "More Literature\nFor more interesting literature, take a look at the literature list of this course.",
    "crumbs": [
      "06 Kindness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_kindness.html#footnotes",
    "href": "lectures/lec_06_kindness.html#footnotes",
    "title": "Lecture VI - Computational Kindness",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThe main inspiration for this lecture. Nils and I have read it and discussed it in depth, always wanting to translate it into a course.↩︎",
    "crumbs": [
      "06 Kindness",
      "Lecture"
    ]
  },
  {
    "objectID": "lectures/lec_06_presentation.html#computational-kindness-1",
    "href": "lectures/lec_06_presentation.html#computational-kindness-1",
    "title": "Lecture VI - Computational Kindness",
    "section": "Computational Kindness",
    "text": "Computational Kindness\n\nQuestion: An idea what that is?\n\n\n\n\nIdea of introducing empathy in algorithms\nConsider human cognitive load and limitations\nMaking choices that reduce mental burden for others\nCreating systems that are easy to understand and interact"
  },
  {
    "objectID": "lectures/lec_06_presentation.html#scheduling-meetings",
    "href": "lectures/lec_06_presentation.html#scheduling-meetings",
    "title": "Lecture VI - Computational Kindness",
    "section": "Scheduling Meetings",
    "text": "Scheduling Meetings\n\nPropose specific times!\nDon’t ask “when are you free?”\nReduces cognitive load for others\nTransforms an open-ended problem\n\n\n\n\n\n\n\n\nImportant\n\n\nNow a simple yes/no decision!"
  },
  {
    "objectID": "lectures/lec_06_presentation.html#communication",
    "href": "lectures/lec_06_presentation.html#communication",
    "title": "Lecture VI - Computational Kindness",
    "section": "Communication",
    "text": "Communication\n\nBe explicit rather than implicit\nProvide clear options instead\nAvoid open-ended questions\nState your preferences\n\n\n\n\n\n\n\n\nImportant\n\n\nAvoid deferring → “I’m fine with whatever”!"
  },
  {
    "objectID": "lectures/lec_06_presentation.html#the-cost-of-flexibility",
    "href": "lectures/lec_06_presentation.html#the-cost-of-flexibility",
    "title": "Lecture VI - Computational Kindness",
    "section": "The Cost of Flexibility",
    "text": "The Cost of Flexibility\n\n“I’m free whenever” seems helpful\nBeing too flexible can be unhelpful\nBut it is not!\n\nForces others to consider all possibilities\nIncreases cognitive load\nMakes decision-making more complex"
  },
  {
    "objectID": "lectures/lec_06_presentation.html#principles",
    "href": "lectures/lec_06_presentation.html#principles",
    "title": "Lecture VI - Computational Kindness",
    "section": "Principles",
    "text": "Principles\n\nReduce Options: Fewer choices lead to better decisions\nBe Explicit: Clear constraints help others decide\nConsider Cognitive Load: Design interactions minimizing mental effort for others\nMake Decisions: Taking responsibility can be kind"
  },
  {
    "objectID": "lectures/lec_06_presentation.html#topics-from-the-lecture",
    "href": "lectures/lec_06_presentation.html#topics-from-the-lecture",
    "title": "Lecture VI - Computational Kindness",
    "section": "Topics from the Lecture",
    "text": "Topics from the Lecture\n\nOptimal Stopping: How to decide when to stop looking for better options.\nExplore/Exploit Tradeoff: Balancing between trying new things and sticking with known options.\nCaching: Storing and reusing information by sticking to a task to improve performance.\nScheduling: Efficiently managing tasks and time.\nRandomness: Understanding and working with uncertainty."
  },
  {
    "objectID": "lectures/lec_06_presentation.html#how-to-continue-learning",
    "href": "lectures/lec_06_presentation.html#how-to-continue-learning",
    "title": "Lecture VI - Computational Kindness",
    "section": "How to continue learning?",
    "text": "How to continue learning?\n\n\nWe have covered a lot of topics\nBut there are many more to explore!"
  },
  {
    "objectID": "lectures/lec_06_presentation.html#bayes-rule",
    "href": "lectures/lec_06_presentation.html#bayes-rule",
    "title": "Lecture VI - Computational Kindness",
    "section": "Bayes’ Rule",
    "text": "Bayes’ Rule\n\nFundamental theorem in probability theory\nUpdates probability of hypothesis based on new evidence\nUsed in statistics, machine learning, and decision-making\n\n\n\n\n\n\n\n\nImportant\n\n\nHelps make informed predictions and decisions under uncertainty in the real world!"
  },
  {
    "objectID": "lectures/lec_06_presentation.html#overfitting",
    "href": "lectures/lec_06_presentation.html#overfitting",
    "title": "Lecture VI - Computational Kindness",
    "section": "Overfitting",
    "text": "Overfitting\n\nOccurs when a model learns the training data too well\nCaptures noise and outliers rather than pattern\nResults in poor generalization to new data\n\n\n\n\n\n\n\n\nImportant\n\n\nSeveral ways to counter overfitting, e.g. cross-validation."
  },
  {
    "objectID": "lectures/lec_06_presentation.html#game-theory",
    "href": "lectures/lec_06_presentation.html#game-theory",
    "title": "Lecture VI - Computational Kindness",
    "section": "Game Theory",
    "text": "Game Theory\n\nStrategic interactions among rational decision-makers\nAnalyzes situations with multiple agents and their strategies\n\n\n\n\n\n\n\n\nImportant\n\n\nMany applications in economics, politics, and biology!"
  },
  {
    "objectID": "lectures/lec_06_presentation.html#networking",
    "href": "lectures/lec_06_presentation.html#networking",
    "title": "Lecture VI - Computational Kindness",
    "section": "Networking",
    "text": "Networking\n\nStudy of information exchange over networks\nIncludes understanding protocols and data transmission\nOptimizes network resources\n\n\n\n\n\n\n\n\nImportant\n\n\nImportant in computer networks, the internet and social life!"
  },
  {
    "objectID": "lectures/lec_06_presentation.html#relaxation",
    "href": "lectures/lec_06_presentation.html#relaxation",
    "title": "Lecture VI - Computational Kindness",
    "section": "Relaxation",
    "text": "Relaxation\n\nSimplifies complex problems to make them more tractable\nInvolves relaxing certain constraints\nProvides insights or approximate solutions"
  },
  {
    "objectID": "lectures/lec_06_presentation.html#how-to-continue-programming",
    "href": "lectures/lec_06_presentation.html#how-to-continue-programming",
    "title": "Lecture VI - Computational Kindness",
    "section": "How to continue programming?",
    "text": "How to continue programming?\n\nThe best way to continue learning is to keep programming in the future\nPotentially, you will continue to do so during your studies\nCoding in your Thesis is a another great way to improve\nTry to find a way to apply programming in your work\nThere are many interesting topics to explore!"
  },
  {
    "objectID": "lectures/lec_06_presentation.html#advent-of-code",
    "href": "lectures/lec_06_presentation.html#advent-of-code",
    "title": "Lecture VI - Computational Kindness",
    "section": "Advent of Code",
    "text": "Advent of Code\n\nAdvent of Code is a fun way to keep programming\nHere you can solve programming puzzles during Advent\nIt is completely free and ad-free and starts each year at 01.12."
  },
  {
    "objectID": "lectures/lec_06_presentation.html#thats-it-for-the-lecture-series",
    "href": "lectures/lec_06_presentation.html#thats-it-for-the-lecture-series",
    "title": "Lecture VI - Computational Kindness",
    "section": "That’s it for the Lecture Series!",
    "text": "That’s it for the Lecture Series!\n\nWe now have covered the basics of Python\nI hope you enjoyed the lecture and found it helpful\nIf you have questions or feedback, please let me know!\nI wish you all the best for your studies and your career!"
  },
  {
    "objectID": "lectures/lec_06_presentation.html#interesting-literature-to-start",
    "href": "lectures/lec_06_presentation.html#interesting-literature-to-start",
    "title": "Lecture VI - Computational Kindness",
    "section": "Interesting literature to start",
    "text": "Interesting literature to start\n\nChristian, B., & Griffiths, T. (2016). Algorithms to live by: the computer science of human decisions. First international edition. New York, Henry Holt and Company.1\n\nThe main inspiration for this lecture. Nils and I have read it and discussed it in depth, always wanting to translate it into a course."
  },
  {
    "objectID": "lectures/lec_06_presentation.html#books-on-programming",
    "href": "lectures/lec_06_presentation.html#books-on-programming",
    "title": "Lecture VI - Computational Kindness",
    "section": "Books on Programming",
    "text": "Books on Programming\n\nDowney, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. Here\nElter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.\n\n\n\n\n\n\n\n\nNote\n\n\nThink Python is a great book to start with. It’s available online for free. Schrödinger Programmiert Python is a great alternative for German students, as it is a very playful introduction to programming with lots of examples."
  },
  {
    "objectID": "lectures/lec_06_presentation.html#more-literature",
    "href": "lectures/lec_06_presentation.html#more-literature",
    "title": "Lecture VI - Computational Kindness",
    "section": "More Literature",
    "text": "More Literature\nFor more interesting literature, take a look at the literature list of this course."
  },
  {
    "objectID": "tutorials/tut_01_01_variables.html",
    "href": "tutorials/tut_01_01_variables.html",
    "title": "Tutorial I.I - Variables and Types",
    "section": "",
    "text": "Welcome to this interactive Python tutorial on variables, types, and algorithmic thinking! We’ll explore these concepts through the lens of optimization problems, specifically using the famous “Secretary Problem” as our running example.\nThe Secretary Problem asks: “If you need to hire the best candidate, and you can only interview candidates one at a time (with no going back), when should you stop and make an offer?” This is a perfect example of optimal stopping and will help us understand how variables and data types play crucial roles in algorithmic thinking. To make the problem more interesting, we will use the Secretary Problem to help us make better dating decisions!\nThe question is thus: When should you stop dating and commit to someone?\nKnown academically as the “Optimal Stopping Problem” or “The Marriage Problem”, it asks: If you want to find the best possible partner, and you can only date one person at a time (no going back to previous dates!), when should you stop dating and propose?\nLet’s learn how to use Python to help us in order to make better dating decisions!",
    "crumbs": [
      "01 Optimal Stopping",
      "01-01 - Variables"
    ]
  },
  {
    "objectID": "tutorials/tut_01_01_variables.html#exercise-1.1---first-date-setup",
    "href": "tutorials/tut_01_01_variables.html#exercise-1.1---first-date-setup",
    "title": "Tutorial I.I - Variables and Types",
    "section": "Exercise 1.1 - First Date Setup",
    "text": "Exercise 1.1 - First Date Setup\nCreate a variable currently_dating and set it to False (because we’re starting our dating journey).\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert currently_dating == False, \"Let's start fresh - set currently_dating to False!\"\nprint(\"Ready to start dating! We have defined the variable `currently_dating` as boolean.\")",
    "crumbs": [
      "01 Optimal Stopping",
      "01-01 - Variables"
    ]
  },
  {
    "objectID": "tutorials/tut_01_01_variables.html#exercise-1.2---date-name",
    "href": "tutorials/tut_01_01_variables.html#exercise-1.2---date-name",
    "title": "Tutorial I.I - Variables and Types",
    "section": "Exercise 1.2 - Date Name",
    "text": "Exercise 1.2 - Date Name\nCreate a variable date_name with your tonight’s date’s name (let’s say \"Mika\").\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert date_name == \"Mika\", \"Let's use 'Mika' as our tonight's date's name\"\nprint(f\"We have defined a string variable for our tonight's date. Now, we are looking for {date_name}!\")",
    "crumbs": [
      "01 Optimal Stopping",
      "01-01 - Variables"
    ]
  },
  {
    "objectID": "tutorials/tut_01_01_variables.html#exercise-2.1---dating-score",
    "href": "tutorials/tut_01_01_variables.html#exercise-2.1---dating-score",
    "title": "Tutorial I.I - Variables and Types",
    "section": "Exercise 2.1 - Dating Score",
    "text": "Exercise 2.1 - Dating Score\nCreate a float variable minimum_rating and set it to 7.0 (our standards are high!). Of course, we don’t objectify people and rate their appearance, thus we rate the compatibility!\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert minimum_rating == 7.0 and isinstance(minimum_rating, float), \"Set your standards (minimum_rating) to 7.0!\"\nprint(f\"We won't settle for less than {minimum_rating}/10, where the minimum rating is defined as a float!\")",
    "crumbs": [
      "01 Optimal Stopping",
      "01-01 - Variables"
    ]
  },
  {
    "objectID": "tutorials/tut_01_01_variables.html#exercise-2.2---dating-history",
    "href": "tutorials/tut_01_01_variables.html#exercise-2.2---dating-history",
    "title": "Tutorial I.I - Variables and Types",
    "section": "Exercise 2.2 - Dating History",
    "text": "Exercise 2.2 - Dating History\nCreate an integer variable past_relationships and set it to 0.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert past_relationships == 0 and isinstance(past_relationships, int), \"Let's start fresh with 0 past relationships\"\nprint(\"Clean slate, although likely not true! We have defined the variable `past_relationships` as an integer and are ready to start dating!\")",
    "crumbs": [
      "01 Optimal Stopping",
      "01-01 - Variables"
    ]
  },
  {
    "objectID": "tutorials/tut_01_01_variables.html#exercise-3.1---decision-point",
    "href": "tutorials/tut_01_01_variables.html#exercise-3.1---decision-point",
    "title": "Tutorial I.I - Variables and Types",
    "section": "Exercise 3.1 - Decision Point",
    "text": "Exercise 3.1 - Decision Point\nConvert the string \"37\" into an integer variable named stopping_point.\n\nstopping_point = \"37\"\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert isinstance(stopping_point, int) and stopping_point == 37, \"Convert '37' to an integer\"\nprint(f\"After person {stopping_point}, we'll get serious about finding the best possible partner.\")\n\n\n\n\n\n\n\n\nTip\n\n\n\nWhen converting strings to numbers:\n\nMake sure the string contains only numeric characters\nUse int() for whole numbers\nUse float() if you need decimal points",
    "crumbs": [
      "01 Optimal Stopping",
      "01-01 - Variables"
    ]
  },
  {
    "objectID": "tutorials/tut_01_01_variables.html#exercise-4.1---profile-message",
    "href": "tutorials/tut_01_01_variables.html#exercise-4.1---profile-message",
    "title": "Tutorial I.I - Variables and Types",
    "section": "Exercise 4.1 - Profile Message",
    "text": "Exercise 4.1 - Profile Message\nWe have already defined the variables name and minimum_rating. Now we want to use them in the context of a formatted string. Create a formatted string profile_message using the variables name and minimum_rating that says “Hello, {name}! Nice to meet you. I hope you are at least {minimum_rating}/10 compatible with me!”.\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert profile_message == \"Hello, Casey! Nice to meet you. I hope you are at least 7.0/10 compatible with me!\", \"Format your first message to Casey correctly!\"\nprint(\"Your message is send - good luck!\")",
    "crumbs": [
      "01 Optimal Stopping",
      "01-01 - Variables"
    ]
  },
  {
    "objectID": "tutorials/tut_01_03_stopping.html",
    "href": "tutorials/tut_01_03_stopping.html",
    "title": "Tutorial I.III - Making Decisions",
    "section": "",
    "text": "Imagine you’re searching for a new apartment. You view a flat - should you take it or keep looking for something better? This is another classic optimal stopping problem! Just like in dating or hiring, you need to decide when to stop searching.\nIn this tutorial, we’ll learn how computers make decisions using if and else statements. These are like the “if this, then that” decisions we make every day!",
    "crumbs": [
      "01 Optimal Stopping",
      "01-03 - Decisions"
    ]
  },
  {
    "objectID": "tutorials/tut_01_03_stopping.html#exercise-1.1---your-first-decision",
    "href": "tutorials/tut_01_03_stopping.html#exercise-1.1---your-first-decision",
    "title": "Tutorial I.III - Making Decisions",
    "section": "Exercise 1.1 - Your First Decision",
    "text": "Exercise 1.1 - Your First Decision\nCreate an if statement that prints “Perfect flat!” if the flat_rating is 10.\n\nflat_rating = 10\n# YOUR CODE BELOW\n\n# Test your answer yourself - the cell should print \"Perfect flat!\" if executed correctly",
    "crumbs": [
      "01 Optimal Stopping",
      "01-03 - Decisions"
    ]
  },
  {
    "objectID": "tutorials/tut_01_03_stopping.html#exercise-2.1---complete-decision",
    "href": "tutorials/tut_01_03_stopping.html#exercise-2.1---complete-decision",
    "title": "Tutorial I.III - Making Decisions",
    "section": "Exercise 2.1 - Complete Decision",
    "text": "Exercise 2.1 - Complete Decision\nWrite an if-else statement that sets decision to “Apply now” if flat_rating is at least 7, and “Keep searching” otherwise.\n\nflat_rating = 6\ndecision = \"\"\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert decision == \"Keep searching\", \"The decision should be 'Keep searching' as the flat rating is less than 7\"\nprint(f\"Decision: {decision} as the flat rating is {flat_rating}\")\n\n\n\n\n\n\n\n\nTip\n\n\n\nWriting Better If-Else Statements:\n\nKeep your conditions simple and readable\nUse meaningful variable names\nConsider what should happen in both cases\nTest both paths to make sure they work",
    "crumbs": [
      "01 Optimal Stopping",
      "01-03 - Decisions"
    ]
  },
  {
    "objectID": "tutorials/tut_01_03_stopping.html#exercise-3.1---apartment-categories",
    "href": "tutorials/tut_01_03_stopping.html#exercise-3.1---apartment-categories",
    "title": "Tutorial I.III - Making Decisions",
    "section": "Exercise 3.1 - Apartment Categories",
    "text": "Exercise 3.1 - Apartment Categories\nCreate a variable flat_category that is:\n\n“Luxury” if rating is 9 or 10\n“Premium” if rating is 7 or 8\n“Standard” if rating is 5 or 6\n“Basic” for anything lower\n\n\nflat_rating = 8\nflat_category = \"\"\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert flat_category == \"Premium\", \"The flat category should be 'Premium' as the flat rating is 8\"\nprint(f\"Flat Category: {flat_category} as the flat rating is {flat_rating}\")",
    "crumbs": [
      "01 Optimal Stopping",
      "01-03 - Decisions"
    ]
  },
  {
    "objectID": "tutorials/tut_01_03_stopping.html#exercise-4.1---real-world-flat-hunting",
    "href": "tutorials/tut_01_03_stopping.html#exercise-4.1---real-world-flat-hunting",
    "title": "Tutorial I.III - Making Decisions",
    "section": "Exercise 4.1 - Real World Flat Hunting",
    "text": "Exercise 4.1 - Real World Flat Hunting\nCreate a variable should_apply that is True if:\n\nThe flat rating is at least 8, OR\nThe flat rating is at least 6 AND we’ve been searching for 3 weeks or more\n\n\nflat_rating = 6\nweeks_searching = 4\nshould_apply = False\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert should_apply == True, \"The flat rating is 6 and we've been searching for 4 weeks, so we should apply\"\nprint(f\"Should we apply? {should_apply} as the flat rating is {flat_rating} and we've been searching for {weeks_searching} weeks\")",
    "crumbs": [
      "01 Optimal Stopping",
      "01-03 - Decisions"
    ]
  },
  {
    "objectID": "tutorials/tut_01_03_stopping.html#exercise-5.1---implement-the-rule",
    "href": "tutorials/tut_01_03_stopping.html#exercise-5.1---implement-the-rule",
    "title": "Tutorial I.III - Making Decisions",
    "section": "Exercise 5.1 - Implement the Rule",
    "text": "Exercise 5.1 - Implement the Rule\nAdjust the code below to change the variable make_application to True if:\n\nWe’ve seen at least 37% of available flats (use 15 total flats), AND\nThe current flat is better than the best we’ve seen so far\n\n\nflats_seen = 6  # We've seen 6 flats\ntotal_viewings = 15  # We plan to view 15 flats in total\ncurrent_rating = 9\nbest_rating_so_far = 8\nmake_application = False\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your answer\nassert make_application == True, \"The flat rating is 9 and we've been searching for 4 weeks, so we should apply\"\nprint(f\"Should we apply for this flat? {make_application}\")",
    "crumbs": [
      "01 Optimal Stopping",
      "01-03 - Decisions"
    ]
  },
  {
    "objectID": "tutorials/tut_02_02_loops.html",
    "href": "tutorials/tut_02_02_loops.html",
    "title": "Tutorial II.II - Loops",
    "section": "",
    "text": "Loops are a fundamental concept in programming that allow us to repeat a set of instructions multiple times. They’re essential for tasks that require processing large datasets, iterating through complex sequences, or automating repetitive processes. In the context of clinical trials, loops help us systematically analyze multiple treatments or patient outcomes.\n\n\n\n\n\n\nNote\n\n\n\nIf a cell is marked with YOUR CODE BELOW, you are expected to write your code in that cell.",
    "crumbs": [
      "02 Explore/Exploit",
      "02-02 - Loops"
    ]
  },
  {
    "objectID": "tutorials/tut_02_02_loops.html#break-and-continue-statements",
    "href": "tutorials/tut_02_02_loops.html#break-and-continue-statements",
    "title": "Tutorial II.II - Loops",
    "section": "Break and Continue Statements",
    "text": "Break and Continue Statements\n\nbreak: Immediately exits the loop\ncontinue: Skips to the next iteration\n\n\nefficacy_scores = [65, 85, 45, 82, 58]\nfor score in efficacy_scores:\n    if score &lt; 50:  # Skip low efficacy treatments\n        continue\n    print(f\"Treatment efficacy: {score}%\")\n    if score &gt;= 85:  # We found a highly effective treatment!\n        print(\"Found a promising treatment - consider focusing on this one!\")\n        break\n\nTreatment efficacy: 65%\nTreatment efficacy: 85%\nFound a promising treatment - consider focusing on this one!",
    "crumbs": [
      "02 Explore/Exploit",
      "02-02 - Loops"
    ]
  },
  {
    "objectID": "tutorials/tut_02_02_loops.html#tuple-unpacking",
    "href": "tutorials/tut_02_02_loops.html#tuple-unpacking",
    "title": "Tutorial II.II - Loops",
    "section": "Tuple Unpacking",
    "text": "Tuple Unpacking\nTuple unpacking is a powerful feature that allows you to assign multiple variables in a single statement. It’s often used in for loops to access elements from a list or tuple. For example:\n\ntreatments = [(\"Standard Drug\", 75), (\"New Drug A\", 85), (\"Alternative B\", 68), (\"New Drug C\", 92)]\nfor name, efficacy in treatments:\n    print(f\"Treatment: {name}, Efficacy: {efficacy}%\")\n\nTreatment: Standard Drug, Efficacy: 75%\nTreatment: New Drug A, Efficacy: 85%\nTreatment: Alternative B, Efficacy: 68%\nTreatment: New Drug C, Efficacy: 92%",
    "crumbs": [
      "02 Explore/Exploit",
      "02-02 - Loops"
    ]
  },
  {
    "objectID": "tutorials/tut_02_02_loops.html#exercise-1.1---count-adverse-events",
    "href": "tutorials/tut_02_02_loops.html#exercise-1.1---count-adverse-events",
    "title": "Tutorial II.II - Loops",
    "section": "Exercise 1.1 - Count Adverse Events",
    "text": "Exercise 1.1 - Count Adverse Events\nTrack the number of treatments that had too many adverse events (more than 5) with a for loop. Add 1 to high_adverse_count for each treatment that had more than 5 adverse events.\n\nadverse_events = [3, 7, 2, 6, 8, 1, 4]\nhigh_adverse_count = 0\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Assertions to verify your solution\nassert isinstance(high_adverse_count, int), \"high_adverse_count should be an integer\"\nassert high_adverse_count == 3, \"There should be exactly 3 treatments with high adverse events\"\nprint(\"Success! You've correctly counted the high adverse event treatments.\")",
    "crumbs": [
      "02 Explore/Exploit",
      "02-02 - Loops"
    ]
  },
  {
    "objectID": "tutorials/tut_02_02_loops.html#exercise-1.2---calculate-average-treatment-efficacy",
    "href": "tutorials/tut_02_02_loops.html#exercise-1.2---calculate-average-treatment-efficacy",
    "title": "Tutorial II.II - Loops",
    "section": "Exercise 1.2 - Calculate Average Treatment Efficacy",
    "text": "Exercise 1.2 - Calculate Average Treatment Efficacy\nCalculate the average efficacy of the treatments using a for loop. First, add each rate to the total. Then, calculate the average by dividing the total by the number of treatments.\n\nefficacy_rates = [78, 72, 85, 65, 80]\naverage_efficacy = 0\ntotal = 0\n# YOUR CODE BELOW\n\n\n\nCode\n# Assertions to verify your solution\nassert isinstance(average_efficacy, (int, float)), \"average_efficacy should be a number\"\nassert average_efficacy == 76, \"average_efficacy should be 76\"\nprint(\"Success! Your average calculation is correct.\")\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nAdd each rate to the total\nCalculate the average by dividing the total by the number of treatments\nNote that len(efficacy_rates) gives you the count of treatments",
    "crumbs": [
      "02 Explore/Exploit",
      "02-02 - Loops"
    ]
  },
  {
    "objectID": "tutorials/tut_02_02_loops.html#exercise-1.3---find-promising-treatments",
    "href": "tutorials/tut_02_02_loops.html#exercise-1.3---find-promising-treatments",
    "title": "Tutorial II.II - Loops",
    "section": "Exercise 1.3 - Find Promising Treatments",
    "text": "Exercise 1.3 - Find Promising Treatments\nAdd all treatments with an efficacy rate of at least 80% to the list promising_treatments.\n\ntreatments = [(\"Standard Drug\", 75), (\"New Drug A\", 85), (\"Alternative B\", 68), (\"New Drug C\", 92)]\npromising_treatments = []\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Assertions to verify your solution\nassert len(promising_treatments) == 2, \"Should find exactly 2 promising treatments\"\nassert all(isinstance(t, str) for t in promising_treatments), \"promising_treatments should contain strings\"\nassert \"New Drug A\" in promising_treatments, \"New Drug A should be in promising_treatments\"\nprint(\"Success! You've correctly identified the promising treatments.\")\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nEach treatment is represented as a tuple: (name, efficacy_rate)\nYou need to check if the efficacy rate (second element) is ≥ 80%\nIf it meets the criteria, add the treatment name (first element) to promising_treatments\nYou could use tuple unpacking in your loop for cleaner code",
    "crumbs": [
      "02 Explore/Exploit",
      "02-02 - Loops"
    ]
  },
  {
    "objectID": "tutorials/tut_02_02_loops.html#exercise-2.1---breakthrough-treatment",
    "href": "tutorials/tut_02_02_loops.html#exercise-2.1---breakthrough-treatment",
    "title": "Tutorial II.II - Loops",
    "section": "Exercise 2.1 - Breakthrough Treatment",
    "text": "Exercise 2.1 - Breakthrough Treatment\nUse a while loop to find the first treatment with an efficacy score of at least 88. Count the number of trials it takes to find this treatment and store it in the variable trials. Save the efficacy score of the breakthrough treatment in the variable current_efficacy. Note, that the efficacy_scores list is indexed from 0!\n\nefficacy_scores = [72, 68, 78, 88, 71, 65, 59]\ncurrent_efficacy = 0\ntrials = 0\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Assertions to verify your solution\nassert trials == 4, \"Should take exactly 4 trials to find the breakthrough\"\nassert current_efficacy == 88, \"Should find efficacy score of 88\"\nprint(\"Success! You've found the breakthrough treatment efficiently.\")",
    "crumbs": [
      "02 Explore/Exploit",
      "02-02 - Loops"
    ]
  },
  {
    "objectID": "tutorials/tut_02_02_loops.html#exercise-2.2---resource-management",
    "href": "tutorials/tut_02_02_loops.html#exercise-2.2---resource-management",
    "title": "Tutorial II.II - Loops",
    "section": "Exercise 2.2 - Resource Management",
    "text": "Exercise 2.2 - Resource Management\nContinue trials until either resources are depleted or a breakthrough (efficacy &gt;= 90) is found. Count the number of trials it takes to find this treatment and store it in the variable trials_conducted. Save the efficacy score of the breakthrough treatment in the variable current_best. Note, that the efficacy_scores list is indexed from 0!\n\nresources = 100\ncost_per_trial = 25\ncurrent_best = 0\ntrials_conducted = 0\nefficacy_scores = [75, 82, 88, 92, 85, 78]  # Simulated trial results\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Assertions to verify your solution\nassert trials_conducted == 4, \"Should conduct 4 trials\"\nassert current_best &gt;= 90, \"Should find a treatment with &gt;= 90 efficacy\"\nassert resources &gt;= 0, \"Should not exceed resource limit\"\nprint(\"Success! You've managed resources effectively.\")\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nTrack both resources and efficacy simultaneously\nStop if either:\n\nResources fall below cost_per_trial\nA breakthrough treatment (≥ 90% efficacy) is found\n\nRemember to deduct costs for each trial",
    "crumbs": [
      "02 Explore/Exploit",
      "02-02 - Loops"
    ]
  },
  {
    "objectID": "tutorials/tut_03_01_recap.html",
    "href": "tutorials/tut_03_01_recap.html",
    "title": "Tutorial III.I - Recap with Caching",
    "section": "",
    "text": "Throughout our previous tutorials, we’ve explored fundamental programming concepts through the lens of everyday decision-making. Now, let’s connect these concepts to another important algorithmic idea: caching.\nThe concepts we’ve learned map directly to caching principles:\n\nVariables → Like cache entries (storing specific pieces of information)\nComparisons → Like cache eviction policies (what we keep/remove)\nLists → Like cache storage (what we remember)\nLoops → Like cache maintenance (how we update our knowledge)\n\n\n\n\n\n\n\nNoteWhat is Caching?\n\n\n\nRemember today’s lecture. Think of caching for example like your brain’s short-term memory. When you frequently need certain information (like your friend’s phone number), you keep it readily available instead of looking it up each time.",
    "crumbs": [
      "03 Caching",
      "03-01 - Recap"
    ]
  },
  {
    "objectID": "tutorials/tut_03_01_recap.html#exercise-1.1-create-a-simple-cache-system-for-your-favorite-restaurant-orders",
    "href": "tutorials/tut_03_01_recap.html#exercise-1.1-create-a-simple-cache-system-for-your-favorite-restaurant-orders",
    "title": "Tutorial III.I - Recap with Caching",
    "section": "Exercise 1.1: Create a simple cache system for your favorite restaurant orders",
    "text": "Exercise 1.1: Create a simple cache system for your favorite restaurant orders\n\nCreate a variable last_meal for the last meal you ordered (as a string)\nStore its price in a variable price (as a float)\nWhether you would order it again in a variable would_order_again (as a boolean)\nHow many times you’ve ordered it in the last month in a variable num_orders (as an integer)\n\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Assertions to verify your solution\nassert isinstance(last_meal, str), \"last_meal should be a string\"\nassert isinstance(price, float), \"price should be a float\"\nassert isinstance(would_order_again, bool), \"would_order_again should be a boolean\"\nassert isinstance(num_orders, int), \"num_orders should be an integer\"\nprint(f\"Last meal: {last_meal}, price: {price}, would order again: {would_order_again}, number of orders in the last month: {num_orders}\")",
    "crumbs": [
      "03 Caching",
      "03-01 - Recap"
    ]
  },
  {
    "objectID": "tutorials/tut_03_01_recap.html#exercise-2.1-create-a-decision-system-for-your-favorite-song",
    "href": "tutorials/tut_03_01_recap.html#exercise-2.1-create-a-decision-system-for-your-favorite-song",
    "title": "Tutorial III.I - Recap with Caching",
    "section": "Exercise 2.1: Create a decision system for your favorite song",
    "text": "Exercise 2.1: Create a decision system for your favorite song\n\nWrite a small decision system for your cached favorite song favorite_song\nUse at least two conditions based on the song’s play count and last played time (play_count and last_played_minutes_ago)\nYou can set the parameters for the conditions yourself\nSave the result of the decision in a variable should_evict\nPrint the result of whether we should evict the song or not\n\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Assertions to verify your solution\nassert isinstance(favorite_song, str), \"favorite_song should be a string\"\nassert isinstance(play_count, int), \"play_count should be an integer\"\nassert isinstance(last_played_minutes_ago, int), \"last_played_minutes_ago should be an integer\"\nassert isinstance(should_evict, bool), \"should_evict should be a boolean\"\nprint(f\"Favorite song: {favorite_song}, play count: {play_count}, last played minutes ago: {last_played_minutes_ago}, should evict: {should_evict}\")",
    "crumbs": [
      "03 Caching",
      "03-01 - Recap"
    ]
  },
  {
    "objectID": "tutorials/tut_03_01_recap.html#exercise-3.1-create-a-shopping-cart-cache",
    "href": "tutorials/tut_03_01_recap.html#exercise-3.1-create-a-shopping-cart-cache",
    "title": "Tutorial III.I - Recap with Caching",
    "section": "Exercise 3.1: Create a shopping cart cache",
    "text": "Exercise 3.1: Create a shopping cart cache\n\nMake a list shopping_cart of five recently viewed items in your shopping cart\nCreate tuples for the item details (name and price) and add them to the list\nEnsure that the name is a string and the price is a float\n\n\n\n\n\n\n\nTip\n\n\n\nFirst, create a list. Inside the list, the entries should be tuples of the item name and price.\n\n\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Assertions to verify your solution\nassert len(shopping_cart) == 5, \"shopping_cart should have 5 items\"\nassert isinstance(shopping_cart, list), \"shopping_cart should be a list\"\nassert all(isinstance(item, tuple) for item in shopping_cart), \"All items in shopping_cart should be tuples\"\nassert all(isinstance(item[0], str) and isinstance(item[1], (int, float)) for item in shopping_cart), \"All items in shopping_cart should be tuples with a string and a number\"\nprint(\"Great job! Your shopping cart is ready.\")",
    "crumbs": [
      "03 Caching",
      "03-01 - Recap"
    ]
  },
  {
    "objectID": "tutorials/tut_03_01_recap.html#exercise-4.1-clean-up-a-browser-history-cache",
    "href": "tutorials/tut_03_01_recap.html#exercise-4.1-clean-up-a-browser-history-cache",
    "title": "Tutorial III.I - Recap with Caching",
    "section": "Exercise 4.1: Clean up a browser history cache",
    "text": "Exercise 4.1: Clean up a browser history cache\n\nWrite a loop to remove sites with low visit counts\nIf the site has been visited less than 6 times, remove it from the cache\nPrint the browser history after cleanup\n\n\n\n\n\n\n\nTip\n\n\n\nBe careful with the loop. You need to iterate over the list and remove items from it. If you remove items directly from the list while iterating over it, you won’t get the correct answer, as the list will change size while you iterate over it. Thus, you first need to create a list of items to keep and at the end replace the old list with the new one.\n\n\n\nbrowser_history = [\n    (\"google.com\", 10),\n    (\"youtube.de\", 5),\n    (\"amazon.de\", 1),\n    (\"netflix.de\", 2),\n    (\"github.com\", 15)\n]\n# YOUR CODE BELOW\n\n\n\nCode\n# Assertions to verify your solution\nassert len(browser_history) == 2, \"browser_history should have 2 items\"\nassert isinstance(browser_history, list), \"browser_history should be a list\"\nassert all(isinstance(item, tuple) for item in browser_history), \"All items in browser_history should be tuples\"",
    "crumbs": [
      "03 Caching",
      "03-01 - Recap"
    ]
  },
  {
    "objectID": "tutorials/tut_03_03_packages.html",
    "href": "tutorials/tut_03_03_packages.html",
    "title": "Tutorial III.III - Package Management",
    "section": "",
    "text": "Welcome to this guided tutorial on understanding packages and package management in Python! We’ll explore this concept through the lens of library management - how libraries organize, maintain, and share their resources.\nThink of Python as your local library’s main building. Just like a library has:\n\nA main collection (Python’s standard library)\nDifferent sections (third-party packages)\nA catalog system (a package manager — we use uv)\nMultiple branches (virtual environments / project folders)\n\n\n\nLet’s break this down:\n\nStandard Library: Like the core collection every library branch has:\n\nPython comes with essential tools built-in\nData structures (lists, dictionaries, etc.)\nMathematical functions (sin, cos, sqrt, etc.)\nRandom numbers (random, choice, etc.)\n\nThird-Party Packages: Similar to specialized sections in a library:\n\nData analysis packages (pandas, numpy) → Research section\nVisualization packages (matplotlib, seaborn) → Art books\nWeb frameworks (Django, Flask) → Technical manuals\nMachine learning packages (scikit-learn) → Advanced studies section\n\nPackage Manager (uv): Works like the library’s catalog:\n\nInstalling packages → Ordering new books\nUpdating packages → Replacing with newer editions\nUninstalling packages → Removing outdated books\nDependencies → “You must read Book A before Book B”\n\nProject Environments (managed automatically by uv): Like different library branches:\n\nEach branch can have its own collection of books (packages)\nDifferent editions of the same book (package versions)\nSpecialized sections for different purposes (project-specific dependencies)\n\n\nThe best part? Most Python packages are free to use, thanks to the open-source community!\n\n\n\n\n\n\nNote\n\n\n\nWe use uv in this course for Python version management, virtual environments, and packages. See the separate guide for more details: uv setup.",
    "crumbs": [
      "03 Caching",
      "03-03 - Packages"
    ]
  },
  {
    "objectID": "tutorials/tut_03_03_packages.html#in-more-detail",
    "href": "tutorials/tut_03_03_packages.html#in-more-detail",
    "title": "Tutorial III.III - Package Management",
    "section": "",
    "text": "Let’s break this down:\n\nStandard Library: Like the core collection every library branch has:\n\nPython comes with essential tools built-in\nData structures (lists, dictionaries, etc.)\nMathematical functions (sin, cos, sqrt, etc.)\nRandom numbers (random, choice, etc.)\n\nThird-Party Packages: Similar to specialized sections in a library:\n\nData analysis packages (pandas, numpy) → Research section\nVisualization packages (matplotlib, seaborn) → Art books\nWeb frameworks (Django, Flask) → Technical manuals\nMachine learning packages (scikit-learn) → Advanced studies section\n\nPackage Manager (uv): Works like the library’s catalog:\n\nInstalling packages → Ordering new books\nUpdating packages → Replacing with newer editions\nUninstalling packages → Removing outdated books\nDependencies → “You must read Book A before Book B”\n\nProject Environments (managed automatically by uv): Like different library branches:\n\nEach branch can have its own collection of books (packages)\nDifferent editions of the same book (package versions)\nSpecialized sections for different purposes (project-specific dependencies)\n\n\nThe best part? Most Python packages are free to use, thanks to the open-source community!\n\n\n\n\n\n\nNote\n\n\n\nWe use uv in this course for Python version management, virtual environments, and packages. See the separate guide for more details: uv setup.",
    "crumbs": [
      "03 Caching",
      "03-03 - Packages"
    ]
  },
  {
    "objectID": "tutorials/tut_03_03_packages.html#exercise-1.1---use-the-math-library",
    "href": "tutorials/tut_03_03_packages.html#exercise-1.1---use-the-math-library",
    "title": "Tutorial III.III - Package Management",
    "section": "Exercise 1.1 - Use the math library",
    "text": "Exercise 1.1 - Use the math library\nUse the math library to calculate the square root of 256. Call the result square_root.\n\n# YOUR CODE BELOW\n\n\n\nCode\nassert square_root == 16\nprint(f\"Great job! The square root of 256 is {square_root}!\")",
    "crumbs": [
      "03 Caching",
      "03-03 - Packages"
    ]
  },
  {
    "objectID": "tutorials/tut_03_03_packages.html#exercise-1.2---use-the-random-library",
    "href": "tutorials/tut_03_03_packages.html#exercise-1.2---use-the-random-library",
    "title": "Tutorial III.III - Package Management",
    "section": "Exercise 1.2 - Use the random library",
    "text": "Exercise 1.2 - Use the random library\nUse the random library to generate a random number between 1 and 25. Call the result random_number.\n\n\nCode\nassert random_number &gt;= 1 and random_number &lt;= 25\nprint(f\"Good! You generated a random integer {random_number} between 1 and 25!\")",
    "crumbs": [
      "03 Caching",
      "03-03 - Packages"
    ]
  },
  {
    "objectID": "tutorials/tut_03_03_packages.html#exercise-2.1---check-your-uv-installation",
    "href": "tutorials/tut_03_03_packages.html#exercise-2.1---check-your-uv-installation",
    "title": "Tutorial III.III - Package Management",
    "section": "Exercise 2.1 - Check your uv installation",
    "text": "Exercise 2.1 - Check your uv installation\nOpen a terminal (not the Python REPL) and run:\nuv --version\nYou should see a version number.\nThen confirm your Python version (after installing one via uv if needed):\nuv run python --version",
    "crumbs": [
      "03 Caching",
      "03-03 - Packages"
    ]
  },
  {
    "objectID": "tutorials/tut_03_03_packages.html#exercise-3.1---add-pandas",
    "href": "tutorials/tut_03_03_packages.html#exercise-3.1---add-pandas",
    "title": "Tutorial III.III - Package Management",
    "section": "Exercise 3.1 - Add pandas",
    "text": "Exercise 3.1 - Add pandas\nInside a uv-initialized project directory, run:\nuv add pandas\nThis: - Resolves dependencies - Adds pandas to pyproject.toml - Installs it into the project’s virtual environment\nYou can test if the installation was successful by running:\n\n\nCode\n# Test your answer\ntry:\n    import pandas\n    print(\"pandas installed successfully!\")\nexcept ImportError:\n    print(\"pandas was not installed correctly\")\n\n\n(If you see an import error, verify you are inside the project folder you initialized with uv init.)\nVirtual environments are like having different library branches. Each branch can have:\n\nIts own collection of books (packages)\nDifferent editions of the same book (package versions)\nSpecialized sections for different purposes (project-specific dependencies)\n\nThis separation ensures that:\n\nChanges in one branch don’t affect others (project isolation)\nEach branch can be optimized for its community (project-specific dependencies)\nYou can experiment without affecting the main collection (development safety)\n\nFor now, you don’t need to worry about virtual environments except for the one we created now. This is more advanced and thus not necessary for this tutorial (or lecture). But it’s good to know that they exist and that you can use them to manage your packages.",
    "crumbs": [
      "03 Caching",
      "03-03 - Packages"
    ]
  },
  {
    "objectID": "tutorials/tut_04_02_dicts.html",
    "href": "tutorials/tut_04_02_dicts.html",
    "title": "Tutorial IV.II - Dictionaries",
    "section": "",
    "text": "Welcome to this tutorial on dictionaries in Python! In the realm of personal task scheduling, organizing tasks efficiently is crucial. Imagine managing your daily activities like checking emails, planning finances, and scheduling meetings. Python’s dictionaries can be a helpful tool for handling such tasks by allowing you to store and retrieve information using key-value pairs. As always, follow the structured instructions, implement your code in the designated blocks, and affirm your comprehension with assert statements.",
    "crumbs": [
      "04 Scheduling",
      "11 - Dictionaries"
    ]
  },
  {
    "objectID": "tutorials/tut_04_02_dicts.html#exercise-1.1---create-and-modify-a-dictionary",
    "href": "tutorials/tut_04_02_dicts.html#exercise-1.1---create-and-modify-a-dictionary",
    "title": "Tutorial IV.II - Dictionaries",
    "section": "Exercise 1.1 - Create and Modify a Dictionary",
    "text": "Exercise 1.1 - Create and Modify a Dictionary\nAdd a new task called “Prepare Presentation” with the priority level 5 to the existing tasks dictionary. Note, that you will have to execute the code cell above that creates the dictionary first before you can add the new task!\n\n# YOUR CODE BELOW\n\n\n# Test your answer\nassert \"Prepare Presentation\" in tasks, \"The task 'Prepare Presentation' was not added to the dictionary.\"\nprint(\"Great! You've successfully added a new task to the tasks dictionary.\")",
    "crumbs": [
      "04 Scheduling",
      "11 - Dictionaries"
    ]
  },
  {
    "objectID": "tutorials/tut_04_02_dicts.html#exercise-1.2---check-if-a-key-exists",
    "href": "tutorials/tut_04_02_dicts.html#exercise-1.2---check-if-a-key-exists",
    "title": "Tutorial IV.II - Dictionaries",
    "section": "Exercise 1.2 - Check if a Key Exists",
    "text": "Exercise 1.2 - Check if a Key Exists\nCheck if the key “Team Meeting” exists in the tasks dictionary using the in operator and a conditional statement. If it exists, save the message: 'Team Meeting is in the dictionary' to the variable message. If it does not exist, save the message: 'Team Meeting is not in the dictionary' to the variable message. Finally, print the value of the message variable.\n\n# YOUR CODE BELOW\n\n\n# Test your answer\nassert message == \"Team Meeting is in the dictionary\", \"The message is not correct. It should be 'Team Meeting is in the dictionary'.\"\nprint(\"Great! You've successfully checked if a key exists in the dictionary.\")",
    "crumbs": [
      "04 Scheduling",
      "11 - Dictionaries"
    ]
  },
  {
    "objectID": "tutorials/tut_04_02_dicts.html#exercise-1.3---change-the-value-of-a-key",
    "href": "tutorials/tut_04_02_dicts.html#exercise-1.3---change-the-value-of-a-key",
    "title": "Tutorial IV.II - Dictionaries",
    "section": "Exercise 1.3 - Change the Value of a Key",
    "text": "Exercise 1.3 - Change the Value of a Key\nChange the value associated with the key “Check Emails” to 6.\n\n# YOUR CODE BELOW\n\n\n# Test your answer\nassert tasks[\"Check Emails\"] == 6, \"The value associated with the key 'Check Emails' is not correct. It should be 6.\"\nprint(\"Great! You've successfully changed the value of a key in the dictionary.\")",
    "crumbs": [
      "04 Scheduling",
      "11 - Dictionaries"
    ]
  },
  {
    "objectID": "tutorials/tut_04_02_dicts.html#exercise-2.1---compute-the-average-priority",
    "href": "tutorials/tut_04_02_dicts.html#exercise-2.1---compute-the-average-priority",
    "title": "Tutorial IV.II - Dictionaries",
    "section": "Exercise 2.1 - Compute the Average Priority",
    "text": "Exercise 2.1 - Compute the Average Priority\nCompute the average priority of the tasks in the tasks dictionary. Save the result to the variable average_priority.\n\n# YOUR CODE BELOW\n\n\n# Test your answer\nassert len(tasks) == 4, \"The number of tasks is not correct. It should be 4 based on the previous excercises.\"\nassert average_priority == 4.25, \"The average priority is not correct. It should be 4.25.\"\nprint(\"Great! You've successfully computed the average priority of the tasks.\")",
    "crumbs": [
      "04 Scheduling",
      "11 - Dictionaries"
    ]
  },
  {
    "objectID": "tutorials/tut_04_02_dicts.html#exercise-2.2---get-the-task-with-the-highest-priority",
    "href": "tutorials/tut_04_02_dicts.html#exercise-2.2---get-the-task-with-the-highest-priority",
    "title": "Tutorial IV.II - Dictionaries",
    "section": "Exercise 2.2 - Get the Task with the Highest Priority",
    "text": "Exercise 2.2 - Get the Task with the Highest Priority\nGet the task with the highest priority from the tasks dictionary. Save the result to the variable highest_priority_task. Note, that a priority of 1 is the highest priority.\n\n# YOUR CODE BELOW\n\n\n# Test your answer\nassert highest_priority_task == \"Liquidity Planning\", f\"The task {highest_priority_task} as the task with the highest priority is not correct. It should be 'Liquidity Planning'.\"\nprint(\"Great! You've successfully gotten the task with the highest priority.\")",
    "crumbs": [
      "04 Scheduling",
      "11 - Dictionaries"
    ]
  },
  {
    "objectID": "tutorials/tut_04_02_dicts.html#exercise-2.3---remove-a-task",
    "href": "tutorials/tut_04_02_dicts.html#exercise-2.3---remove-a-task",
    "title": "Tutorial IV.II - Dictionaries",
    "section": "Exercise 2.3 - Remove a Task",
    "text": "Exercise 2.3 - Remove a Task\nFirst, check if the key \"Liquidity Planning\" exists in the tasks dictionary. If it exists, remove it using the appropriate method.\n\n\n\n\n\n\nTip\n\n\n\nYou can use the del() function to remove a key from a dictionary.\n\n\n\n# YOUR CODE BELOW\n\n\n# Test your answer\nassert \"Liquidity Planning\" not in tasks, \"The task 'Liquidity Planning' was not removed from the dictionary.\"\nprint(\"Great! You've successfully removed a task from the dictionary.\")",
    "crumbs": [
      "04 Scheduling",
      "11 - Dictionaries"
    ]
  },
  {
    "objectID": "tutorials/tut_04_02_dicts.html#conclusion",
    "href": "tutorials/tut_04_02_dicts.html#conclusion",
    "title": "Tutorial IV.II - Dictionaries",
    "section": "Conclusion",
    "text": "Conclusion\nGreat! You’ve just navigated through the basics of dictionaries in Python. Dictionaries are powerful data structures that allow for efficient data organization and retrieval. Remember:\n\nDictionaries can store information using key-value pairs\nAccessing them using keys is efficient and easier as accessing them using indices\nLoops can iterate over dictionaries to perform operations on each key-value pair",
    "crumbs": [
      "04 Scheduling",
      "11 - Dictionaries"
    ]
  },
  {
    "objectID": "tutorials/tut_05_02_recap.html",
    "href": "tutorials/tut_05_02_recap.html",
    "title": "Tutorial V.II - Recap with Randomness",
    "section": "",
    "text": "From now on, it is rather difficult to give you tasks that you cannot solve within minutes by yourself with the help of AI. Therefore, today’s tutorial will be more open-ended than usual. All tasks are designed to be solved together with AI, but you are nonetheless the human in the loop. Thus, your responsiblities are to control the AI and to learn how to use it by doing. Instructions and explanations will only be given sparsely, as you are encouraged to use AI to ask for help and explanations to explore the tasks on your own.\nLet’s explore how randomness affects our daily decision-making. As always, we will use Python and simulate various scenarios where randomness plays a crucial role.",
    "crumbs": [
      "05 Randomness",
      "14 - Recap"
    ]
  },
  {
    "objectID": "tutorials/tut_05_02_recap.html#exercise-1.1---the-37-rule",
    "href": "tutorials/tut_05_02_recap.html#exercise-1.1---the-37-rule",
    "title": "Tutorial V.II - Recap with Randomness",
    "section": "Exercise 1.1 - The 37% Rule",
    "text": "Exercise 1.1 - The 37% Rule\nLet’s implement the 37% rule from Optimal Stopping by using random candidates. Your task is to simulate the process of selecting the best candidate out of a list of random candidates. Remember, the 37% rule says that you should reject the first 37% of candidates and then select the next candidate who is better than all previous candidates.\nFirst, let’s import the necessary library:\n\nimport random\n\nIn total, you have 32 candidates. Screen the candidates one by one and compute the best_candidate_index to find the best candidate.\n\n\n\n\n\n\nTipHow to start with AI pair programming\n\n\n\n\nIn Cursor, you can select the code or text you want to work with and then press Ctrl+L to open the chat.\nIn the chat, you can ask the AI to help you complete the task or ask it to explain the code, the task, or related concepts\nWhile writing code, you can press Ctrl+K to let the AI help you write the code directly in the editor.\nFurthermore, the AI will try to understand your code and might make suggestions on how to improve it or on how to continue. Just press TAB to accept a suggestion.\n\n\n\n\nrandom.seed(42) # Sets the random seed for reproducibility\ncandidates = [random.random() for _ in range(32)]\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your solution with the following code\nassert best_candidate_index == 24, \"The selected candidate is not the best one\"\nprint(r\"All tests passed, you have successfully implemented the 37% rule!\")",
    "crumbs": [
      "05 Randomness",
      "14 - Recap"
    ]
  },
  {
    "objectID": "tutorials/tut_05_02_recap.html#exercise-2.1---visiting-restaurants",
    "href": "tutorials/tut_05_02_recap.html#exercise-2.1---visiting-restaurants",
    "title": "Tutorial V.II - Recap with Randomness",
    "section": "Exercise 2.1 - Visiting Restaurants",
    "text": "Exercise 2.1 - Visiting Restaurants\nImagine you’re new to a city with 10 restaurants. Each restaurant has a “true” quality rating (unknown to you) between 0 and 5 stars. Each time you visit a restaurant, you get to experience its rating. In total, you will visit restaurants 15 times.\nYour goal is to create a simulation that computes the average satisfaction over 15 days based on an explore vs. exploit strategy. First, you should try each restaurant once (pure exploration). Then, you should just exploit your favorite restaurant for the remaining visits. Save the average satisfaction in average_satisfaction and the index of the best restaurant in best_restaurant_index.\n\nimport random\n\n# Set up the restaurants (true qualities are unknown to the visitor!)\nrandom.seed(59)\nqualities = [random.uniform(1, 5) for _ in range(10)]\n\n# YOUR CODE BELOW\n\n\n\nCode\n# Test your solution with the following code\nassert average_satisfaction &gt; 3.7, \"The average satisfaction should be greater than 3.7\"\nassert best_restaurant_index == 2, \"The best restaurant should be number 3\"\nprint(r\"All tests passed, you have successfully implemented the explore vs. exploit strategy!\")",
    "crumbs": [
      "05 Randomness",
      "14 - Recap"
    ]
  },
  {
    "objectID": "tutorials/tut_05_02_recap.html#exercise-3.1---random-menu-generator",
    "href": "tutorials/tut_05_02_recap.html#exercise-3.1---random-menu-generator",
    "title": "Tutorial V.II - Recap with Randomness",
    "section": "Exercise 3.1 - Random Menu Generator",
    "text": "Exercise 3.1 - Random Menu Generator\nCreate a function generate_daily_menu() that generates a daily menu by randomly selecting items from different categories. As our “cache” - the daily menu - is rather small, we only want to receive one menu for each day as a list from the function.\n\nappetizers = [\"Sorted Salad\", \"Binary Bruschetta\", \"Array of Antipasti\"]\nmains = [\"Loop Lasagna\", \"Python Pasta\", \"Recursive Risotto\"]\ndesserts = [\"Binary Brownie\", \"Cache Cookie\", \"Stack Sundae\"]\n\n# YOUR CODE HERE\n\n\n\nCode\n# Test your solution with the following code\nmenu = generate_daily_menu()\nassert len(menu) == 3, \"Menu should contain exactly 3 items\"\nassert menu[0] in appetizers, \"Appetizer should be from the appetizers list\"\nassert menu[1] in mains, \"Main course should be from the mains list\"\nassert menu[2] in desserts, \"Dessert should be from the desserts list\"\n\n# Example usage\nprint(r\"All tests passed, you have successfully implemented the menu generator!\")\nprint(f\"Today's menu:\\nAppetizer: {menu[0]}\\nMain: {menu[1]}\\nDessert: {menu[2]}\")",
    "crumbs": [
      "05 Randomness",
      "14 - Recap"
    ]
  },
  {
    "objectID": "tutorials/tut_05_02_recap.html#exercise-4.1---scheduling-tasks",
    "href": "tutorials/tut_05_02_recap.html#exercise-4.1---scheduling-tasks",
    "title": "Tutorial V.II - Recap with Randomness",
    "section": "Exercise 4.1 - Scheduling Tasks",
    "text": "Exercise 4.1 - Scheduling Tasks\nLet’s create a task scheduler that handles tasks with different due dates. The scheduler should sort tasks by their due date (Earliest Due Date First - EDD strategy) to minimize potential delays.\nYour task is to create a function schedule_tasks(tasks) that:\n\nSorts tasks by due date\nCreates a schedule with start and end times for each task\nReturns the complete schedule as an pandas DataFrame\nKeep the same column names as in the dictionary\n\n\n# Pre-generated tasks (don't modify this!)\n# Times are represented in hours from start (hour 0)\n# For example, due_time: 24 means it's due 24 hours from start\nimport pandas as pd\n\ntasks = [\n    {\n        \"name\": \"Project Review\",\n        \"duration\": 2,  # hours\n        \"due_time\": 12  # due in 12 hours\n    },\n    {\n        \"name\": \"Team Meeting\",\n        \"duration\": 4,\n        \"due_time\": 6\n    },\n    {\n        \"name\": \"Client Presentation\",\n        \"duration\": 3,\n        \"due_time\": 7\n    },\n    {\n        \"name\": \"Email Updates\",\n        \"duration\": 4,\n        \"due_time\": 11\n    },\n    {\n        \"name\": \"Planning Session\",\n        \"duration\": 2,\n        \"due_time\": 9\n    }\n]\n\n# YOUR CODE HERE\n\n\n\nCode\n# Test your solution with the following code\nschedule_df = schedule_tasks(tasks)\nassert schedule_df.shape == (5, 4), \"The schedule should have 5 rows and 4 columns\"\nassert schedule_df.iloc[0]['name'] == \"Team Meeting\", \"First task should be 'Team Meeting'\"\nassert schedule_df.iloc[4]['name'] == \"Project Review\", \"Fifth task should be 'Project Review'\"\nprint(r\"All tests passed, you have successfully implemented the task scheduler!\")",
    "crumbs": [
      "05 Randomness",
      "14 - Recap"
    ]
  },
  {
    "objectID": "tutorials/tut_05_02_recap.html#solving-your-travel-problem-by-brute-force",
    "href": "tutorials/tut_05_02_recap.html#solving-your-travel-problem-by-brute-force",
    "title": "Tutorial V.II - Recap with Randomness",
    "section": "Solving your travel problem by brute force",
    "text": "Solving your travel problem by brute force\nImagine you want to travel during the semester break and you want to visit 6 cities and then return to Hamburg. Your aim is to find the route that is the cheapest to travel. Implement a heuristic that randomly tries 10 different routes and picks the cheapest one. Save the costs in min_cost.\n\n# City names and cost matrix\nimport pandas as pd\nimport random\n\ncities = [\"New York\", \"London\", \"Tokyo\", \"Sydney\", \"Barcelona\", \"Hamburg\"]\n\ncost_matrix = [\n    [0, 700, 1500, 2000, 800, 900],  # New York\n    [700, 0, 1200, 1800, 300, 700],  # London\n    [1500, 1200, 0, 1000, 1100, 1400], # Tokyo\n    [2000, 1800, 1000, 0, 1700, 1500], # Sydney\n    [800, 300, 1100, 1700, 0, 600],  # Barcelona\n    [900, 700, 1400, 1500, 600, 0]   # Hamburg\n]\n\n# Create a DataFrame\ncost_df = pd.DataFrame(cost_matrix, index=cities, columns=cities)\n\n# Display the DataFrame\nprint(cost_df)\n\n# YOUR CODE HERE\n\n           New York  London  Tokyo  Sydney  Barcelona  Hamburg\nNew York          0     700   1500    2000        800      900\nLondon          700       0   1200    1800        300      700\nTokyo          1500    1200      0    1000       1100     1400\nSydney         2000    1800   1000       0       1700     1500\nBarcelona       800     300   1100    1700          0      600\nHamburg         900     700   1400    1500        600        0\n\n\n\n\nCode\n# Test your solution with the following code\nassert min_cost &lt; 6000, \"The cheapest route should be cheaper than 6000. Try again, if you think your algorithm works correctly.\"\nprint(r\"All tests passed, you have successfully implemented the route planner!\")",
    "crumbs": [
      "05 Randomness",
      "14 - Recap"
    ]
  }
]