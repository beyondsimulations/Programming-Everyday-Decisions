---
title: "Lecture IV - Scheduling"
subtitle: "Programming: Everyday Decision-Making Algorithms"
author: "Dr. Tobias Vlćek"
institute: "Kühne Logistics University Hamburg - Winter 2024"
title-slide-attributes:
    data-background-image: "https://images.beyondsimulations.com/logo/image_algorithms-to-live-by.png"
    data-background-opacity: "0.3"
    data-background-color: "#8C3048"

execute:
    echo: true

format:
    revealjs:
        theme: [default, ../styles.scss]
        transition: slide
        transition-speed: fast
        highlight-style: arrow
        code-overflow: wrap
        slide-number: true
        code-copy: true
        code-link: true
        preview-links: auto
        footer: " {{< meta title >}} | {{< meta author >}} | [Home](lecture-scheduling.qmd)"
        output-file: lecture-presentation.html
        mermaid:
            theme: neutral

    html:
        theme: litera
        mermaid:
            theme: neutral

---

# [Introduction]{.flow} {.title}

## Introduction

![](https://images.beyondsimulations.com/atlb/atlb_schedule-washdry.svg)

## Washing Machine & Dryer

Let's solve this simple scheduling problem:

. . .

```{.python}
Task  Washing  Drying
  A    40min   60min
  B    30min   80min
  C    60min   20min
  D    50min   60min
```
. . .

[Goal:]{.highlight} **Minimize total time for washing and drying all loads**

. . .

[Question:]{.question} **An idea how to solve this?**

## Johnson's Rule

[Rule:]{.task} To find the [optimal solution]{.highlight}:

1. Find the job with **shortest duration**:
   - If on **Machine 1** → Schedule First
   - If on **Machine 2** → Schedule Last
   - If **equal** → Choose randomly

2. Remove job from list and **repeat**

## Applying Johnson's Rule {auto-animate=true}

```{.python}
Task  Washing  Drying  Schedule
  A    40min   60min
  B    30min   80min
  C    60min   20min
  D    50min   60min
```

. . .

[Question:]{.question} **What's the first scheduled task?**

## Applying Johnson's Rule {auto-animate=true}

```{.python}
Task  Washing  Drying  Schedule
  A    40min   60min
  B    30min   80min
  C    60min   20min        4
  D    50min   60min
```

- **In Task C**, the dryer is the **shortest** task.
- It is on **Machine 2** → **Schedule Last**

. . .

[Question:]{.question} **What's the next task?**

## Applying Johnson's Rule {auto-animate=true}

```{.python}
Task  Washing  Drying  Schedule
  A    40min   60min
  B    30min   80min        1
  C    60min   20min        4
  D    50min   60min
```

- **In Task B**, the washing machine is the **shortest** task.
- It is on **Machine 1** → **Schedule First**

. . .

[Question:]{.question} **What's the next task?**

## Applying Johnson's Rule {auto-animate=true}

```{.python}
Task  Washing  Drying  Schedule
  A    40min   60min        2
  B    30min   80min        1
  C    60min   20min        4
  D    50min   60min
```

- **In Task A**, the washing machine is the **shortest** task.
- It is on **Machine 1** → **Schedule Second**

. . .

[Now, we only have one task left!]{.highlight}

## Applying Johnson's Rule {auto-animate=true}

```{.python}
Task  Washing  Drying  Schedule
  A    40min   60min        2
  B    30min   80min        1
  C    60min   20min        4
  D    50min   60min        3
```

. . .

**Final sequence: [B A D C]{.highlight}**

## Optimal Solution

**Optimal Solution: [B A D C]{.highlight}**

![](https://images.beyondsimulations.com/atlb/atlb_schedule-johnson-optimal.svg)

<!--
```{mermaid}
%%| echo: false

gantt
    title Optimal Schedule
    dateFormat HH:mm
    axisFormat %H:%M
    
    section Washing
        Wash B : 00:00, 30m
        Wash A : 40m
        Wash D : 50m
        Wash C : 60m

    section Drying
        Dry B : 00:30, 80m
        Dry A : 60m
        Dry D : 60m
        Dry C : 20m
```
-->
**Total time:** 4 hours 20 minutes

. . .

[Question:]{.question} **Is there a worse solution?**

## Suboptimal Solution
**Suboptimal Solution: [C D A B]{.highlight}**

![](https://images.beyondsimulations.com/atlb/atlb_schedule-johnson-suboptimal.svg)

<!--
```{mermaid}
%%| echo: false
gantt
    title Suboptimal Schedule
    dateFormat HH:mm
    axisFormat %H:%M
    
    section Washing
    Wash C : 00:00, 60m
    Wash D : 50m
    Wash A : 40m
    Wash B : 60m

    section Drying
    Dry C : 01:00, 20m
    Dry D : 01:50, 60m
    Dry A : 60m
    Dry B : 80m
```
-->

**Total time:** 5 hours 10 minutes

. . .

[Question:]{.question} **What's the difference?**


# [History]{.flow} {.title}

## [Industrial Revolution]{.invert-font} {background-image="https://images.unsplash.com/photo-1627807451414-0912da0b8aee?q=80&w=3540&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"}

. . .

:::{.invert-font}

- First systematic visualization by Frederick Taylor
- Henry Gantt develops the Gantt Chart around 1910
- Key tool during Industrial Revolution
- But no scheduling theory yet!

:::

. . .

::: {.invert-font}

[Question:]{.question} **Who knows what a Gantt Chart is?**

:::

::: footer
:::



## [Modern Scheduling Theory]{.invert-font} {background-image="https://images.unsplash.com/photo-1508759191076-7d83edf34fb5?q=80&w=3000&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"}

. . .

::: {.invert-font}

- RAND Corporation founded (1948)
- Selmer Johnson publishes Johnson's Rule in 1954
- Beginning of modern scheduling theory
- Many more algorithms and methods developed since

:::

::: footer
:::

# [Scheduling Tasks]{.flow} {.title}

## Task Classification

[Question:]{.question} **What properties can scheduled tasks have?**

. . .

```{mermaid}
%%| echo: false
mindmap
  root((Task Properties))
    Time-Related
      Time windows
      Deadlines
      Start constraints
      Deterministic durations
      Variable durations
      Stochastic durations
    Relationship-Based
      Predecessor relationships
      Successor relationships
      Dependencies
      Priority levels
      Resource constraints
```

. . .

[Question:]{.question} **What types of tasks do you deal with most often?**

## Single Machine Scheduling

![](https://images.beyondsimulations.com/atlb/atlb_schedule-human.svg)

[Question:]{.question} **What is different from before?**

## Order is Irrelevant

:::{.callout-note}
## Order is Irrelevant
Under simple minimization of total processing time, **order doesn't matter!**
:::

. . .

[Question:]{.question} **But is it that simple?**

. . .

:::{.callout-important}
## Order Matters
Order becomes crucial when we consider, **Deadlines, Priorities and Dependencies!**
:::

# [Deadlines]{.flow} {.title}

## Earliest Due Date (EDD)

Tasks with individual deadlines:

```{.python}
Task  Duration  Deadline
  A    40min    110min
  B    30min     90min
  C    60min    150min
  D    50min     70min
  E    30min    210min
```

. . .

[Goal:]{.highlight} **Minimize maximum deadline violation**

. . .

[Question:]{.question} **An idea how to solve this?**

## EDD Solution

[Rule:]{.task} Sort the tasks by deadline.

```{.python}
Task  Duration  Deadline
  A    40min    110min
  B    30min     90min
  C    60min    150min
  D    50min     70min
  E    30min    210min
```

. . .

```{.python}
Task  Duration  Deadline
  D    50min     70min
  B    30min     90min
  A    40min    110min
  C    60min    150min
  E    30min    210min
```

. . .

[Let's visualize this!]{.highlight}

## EDD Schedule

![](https://images.beyondsimulations.com/atlb/atlb_schedule-edd.svg)

<!--
```{mermaid}
%%| echo: false
gantt
    title EDD Schedule
    dateFormat HH:mm
    axisFormat %H:%M
    
    section Tasks
        D: 00:00, 50m
        B: 30m
        A: 40m
        C: 60m
        E: 30m

    section Deadline
        D: 00:00, 70m
        B: 00:00, 90m
        A: 00:00, 110m
        C: 00:00, 150m
        E: 00:00, 210m
```
-->

. . .

[Question:]{.question} **What's the maximum delay here?**

# [Processing Time]{.flow} {.title}

## Shortest Processing Time (SPT)

:::{.columns}

::: {.column width="50%"}

![](https://images.beyondsimulations.com/atlb/atlb_schedule-human.svg)

:::

::: {.column width="50%"}

Instead of deadlines, we now have **processing times.**

[[Goal:]{.highlight} Min. total waiting time]{.fragment}

[[Question:]{.question} **Any ideas?**]{.fragment}

[[Rule:]{.task} Always schedule the shortest remaining task]{.fragment}

:::

:::

## Shortest Processing Time Applied {auto-animate=true}

[Rule:]{.task} Always schedule the **shortest remaining task**. Choose random if multiple tasks are tied.

```{.python}
Task  Duration  Schedule
  A    40min
  B    30min
  C    60min
  D    50min
  E    30min
```

. . .

[Question:]{.question} **What's the order of scheduled tasks?**

## Shortest Processing Time Applied {auto-animate=true}

[Rule:]{.task} Always schedule the **shortest remaining task**. Choose random if multiple tasks are tied.

```{.python}
Task  Duration  Schedule
  A    40min        3
  B    30min        1
  C    60min        5
  D    50min        4
  E    30min        2
```

. . .

**Final sequence: [B E A D C]{.highlight} or [E B A D C]{.highlight}**

## SPT Solution

**Optimal sequence:**

![](https://images.beyondsimulations.com/atlb/atlb_schedule-spt-1.svg)

<!--
```{mermaid}
%%| echo: false
gantt
    title SPT Schedule
    dateFormat HH:mm
    axisFormat %H:%M
    
    section Tasks
    B (30min) : 00:00, 30m
    E (30min) : 30m
    A (40min) : 40m
    D (50min) : 50m
    C (60min) : 60m
```
-->

. . .

[Question:]{.question} **Where can we see the waiting time?**

## SPT Waiting Time

[Total waiting time:]{.highlight} 340 minutes

![](https://images.beyondsimulations.com/atlb/atlb_schedule-spt-2.svg)

. . . 

[Question:]{.question} **Would this be applicable for your work?**

## Weighted SPT

- [Change:]{.highlight} Tasks with **additional priorities**
- Priorities could be, e.g., revenue if we are consultants.

```python
Task  Duration  Revenue
  A    20min    €240
  B    30min    €200
  C    60min    €120
  D    50min    €70
  E    30min    €130
  F    40min    €120
  G    20min    €100
  H    70min    €110
  I    50min    €90
```

. . .

[Question:]{.question} **Any ideas how to approach this?**

## Gain/Revenue Per Minute {auto-animate=true}

[Rule:]{.task} Schedule by revenue per minute (descending)

```python
Task  Duration  Revenue  Revenue/Min  Schedule
  A    20min    €240     12.0
  B    30min    €200      6.7
  C    60min    €120      2.0
  D    50min    €70       1.4
  E    30min    €130      4.3
  F    40min    €120      3.0
  G    20min    €100      5.0
  H    70min    €110      1.6
  I    50min    €90       1.8
```

. . .

[Question:]{.question} **What's the order of scheduled tasks?**

## Gain/Revenue Per Minute {auto-animate=true}

[Rule:]{.task} Schedule by revenue per minute (descending)

```python
Task  Duration  Revenue  Revenue/Min  Schedule
  A    20min    €240     12.0           1
  B    30min    €200      6.7           
  C    60min    €120      2.0           
  D    50min    €70       1.4           
  E    30min    €130      4.3           
  F    40min    €120      3.0           
  G    20min    €100      5.0           
  H    70min    €110      1.6           
  I    50min    €90       1.8           
```

## Gain/Revenue Per Minute {auto-animate=true}

[Rule:]{.task} Schedule by revenue per minute (descending)

```python
Task  Duration  Revenue  Revenue/Min  Schedule
  A    20min    €240     12.0           1
  B    30min    €200      6.7           2
  C    60min    €120      2.0           
  D    50min    €70       1.4           
  E    30min    €130      4.3           
  F    40min    €120      3.0           
  G    20min    €100      5.0           
  H    70min    €110      1.6           
  I    50min    €90       1.8           
```

## Gain/Revenue Per Minute {auto-animate=true}

[Rule:]{.task} Schedule by revenue per minute (descending)

```python
Task  Duration  Revenue  Revenue/Min  Schedule
  A    20min    €240     12.0           1
  B    30min    €200      6.7           2
  C    60min    €120      2.0           
  D    50min    €70       1.4           
  E    30min    €130      4.3           
  F    40min    €120      3.0           
  G    20min    €100      5.0           3
  H    70min    €110      1.6           
  I    50min    €90       1.8           
```

## Gain/Revenue Per Minute {auto-animate=true}

[Rule:]{.task} Schedule by revenue per minute (descending)

```python
Task  Duration  Revenue  Revenue/Min  Schedule
  A    20min    €240     12.0           1
  B    30min    €200      6.7           2
  C    60min    €120      2.0           
  D    50min    €70       1.4           
  E    30min    €130      4.3           4
  F    40min    €120      3.0           5
  G    20min    €100      5.0           3
  H    70min    €110      1.6           
  I    50min    €90       1.8           
```

## Gain/Revenue Per Minute {auto-animate=true}

[Rule:]{.task} Schedule by revenue per minute (descending)

```python
Task  Duration  Revenue  Revenue/Min  Schedule
  A    20min    €240     12.0           1
  B    30min    €200      6.7           2
  C    60min    €120      2.0           6
  D    50min    €70       1.4           
  E    30min    €130      4.3           4
  F    40min    €120      3.0           5
  G    20min    €100      5.0           3
  H    70min    €110      1.6           
  I    50min    €90       1.8           
```

## Gain/Revenue Per Minute {auto-animate=true}

[Rule:]{.task} Schedule by revenue per minute (descending)

```python
Task  Duration  Revenue  Revenue/Min  Schedule
  A    20min    €240     12.0           1
  B    30min    €200      6.7           2
  C    60min    €120      2.0           6
  D    50min    €70       1.4           
  E    30min    €130      4.3           4
  F    40min    €120      3.0           5
  G    20min    €100      5.0           3
  H    70min    €110      1.6           
  I    50min    €90       1.8           7
```

## Gain/Revenue Per Minute {auto-animate=true}

[Rule:]{.task} Schedule by revenue per minute (descending)

```python
Task  Duration  Revenue  Revenue/Min  Schedule
  A    20min    €240     12.0           1
  B    30min    €200      6.7           2
  C    60min    €120      2.0           6
  D    50min    €70       1.4           
  E    30min    €130      4.3           4
  F    40min    €120      3.0           5
  G    20min    €100      5.0           3
  H    70min    €110      1.6           8
  I    50min    €90       1.8           7
```

## Gain/Revenue Per Minute {auto-animate=true}

[Rule:]{.task} Schedule by revenue per minute (descending)

```python
Task  Duration  Revenue  Revenue/Min  Schedule
  A    20min    €240     12.0           1
  B    30min    €200      6.7           2
  C    60min    €120      2.0           6
  D    50min    €70       1.4           9
  E    30min    €130      4.3           4
  F    40min    €120      3.0           5
  G    20min    €100      5.0           3
  H    70min    €110      1.6           8
  I    50min    €90       1.8           7
```

. . .

:::{.callout-tip}
## Metric Priorities
Without revenues, we can use the same approach with **metric priorities**!
:::

# [Dependencies]{.flow} {.title}

## Priority Inversion

:::: {.columns}

::: {.column width="50%"}

**Setup:**

```python
Task  Duration  Priority
  A    20min     3
  B    30min     1
  C    30min     2
  D    30min     2
  E    30min     2
```

![](https://images.beyondsimulations.com/atlb/atlb_schedule-inheritance.svg)

[**Challenge:**
High-priority tasks depend on low-priority tasks.]{.fragment}

:::

::: {.column width="50%"}

[[Risk:]{.highlight} Priority inversion can lead to significant delays!]{.fragment}

[![](https://images.unsplash.com/photo-1614728894747-a83421e2b9c9?q=80&w=3474&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D){width=90%}]{.fragment .center}
:::

::::

## Priority Inheritance

[Question:]{.question} **How to handle with shortest processing time?**

::: {.incremental}

- [Rule:]{.task} Tasks inherit priority from their dependents.
- A gets the highest priority from B
- This ensures the **critical path completion**

:::

. . .

```python
Task  Duration  Priority
  A    20min     3
  B    30min     3
  C    30min     2
  D    30min     2
  E    30min     2
```

## EDD and Dependencies

[Question:]{.question} **What's was earliest due date again?**

. . .

- Sort the tasks by deadline, schedule equal tasks randomly
- Things get more complex when we add dependencies

. . .

```python
Task  Duration  Deadline  Predecessor
  A    40min    110min    None
  B    30min     90min    D
  C    60min    150min    A
  D    50min     70min    None
  E    30min    210min    C
```

[Question:]{.question} **Any ideas how to solve this?**



## Lawler's Algorithm

[Rule:]{.task} We can use **Lawler's Algorithm** (1968)

1. Consider all tasks [without successors]{.highlight}
2. Choose the one with **latest deadline**
3. Schedule the task **last**
4. **Remove** it from the network and start again

## Lawler's Applied {auto-animate=true}

```python
Task  Duration  Deadline  Predecessor Schedule
  A    40min    110min    None
  B    30min     90min    D
  C    60min    150min    A
  D    50min     70min    None
  E    30min    210min    C
```

. . .

[Question:]{.question} **What's the schedule?**

## Lawler's Applied {auto-animate=true}

```python
Task  Duration  Deadline  Predecessor Schedule
  A    40min    110min    None
  B    30min     90min    D
  C    60min    150min    A
  D    50min     70min    None
  E    30min    210min    C             5
```

## Lawler's Applied {auto-animate=true}

```python
Task  Duration  Deadline  Predecessor Schedule
  A    40min    110min    None
  B    30min     90min    D
  C    60min    150min    A             4
  D    50min     70min    None
  E    30min    210min    C             5
```

## Lawler's Applied {auto-animate=true}

```python
Task  Duration  Deadline  Predecessor Schedule
  A    40min    110min    None
  B    30min     90min    D             3
  C    60min    150min    A             4
  D    50min     70min    None
  E    30min    210min    C             5
```

## Lawler's Applied {auto-animate=true}

```python
Task  Duration  Deadline  Predecessor Schedule
  A    40min    110min    None
  B    30min     90min    D             3
  C    60min    150min    A             4
  D    50min     70min    None          2
  E    30min    210min    C             5
```

## Lawler's Applied {auto-animate=true}

```python
Task  Duration  Deadline  Predecessor Schedule
  A    40min    110min    None          1
  B    30min     90min    D             3
  C    60min    150min    A             4
  D    50min     70min    None          2
  E    30min    210min    C             5
```

. . .

:::{.callout-tip}
## Successor Tasks
Note, how all tasks become tasks without successors at some point.
:::

## Lawler's Solution

![](https://images.beyondsimulations.com/atlb/atlb_schedule-edd-inheritance.svg)

:::{.callout-note}
## Predecessor Tasks
Predecessor tasks are tasks that must be completed before the current task can start. They are marked in grey in the chart.
:::

. . .

[Question:]{.question} **What's the maximum delay?**

# [Difficulty of Scheduling]{.flow} {.title}

## SPT with Predecessors

- No solution in **polynomial time**
- [NP-hard problem]{.highlight} (no efficient algorithm)
- True for **most scheduling problems!**
- We can use **heuristics**, though

. . .

[Question:]{.question} **What have we missed so far?**

# [Real-time Scheduling]{.flow} {.title}

## Interruptions

- In reality, we **cannot predict the future**
- We need to react to **new tasks** as they happen
- If we have a **deadline**, we might need to meet it
- Let's look at this for the [earliest due date objective]{.highlight}

. . .

:::{.callout-note}
## Quick reminder
An earliest due date is a specific point in time by which a task must be completed. Under this objective, we want to minimize the **maximum delay**.
:::

## Real-time EDD

8:00-12:00 Schedule:

```python
Task           Duration  Deadline
Email A        20min     9:00
Create PPT     60min    10:50
Investor call  10min     9:00
Email B        30min    10:20
Liquidity      40min    11:00
Email C        20min    11:20
Email D        40min    10:00
```

. . .

[Question:]{.question} **Any ideas how to start with under the objective of the earliest due date?**

## EDD Rule for Real-time

[Rule:]{.task}

- Always schedule the task with the **earliest deadline**
- If a new task with an earlier deadline comes in, **re-schedule**
- Otherwise, stick to the original schedule.

. . .

:::{.callout-tip}
## Equal Deadline
If a new task has the same deadline as the current task, you can choose either. But due to the cost of context switching, you might want to stick with the current task.
:::

## EDD Solution for Real-time

![](https://images.beyondsimulations.com/atlb/atlb_schedule-edd-breaks.svg)

. . .

[Question:]{.question} **What's the maximum delay with this schedule?**

## SPT for Real-time

:::{.callout-tip}
## Quick reminder

A shortest processing time is the task with the shortest duration. Under this objective, we want to minimize the **total waiting time**.
:::

. . .

[Question:]{.question} **Any ideas how to start here?**

## SPT Rule for Real-time

[Rule:]{.task}

- Always schedule the task with the **shortest duration**
- If a new task with a shorter duration comes in, **re-schedule**
- Otherwise, stick to the original schedule.

. . .

:::{.callout-note}
## Equal Duration
If a new task has the same duration as the current task, you can choose either. But due to the cost of context switching, you might again want to stick with the current task.
:::

## SPT Solution for Real-time {auto-animate=true}

![](https://images.beyondsimulations.com/atlb/atlb_schedule-spt-breaks.svg)

. . .

[Question:]{.question} **Where can we see the waiting time?**

## SPT Solution for Real-time {auto-animate=true}

![](https://images.beyondsimulations.com/atlb/atlb_schedule-spt-breaks-wait.svg)

[Total waiting time:]{.highlight} 260 minutes

# [Thrashing]{.flow} {.title}

## What is Thrashing?

- Excessive **context switching**
- Organization [overhead exceeds productivity]{.highlight}
- Maximum activity, minimum output

. . .

[Question:]{.question} **Have you ever experienced this?**

## Thrashing Warning Signs

- Constant **task switching**
- **Nothing** getting completed
- Increasing **stress levels**
- Declining **quality**

. . .

[Question:]{.question} **Any ideas how to prevent this?**

## Preventing Thrashing Strategic

:::{.callout-tip}
## Strategic
Strategic solutions focus on **long-term** changes to prevent thrashing.
:::

. . .

1. Task rejection/delegation threshold
2. Simplified organization systems
3. Minimum work period rules
4. Reduced reactivity requirements


## Preventing Thrashing Tactical

1. Time blocking
2. Focus periods
3. Task batching
4. Priority freezes

. . .

[Question:]{.question} **What strategies have worked for you?**

## Key Takeaways

1. Scheduling is [crucial for effective time management]{.highlight}
2. Different objectives need different algorithms
   - **EDD** for deadline management
   - **SPT** for waiting time reduction
3. Address **thrashing early**
4. Define **your** reactivity goals
5. Use appropriate algorithms as **foundations**

## The End

::: {.callout-note}
**That's it for todays lecture!**\
We now have covered a brief introduction into scheduling. Now, we can start with the tutorials! As we have now a good foundation, we can start to apply some algorithms on data sets in Python.
:::

# [Literature]{.flow} {.title}

## Interesting literature to start

- Christian, B., & Griffiths, T. (2016). Algorithms to live by: the computer science of human decisions. First international edition. New York, Henry Holt and Company.[^4]

[^4]: The main inspiration for this lecture. Nils and I have read it and discussed it in depth, always wanting to translate it into a course.


## Books on Programming

- Downey, A. B. (2024). Think Python: How to think like a computer scientist (Third edition). O’Reilly. [Here](https://greenteapress.com/wp/think-python-3rd-edition/)
- Elter, S. (2021). Schrödinger programmiert Python: Das etwas andere Fachbuch (1. Auflage). Rheinwerk Verlag.

. . .

::: {.callout-note}
Think Python is a great book to start with. It's available online for free. Schrödinger Programmiert Python is a great alternative for German students, as it is a very playful introduction to programming with lots of examples.
::: 

## More Literature

For more interesting literature, take a look at the [literature list](../general/literature.qmd) of this course.




